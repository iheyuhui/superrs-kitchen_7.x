#!/bin/bash

# Do not edit this file unless you know what you are doing

banner() {
	echo "$clears"
	echo "------------------------------------------------------"
	echo "$bold$stand                 SuperR's Kitchen Free                $normal"
	echo "$italic$stand                       by SuperR                      $normal"
	echo "------------------------------------------------------"
	echo ""
}
aikdl() {
	sterm=$(echo "$dlinfo" | gawk '{print $2}')
	nname=$(echo "$dlinfo" | gawk '{print $1}')
	for i in \
		"$(wget -qO- "https://forum.xda-developers.com/showthread.php?t=2073775" | cat | grep "$sterm\.zip\|$sterm-" | cut -d'"' -f2 | grep http)" \
		"https://basketbuild.com/uploads/devs/osm0sis/aik/$(basename $(wget -qO- "https://basketbuild.com/devs/osm0sis/aik" | cat | grep ">Download<" | grep "$sterm" | cut -d'"' -f4))"\
	; do
		(wget -O "$nname" "$i" 2>&1) >/dev/null
		if [[ -f "$nname" && $(file "$nname" | grep "Zip\|gzip") ]]; then
			break
		else
			rm -rf "$nname"
		fi
	done
}
assert_devices() {
	assertch=""
	while [[ ! $assertch ]]; do
		isassertdevices
		if [[ -d $prfiles/boot ]]; then
			assertdir="$prfiles/boot"
		else
			assertdir="$prfiles"
		fi
		cd $usdir
		if [[ ! $(grep -o "#ASSERT" updater-script) ]]; then
			sed -i '1i#ASSERT' updater-script
		fi
		if [[ ! $(grep -o "#ASSERT" updater-script) ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_asserts_no_assert"
			echo ""
			read -p "$t_enter_rom_tools"
			return
		fi

		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_asserts$normal"
		echo ""
		echo "1) $t_menu_add_assert ($bluet$t_title_current$greent$assertdevices$normal)"
		echo "2) $t_menu_asserts_custom ($bluet$t_title_current$greent$assertcustom1$normal)"
		echo "3) $t_menu_asserts_reset"
		echo "${yellowt}4) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" assertch

		if [[ ! ${assertch} =~ ^[1-4]$ ]] && [[ ! $assertch = "m" && ! $assertch = "q" ]]; then
			assertch=""
			continue
		elif [[ $assertch = "4" ]]; then # START ROM Tools menu
			return
		elif [[ $assertch = "m" ]]; then # START Main menu
			cd $base
			main="1"
			return
		elif [[ $assertch = "q" ]]; then # START Quit
			echo ""
			echo ""
			exit
		fi
		grep " getprop(\|(getprop(" updater-script > $assertdir/assert_original
		grep -v " getprop(\|(getprop(" updater-script > updater-script2
		mv updater-script2 updater-script
		if [[ $assertch = "1" ]]; then # START Add/Remove Device asserts
			rm -rf $assertdir/assertdevice
			rm -rf $assertdir/assert
			banner
			echo "$t_asserts_current $greent$assertdevices$normal"
			echo ""
			echo -e "$t_asserts_enter"
			echo ""
			echo "${yellowt}surnia,surnia_cdma,xt1526$normal"
			echo ""
			read -e -i "$devicename" -p "" assertdevice2
			banner
			echo "$bluet$t_asserts_prep$normal"
			assertdevice=$(echo "$assertdevice2" | sed 's/\ //g')
			echo "$assertdevice" | tr , '\n' > $assertdir/assertdevice
			cd $assertdir
			cat $tools/updater/custom/assert >> assert
			firstdevice=$(head -1 assertdevice)
			sed -i "s/#DEVICENAME/$firstdevice/g" assert
			cat assertdevice | while read line; do
				if [[ ! $(grep -o "\"$line\"" assert) ]]; then
					cat $tools/updater/custom/device >> assert
					sed -i "s/#DEVICENAME/$line/g" assert
					sed -i "s/#DEVICECHK/$devicechk/g" assert
				fi
			done
			cat $tools/updater/custom/abort2 >> assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			sed -i "s/#ASSERTDEVICE/$assertdevice/g" assert
		elif [[ $assertch = "2" ]]; then # START Add Custom assert
			banner
			echo -e "$t_asserts_type"
			echo ""
			echo "${yellowt}ro.baseband=1.09.20.1112$normal"
			echo ""
			read -e -p "" assertcustom
			banner
			echo "$bluet$t_asserts_prep_cust$normal"
			propname=$(echo "$assertcustom" | cut -d"=" -f1)
			propvalue=$(echo "$assertcustom" | cut -d"=" -f2)
			cd $assertdir
			cat $tools/updater/custom/assertcustom >> assertcustom
			sed -i "s/#PROPNAME/$propname/g; s/#PROPVALUE/$propvalue/g" assertcustom
		elif [[ $assertch = "3" ]]; then # START Reset asserts to default
			cd $assertdir
			rm -rf assert assertcustom assertdevice
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devicename/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
			assertch=""
			continue
		fi
		if [[ -f assertcustom ]]; then
			grep "ro.product.device" assert > assert-2
			mv assert-2 assert
			cat assertcustom >> assert
		fi
		sed -i '/#ASSERT/ r assert' $usdir/updater-script
		assertch=""
		if [[ $assertdir != "$prfiles/boot" ]]; then
			assertch=""
			continue
		fi
		return
	done
}
boot_dmverity() {
	if [[ $fstab != 1 && -f "$fstab" ]]; then
		banner
		echo "${bluet}Removing dm-verity from ramdisk ...$normal"
		${usesudo}$tools/source/rmverity.py $fstab >> $logs/boot.log
		if [[ ! $(echo "$fstab" | grep "bootimg\|recoveryimg") ]]; then
			${usesudo}chown -h $myuser:$myuser $fstab
		fi
	fi
	if [[ -f $romdir/${chosenimg}img/split_img/${chosenimg}.img-zImage ]]; then
		banner
		echo "${bluet}Removing dm-verity from dtb ...$normal"
		${usesudo}$tools/source/rmverity.py $romdir/${chosenimg}img/split_img/${chosenimg}.img-zImage >> $logs/boot.log
	fi
}
boot_forcee() {
	if [[ $forceestatus = "Yes" ]]; then
		banner
		read -n 1 -p "$t_boot_forcee_rem_ask" reply
		if [[ ! $reply = "y" ]]; then
			return
		fi
		banner
		echo "$bluet$t_boot_rem_forcee$normal"
		fetmp="forceencrypt forcefdeorfbe fileencryption"
		for i in $fetmp; do
			if [[ $(${usesudo}grep "/data" $fstab | grep "$i") ]]; then
				${usesudo}sed -i "/\/data/s/$i/encryptable/g" $fstab
				if [[ ! $(echo "$fstab" | grep "bootimg\|recoveryimg") ]]; then
					${usesudo}chown -h $myuser:$myuser $fstab
				fi
				touch $prfiles/$i
			fi
		done
		banner
		echo "$greent$t_boot_forsee_rem$normal"
		echo ""
		read -p "$t_enter_boot_menu"
	elif [[ $forceestatus = "No" ]]; then
		banner
		read -n 1 -p "$t_boot_forcee_add_ask" reply
		if [[ ! $reply = "y" ]]; then
			return
		fi
		banner
		echo "$bluet$t_boot_add_forcee$normal"
		if [[ -f $prfiles/forcefdeorfbe ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forcefdeorfbe/g' $fstab
		elif [[ -f $prfiles/forceencrypt ]]; then
			${usesudo}sed -i '/\/data/s/encryptable/forceencrypt/g' $fstab
		fi
		rm -rf $prfiles/forcefdeorfbe $prfiles/forceencrypt
		banner
		echo "$greent$t_boot_forcee_add$normal"
		echo ""
		read -p "$t_enter_boot_menu"
	fi
	return
}
boot_initd() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_warn$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		return
	fi
	if [[ -f $romdir/system/init.rc ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$redt$t_boot_initd_pixel$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		return
	fi
	if [[ $initdstatus = "No" ]]; then
		${usesudo}cp -r $tools/boot/initd/bootimg $romdir/
		${usesudo}sed -i '1iimport /init.d_support.sh' $ramdir/init.rc
		mkdir -p $sysdir/etc/init.d
		touch $sysdir/etc/init.d/placeholder
		if [[ -d $prfiles/init.d ]]; then
			rm -rf $sysdir/etc/init.d
			mv $prfiles/init.d $sysdir/etc/
		fi
		banner
		echo "$greent$t_boot_initd_add$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		return
	elif [[ $initdstatus = "Yes" ]]; then
		banner
		echo "$greent$t_boot_already_initd$normal"
		echo ""
		read -n 1 -p "$t_boot_initd_rem_q"
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			if [[ -d $sysdir/etc/init.d ]]; then
				mv $sysdir/etc/init.d $prfiles/
			fi
			if [[ -f $sysdir/bin/sysinit && $(grep "init.d" $sysdir/bin/sysinit) ]]; then
				rm -rf $sysdir/bin/sysinit
			fi
			cd $ramdir
			rm -rf $sysdir/etc/init.d
			${usesudo}rm -rf $ramdir/sbin/sysinit.sh
			${usesudo}rm -rf $ramdir/init.d_support.sh
			${usesudo}grep -v "init.d_support" init.rc | ${usesudo}tee init.rc2 >/dev/null
			if [[ -f init.rc2 ]]; then
				${usesudo}mv init.rc2 init.rc
				${usesudo}sed -i "s/[[:blank:]]*$//" init.rc
				${usesudo}gawk 'BEGIN{x=1} /init.d/{x=!x;next} x{print}' init.rc | ${usesudo}tee init.rc2 >/dev/null
				${usesudo}sed -i '${/^$/d;}' init.rc2
				${usesudo}mv init.rc2 init.rc
			fi
			isinitd
			if [[ $initdstatus = "Yes" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_boot_initd_cant$normal"
				echo ""
				read -p "$t_enter_boot_menu"
				return
			fi
			banner
			echo "$greent$t_boot_initd_rem$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			return
		else
			return
		fi
	fi
}
boot_insecure() {
	if [[ $chosenimg = "recovery" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_warn$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		return
	fi
	if [[ $insecurestatus = "No" ]]; then
		if [[ $(${usesudo}grep "ro.secure=1" $dfprop) ]]; then
			${usesudo}sed -i 's/ro\.secure=1/ro\.secure=0/' $dfprop
		else
			${usesudo}gawk 'a=/^#/{b=1}b&&!a{print "ro\.secure=0";b=0}1' $dfprop | ${usesudo}tee ${dfprop}2 >/dev/null
			${usesudo}mv ${dfprop}2 $dfprop
		fi
		if [[ $(${usesudo}grep "ro.adb.secure=1" $dfprop) ]]; then
			${usesudo}sed -i 's/ro\.adb\.secure=1/ro\.adb\.secure=0/' $dfprop
		else
			${usesudo}gawk 'a=/ro\.secure=0/{b=1}b&&!a{print "ro\.adb\.secure=0";b=0}1' $dfprop | ${usesudo}tee ${dfprop}2 >/dev/null
			${usesudo}mv ${dfprop}2 $dfprop
		fi
		if [[ ! $(echo "$dfprop" | grep "bootimg\|recoveryimg") ]]; then
			${usesudo}chown -h $myuser:$myuser $dfprop
		fi
		banner
		echo "$greent$t_boot_insecure$normal"
		echo ""
		read -p "$t_enter_boot_menu"
		return
	elif [[ $insecurestatus = "Yes" ]]; then
		banner
		echo "$greent$t_boot_already_insecure$normal"
		echo ""
		read -n 1 -p "$t_boot_secure_ask"
		echo ""
		echo ""
		if [[ $REPLY = "y" ]]; then
			${usesudo}sed -i 's/ro\.secure=0/ro\.secure=1/' $dfprop
			${usesudo}sed -i 's/ro\.adb\.secure=0/ro\.adb\.secure=1/' $dfprop
			banner
			echo "$greent$t_boot_secure$normal"
			echo ""
			read -p "$t_enter_boot_menu"
			return
		else
			return
		fi
	fi
}
boot_repack() {
	if [[ ! $bootext ]]; then
		banner
		echo "$bluet$t_boot_repack $chosenimg2 ...$normal"
		echo ""
	fi
	if [[ ! -d $prfiles/${chosenimg}_orig ]]; then
		mkdir -p $prfiles/${chosenimg}_orig
		cp $romdir/$chosenimg2 $prfiles/${chosenimg}_orig/
	fi
	${usesudo}mv $romdir/${chosenimg}img/ramdisk $AIK/
	${usesudo}mv $romdir/${chosenimg}img/split_img $AIK/
	cd $AIK
	${usesudo}./repackimg.$script 2>&1 >> $logs/boot.log
	if [[ $? = "1" ]]; then
		${usesudo}mv $AIK/ramdisk $romdir/${chosenimg}img/
		${usesudo}mv $AIK/split_img $romdir/${chosenimg}img/
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_repack_problem $chosenimg$normal"
		echo ""
		read -p "$t_enter_continue"
		if [[ ! $bootext ]]; then
			return
		fi
	else
		${usesudo2}chown -hR $myuser:$myuser image-new.img
		cp image-new.img $romdir/${chosenimg}.img
		${usesudo}./cleanup.sh 2>&1 >> $logs/boot.log
		rm -rf $romdir/${chosenimg}img
	fi
	if [[ $islg = "lge" ]]; then
		$tools/open_bump.py $chosenimg.img
		mv ${chosenimg}_bumped.img $chosenimg.img
		if [[ ! $bootext ]]; then
			echo "$greent$t_boot_bump_rename $chosenimg.img$normal"
			echo ""
		fi
	fi
	if [[ ! $bootext ]]; then
		banner
		echo "$greent$chosenimg.img$t_boot_packed_d$normal"
		echo ""
		read -p "$t_enter_continue"
		return
	fi
	cd $romdir
	bootext=""
	return
}
choose_img() {
	chosenimg2=""
	findimg=$(ls $romdir | grep "^boot\.img$\|^recovery\.img$\|^kernel\.elf$")
	countimg=$(echo "$findimg" | wc -l)
	if [[ $countimg = "1" ]]; then
		chosenimg2="$findimg"
	elif [[ $countimg -gt "1" ]]; then
		while [[ ! $chosenimg2 ]]; do
			banner
			echo "$bluet$t_startup_project $greent$romname$normal"
			echo "$bluet$t_startup_version $greent$androidversion$normal"
			echo ""
			echo "$yellowb$redt$t_title_cho_boot$normal"
			echo ""
			choosepr imgcho in ${findimg[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			elif [[ $REPLY = "m" ]]; then
				cd $base
				main="1"
				return
			else
				chosenimg2="$imgcho"
			fi
		done
	fi
	if [[ $chosenimg2 = "boot.img" || $chosenimg2 = "kernel.elf" ]]; then
		chosenimg="boot"
	elif [[ $chosenimg2 = "recovery.img" ]]; then
		chosenimg="recovery"
	fi
}
boot_tools() {
	main=""
	loop="0"
	while [[ $loop = "0" ]]; do
		banner
		echo "$bluet$t_boot_status$normal"
		timestamp=$(date +%m-%d-%Y-%H:%M:%S)
		dmveritystatus=""
		forceestatus=""
		dmveritystatus1=""
		forceestatus1=""
		insecurestatus=""
		initdstatus=""
		insecurestatus1=""
		initdstatus1=""
		islg=""
		if [[ -f $sysdir/build.prop ]]; then
			api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
			androidversion=$(grep "ro.build.version.release" $sysdir/build.prop | cut -d"=" -f2)
		elif [[ -f $romdir/build.prop ]]; then
			api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
			androidversion=$(grep "ro.build.version.release" $romdir/build.prop | cut -d"=" -f2)
		else
			api="${redt}N/A"
			androidversion="${redt}N/A"
		fi
		if [[ -f $tools/open_bump.py ]]; then
			if [[ -f $sysdir/build.prop ]]; then
				islg=$(grep "ro.product.brand" $sysdir/build.prop | cut -d"=" -f2)
			elif [[ -f $romdir/build.prop ]]; then
				islg=$(grep "ro.product.brand" $romdir/build.prop | cut -d"=" -f2)
			fi
			if [[ $islg = "lge" ]]; then
				bumped=""
				bumpedr=""
				cd $romdir
				if [[ -f $romdir/recovery.img ]]; then
					bumpedr=$($tools/open_bump.py recovery.img | grep "already bumped")
					rm -rf recovery_bumped.img
				else
					bumped=$($tools/open_bump.py boot.img | grep "already bumped")
					rm -rf boot_bumped.img
				fi
				if [[ $bumped ]]; then
					bumpstatus=$(echo "${greent}Yes")
				else
					bumpstatus=$(echo "${redt}No")
				fi
				if [[ $bumpedr ]]; then
					bumpstatusr=$(echo "${greent}Yes")
				else
					bumpstatusr=$(echo "${redt}No")
				fi
			fi
		fi
		if [[ ! -f $romdir/system/init.rc ]]; then
			if [[ ! -d $romdir/bootimg && ! -d $romdir/recoveryimg ]]; then
				prchoice="ext"
				choose_img
			else
				if [[ -d $romdir/bootimg ]]; then
					chosenimg="boot"
					chosenimg2="boot.img"
				elif [[ -d $romdir/recoveryimg ]]; then
					chosenimg="recovery"
					chosenimg2="recovery.img"
				fi
			fi
			ramdir="$romdir/${chosenimg}img/ramdisk"
			if [[ -f $ramdir/default.prop ]] && [[ ! -L $ramdir/default.prop ]]; then
				dfprop="$ramdir/default.prop"
			elif [[ -f $romdir/system/etc/prop.default ]]; then
				dfprop="$romdir/system/etc/prop.default"
			elif [[ -f $romdir/vendor/default.prop ]]; then
				dfprop="$romdir/vendor/default.prop"
			fi
		else
			chosenimg="boot"
			ramdir="$romdir/system"
			if [[ -L $ramdir/default.prop ]]; then
				if [[ -f $romdir/system/etc/prop.default ]]; then
					dfprop="$romdir/system/etc/prop.default"
				else
					dfprop="bad"
				fi
			else
				dfprop="$ramdir/default.prop"
			fi
		fi
		if [[ -d $romdir/${chosenimg}img || -f $romdir/system/init.rc ]]; then
			choice=""
			while [[ ! $choice ]]; do
				isdmverity
				isforcee
				isinitd
				isinsecure

				banner
				echo "$bluet$t_startup_project $greent$romname$normal"
				echo "$bluet$t_startup_version $greent$androidversion$normal"
				echo ""
				echo "$yellowb$redt$t_title_boot$normal"
				echo ""
				if [[ ! -f $romdir/system/init.rc ]]; then
					echo "1) $t_menu_pack_boot $chosenimg2"
				fi
				if [[ $chosenimg = "boot" ]]; then
					echo "2) $t_menu_initd ($bluet$t_title_current$initdstatus1$normal)"
					echo "3) $t_menu_insecure ($bluet$t_title_current$insecurestatus1$normal)"
					echo "4) $t_menu_dmverity ($bluet$t_title_current$dmveritystatus1$normal)"
					echo "5) $t_menu_forcee ($bluet$t_title_current$forceestatus1$normal)"
					echo "6) $t_menu_deopatch"
				fi
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice
				
				if [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
					choice=""
					continue
				elif [[ $choice = "m" ]]; then # START Main menu
					cd $base
					return
				elif [[ $choice = "q" ]]; then # START Quit
					echo ""
					echo ""
					exit
				fi
				if [[ -f $romdir/system/init.rc ]]; then
					if [[ $choice = "1" ]]; then
						choice=""
					fi
				fi
				if [[ $chosenimg != "boot" ]]; then
					if [[ ${choice} =~ ^[2-5]$ ]]; then
						choice=""
					fi
				fi
				if [[ $choice = "1" ]]; then # START Pack img, delete ramdisk
					boot_repack
				elif [[ $choice = "2" ]]; then # START Add/Remove init.d support
					boot_initd
					choice=""
					continue
				elif [[ $choice = "3" ]]; then # START Insecure/Secure the boot.img
					boot_insecure
					choice=""
					continue
				elif [[ $choice = "4" ]]; then # START Remove dm-verity
					findfstab
					# if [[ ! $(${usesudo}grep "verify" $fstab) ]]; then
					# 	banner
					# 	echo "${redb}${yellowt}${bold}$t_notice$normal"
					# 	echo "$redt$t_boot_already_dmverity$normal"
					# 	echo ""
					# 	read -p "$t_enter_boot_menu"
					# 	choice=""
					# 	continue
					# fi
					boot_dmverity
					banner
					echo "$greent$t_boot_dmverity_rem$normal"
					echo ""
					read -p "$t_enter_boot_menu"
					choice=""
					continue
				elif [[ $choice = "5" ]]; then # START Remove forceencrypt
					if [[ -f $romdir/system/init.rc ]]; then
						cd $romdir/system
					else
						cd $romdir/bootimg/ramdisk
					fi
					findfstab
					boot_forcee
					choice=""
					continue
				elif [[ $choice = "6" ]]; then # START Patch sepolicy for Oreo deodex
					cd $romdir
					sepol=$(${usesudo}find -name *sepolicy* 2>/dev/null | grep -v "test\|txt\|mapping")
					if [[ $sepol ]]; then
						sepgood=
						while read i; do
							omd5=$(md5sum "$i" | gawk '{print $1}')
							if [[ $(echo "$i" | grep "\.cil$") ]]; then
								line=$(grep -e "(allow zygote.* dalvikcache_data_file.* (file (" "$i")
								if [[ $line ]]; then
									while read e; do
										if [[ ! $(echo "$e" | grep "execute") ]]; then
											nline=$(echo "$e" | sed 's/)))/\ execute)))/')
											sed -i "s/$e/$nline/" "$i"
										fi
									done <<< "$line"
								else
									znames=$(grep -e "(allow zygote.*" "$i" | cut -d' ' -f2 | sort -u)
									dnames=$(grep -e "(allow .*dalvikcache_data_file.*" "$i" | cut -d' ' -f3 | sort -u)
									while read z; do
										while read d; do
											echo "(allow $z $d (file (execute)))" >> "$i"
										done <<< "$dnames"
									done <<< "$znames"
								fi
							else
								dumpf=$($usesudo$ttools/bootimg seinject -dt -P "$i")
								znames=$(grep -e "ALLOW zygote.*" <<< "$dumpf" | cut -d' ' -f3 | sort -u)
								dnames=$(grep -e "ALLOW.*dalvikcache_data_file.*" <<< "$dumpf" | cut -d' ' -f5 | sort -u)
								if [[ $znames && $dnames ]]; then
									while read z; do
										while read d; do
											$usesudo$ttools/bootimg seinject -s $z -t $d -c file -p execute -P "$i" -o "$i" >> $logs/boot.log
										done <<< "$dnames"
									done <<< "$znames"
								else
									$usesudo$ttools/bootimg seinject -s zygote -t dalvikcache_data_file -c file -p execute -P "$i" -o "$i" >> $logs/boot.log
								fi
							fi
							if [[ $(md5sum "$i" | gawk '{print $1}') != $omd5 ]]; then
								sepgood=1
								${usesudo}chown $myuser:$myuser "$i"
							fi
						done <<< "$sepol"
						banner
						if [[ $sepgood ]]; then
							echo "$greent$t_menu_deopatch_add$normal"
						else
							echo "$redt$t_menu_deopatch_fail$normal"
						fi
					else
						banner
						echo "${redt}$t_menu_deopatch_none$normal"
					fi
					echo ""
					read -p "$t_enter_boot_menu"
					choice=""
					continue
				fi
			done
		fi
		if [[ $chosenimg ]]; then
			choice=""
			while [[ ! $choice ]]; do
				banner
				echo "$bluet$t_startup_project $greent$romname$normal"
				echo "$bluet$t_startup_version $greent$androidversion$normal"
				echo ""
				echo "$yellowb$redt$t_title_boot$normal"
				echo ""
				echo "$redt$t_title_unpack$normal"
				echo ""
				if [[ $islg = "lge" && $bumpstatusr ]]; then
					echo "1) $t_menu_unpack $chosenimg2 ($bluet$t_title_bumped$bumpstatusr$normal)"
				else
					echo "1) $t_menu_unpack $chosenimg2"
				fi
				echo "2) $t_menu_boot_flashable $chosenimg"
				if [[ $countimg -gt "1" ]]; then
					ccount=3
					echo "3) $t_menu_switch_boot"
				else
					ccount=2
				fi
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice

				if [[ ! ${choice} =~ ^[1-$ccount]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
					choice=""
					continue
				elif [[ $choice = "m" ]]; then # START Main menu
					cd $base
					return
				elif [[ $choice = "q" ]]; then # START Quit
					echo ""
					echo ""
					exit
				elif [[ $choice = "1" ]]; then # START Unpack img
					boot_unpack
					break
				elif [[ $choice = "2" ]]; then # START Build flashable
					if [[ $chosenimg = "boot" && ! -f $romdir/boot.img ]]; then
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo "$redt$t_boot_no_img $romname$normal"
						echo ""
						read -p "$t_enter_boot_menu"
						break
					fi
					if [[ ! -d $base/superr_$romname/00_project_files/logs ]]; then
						mkdir -p $base/superr_$romname/00_project_files/logs
					fi
					get_devicename
					if [[ ! "$devicename" ]]; then
						banner
						echo "$redb$yellowt$t_error$normal"
						echo "$redt$t_boot_prop_warn$normal"
						echo ""
						read -p "$t_enter_boot_menu"
						break
					else
						mkdir -p "$base/tools/devices/$devicename"
						deviceloc=""
						deviceloc="$base/tools/devices/$devicename"
					fi
					mkdir $prfiles/boot
					cd $prfiles/boot
					get_sig
					get_byname
					banner
					echo "$bluet$t_boot_prep_build$normal"
					if [[ -d $romdir/META-INF ]]; then
						mv $romdir/META-INF $romdir/META-INF1
					fi
					cp -R $tools/updater/META-INF $romdir/
					cp -R $tools/updater/install $romdir/
					rm -rf $usdir/updater-script
					if [[ $chosenimg = "recovery" ]]; then
						signature2=$(echo "$signature-recovery")
						signature3=$(echo "$signature1 Recovery")
						cp $tools/updater/custom/updater-script-recovery $usdir/updater-script
					elif [[ $chosenimg = "boot" ]]; then
						signature2=$(echo "$signature-kernel")
						signature3=$(echo "$signature1 Kernel")
						if [[ -d $sysdir/etc/init.d ]]; then
							cp $tools/updater/custom/updater-script-kernel-init $usdir/updater-script
						else
							cp $tools/updater/custom/updater-script-kernel $usdir/updater-script
						fi
					fi
					part_setup
					devname1=$(echo "$devicename" | sed 's/\ /\\ /g')
					if [[ ! -f $prfiles/assert ]]; then
						cd $prfiles/boot
						cat $tools/updater/custom/assert >> assert
						cat $tools/updater/custom/abort >> assert
						sed -i "s/#DEVICENAME/$devname1/g" assert
						sed -i "s/#DEVICECHK/$devicechk/g" assert
						assertch="1"
						assert_devices
					else
						cd $prfiles
						sed -i '/#ASSERT/ r assert' $usdir/updater-script
					fi
					grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
					mv $usdir/updater-script2 $usdir/updater-script
					sed -i "s/#SIGNATURE/$signature3/g" $usdir/updater-script
					sed -i "s/#DEVICENAME/$devname1/g" $usdir/updater-script
					sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
					banner
					if [[ $chosenimg = "recovery" ]]; then
						echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
						cd $romdir
						if [[ -f $signature2.zip ]]; then
							mv $signature2.zip ${signature2}_$timestamp.zip
						fi
						$p7z a -tzip -mx5 $signature2.zip install recovery.img META-INF 2>/dev/null >> $logs/zip.log
					elif [[ $chosenimg = "boot" && -f $romdir/boot.img ]]; then
						echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
						cd $romdir
						if [[ -f $signature2.zip ]]; then
							mv $signature2.zip ${signature2}_$timestamp.zip
						fi
						if [[ -d $sysdir/etc/init.d ]]; then
							$p7z a -tzip -mx5 $signature2.zip install boot.img system/etc/init.d META-INF 2>/dev/null >> $logs/zip.log
						else
							$p7z a -tzip -mx5 $signature2.zip install boot.img META-INF 2>/dev/null >> $logs/zip.log
						fi
					else
						rm -rf $romdir/META-INF
						if [[ -d $romdir/META-INF1 ]]; then
							mv $romdir/META-INF1 $romdir/META-INF
						fi
						banner
						echo "$redb$yellowt$bold$t_missing$normal"
						echo "$redt$t_boot_no_img$normal"
						echo ""
						read -p "$t_enter_build_zip_menu"
						break
					fi
					rm -rf $romdir/META-INF
					if [[ -d $romdir/META-INF1 ]]; then
						mv $romdir/META-INF1 $romdir/META-INF
					fi
					rm -rf $prfiles/boot
					banner
					echo "$greent$signature2.zip $t_general_create $romname$normal"
					echo ""
					signzip
					read -p "$t_enter_boot_menu"
					break
				elif [[ $choice = "3" ]]; then # START Boot/Recovery Menu
					break
				fi
			done
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_boot_no_img $romname$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			return
		fi
	done
}
boot_unpack() {
	if [[ ! $bootext ]]; then
		banner
		echo "$bluet$t_boot_unpack $chosenimg2 ...$normal"
		echo ""
	fi
	if [[ -f $romdir/$chosenimg2 ]]; then
		mkdir -p $romdir/${chosenimg}img
		cd $AIK
		${usesudo}./unpackimg.$script $romdir/$chosenimg2 2>&1 >> $logs/boot.log
		if [[ $? = "1" ]]; then
			rm -rf $romdir/${chosenimg}img ramdisk split_img
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_boot_unpack_problem ${chosenimg}.img$normal"
			echo ""
			read -p "$t_enter_continue"
			if [[ ! $bootext ]]; then
				boot_tools
			fi
			bootext=""
			cd $romdir
			return
		fi
		${usesudo}mv ramdisk $romdir/${chosenimg}img/
		${usesudo}mv split_img $romdir/${chosenimg}img/
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_boot_need_img$normal"
		echo ""
		read -p "$t_enter_continue"
		if [[ ! $bootext ]]; then
			boot_tools
		fi
		bootext=""
		cd $romdir
		return
	fi
	bootext=""
	cd $romdir
}
build_custom_zip() {
	docustzip() {
		if [[ -f $signature2.zip ]]; then
			mv $signature2.zip ${signature2}_$timestamp.zip
		fi
		$p7z a -tzip -mx5 $signature2.zip install system META-INF 2>/dev/null >> $logs/zip.log
		rm -rf $romdir/META-INF
		if [[ -d $romdir/META-INF1 ]]; then
			mv $romdir/META-INF1 $romdir/META-INF
		fi
	}
	isready () {
		if [[ -d $sysdir/framework ]]; then
			isframe="1"
		fi
		if [[ -d $sysdir/app ]]; then
			isapp="1"
		fi
		if [[ -d $sysdir/lib ]]; then
			islib="1"
		fi
		if [[ -d $sysdir/priv-app ]]; then
			isprivapp="1"
		fi
		if [[ -d $sysdir/media ]]; then
			ismedia="1"
		fi
		if [[ $isframe = "1" || $isapp = "1" || $islib = "1" || $isprivapp = "1" || $ismedia = "1" ]]; then
			ready="1"
		fi
	}
	
	banner
	choice=""
	while [[ ! $choice ]]; do
		timestamp=$(date +%m-%d-%Y-%H:%M:%S)
		ready=""
		isframe=""
		isapp=""
		islib=""
		isprivapp=""
		ismedia=""
		isready
		if [[ $ready != "1" ]]; then
			banner
			echo "$redb$yellowt$bold$t_missing$normal"
			echo "$redt$t_cust_dir_info $romname"
			echo "${yellowt}system/framework, system/app, system/priv-app, system/media$normal"
			echo ""
			read -p "$t_enter_build_menu"
			return
		fi
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_title_cho_cust_zip$normal"
		echo ""
		echo "1) $t_menu_fap"
		echo "2) $t_menu_fapl"
		echo "3) $t_menu_f"
		echo "4) $t_menu_ap"
		echo "5) $t_menu_l"
		echo "6) $t_menu_m"
		echo "${yellowt}7) $t_menu_build_menu"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "7" ]]; then # START Build zip menu
			return
		elif [[ $choice = "m" ]]; then # START Main menu
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Exit
			echo ""
			echo ""
			exit
		fi
		byname=$(cat "$deviceloc/superr_byname")
		cd $prfiles
		get_sig
		banner
		echo -e "$t_cust_deldir_q"
		read -n 1 -p '' reply
		if [[ $reply != "y" ]]; then
			deldir="no"
		fi
		banner
		echo "$bluet$t_cust_meta_prep$normal"
		if [[ -d $romdir/META-INF ]]; then
			mv $romdir/META-INF $romdir/META-INF1
		fi
		cp -R $tools/updater/META-INF $romdir/META-INF
		cp -R $tools/updater/install $romdir/
		rm -rf $usdir/updater-script
		cp $tools/updater/custom/updater-script-system $usdir/updater-script
		chosenimg="boot"
		part_setup
		devname1=$(echo "$devicename" | sed 's/\ /\\ /g')
		if [[ ! -f assert ]]; then
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devname1/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			assertch="1"
			assert_devices
		else
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		if [[ $deldir = "no" ]]; then
			grep -v "delete_recursive\|Deleting" $usdir/updater-script > $usdir/updater-script2
			mv $usdir/updater-script2 $usdir/updater-script
		fi
		grep -v "#ASSERT" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devname1/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		if [[ $choice = "1" || $choice = "2" || $choice = "4" ]]; then
			cd $romdir
			find $sysdir $romdir/vendor 2>/dev/null | sed 's/^/\//' | sed "s/$romdir//g"| sort > $prfiles/all_files.txt
			cd $prfiles
			rm -rf symlinks
			cp symlinks.orig symlinks
			grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
			line=""
			grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			line=""
			grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
				if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
					grep -v "$line" symlinks > symlinks2
					mv symlinks2 symlinks
				fi
			done
			sort -u symlinks > symlinks2
			mv symlinks2 symlinks
			rm -rf appsym
			grep "/system/app/\|/system/priv-app/" symlinks | sort >> symlinks_lib
			sed -i '1iui_print(\"\");' symlinks_lib
			sed -i '1iui_print(\"Creating symlinks...\");' symlinks_lib
			sed -i '/#SYM/ r symlinks_lib' $usdir/updater-script
			rm -rf symlinks_lib
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
			if [[ -d $sysdir/app || -d $sysdir/priv-app ]]; then
				if [[ "$odexstatus" = "Deodexed" ]]; then
					banner
					read -n 1 -p "$t_zipalign_q" reply
					echo ""
					echo ""
					if [[ $reply = "y" ]]; then
						dozipalign
						cd $usdir
					fi
				fi
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_cust_no_app_priv $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		else
			cd $usdir
			grep -v "#SYM" updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		banner
		if [[ $choice = "1" ]]; then # START framework, app, priv-app
			if [[ $isframe && $isapp && $isprivapp ]]; then
				signature2=$(echo "$signature-afp")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/app system/
				mv system1/framework system/
				mv system1/priv-app system/
				docustzip
				mv system/app system1/
				mv system/framework system1/
				mv system/priv-app system1/
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_not_exist$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "2" ]]; then # START framework, app, priv-app, lib
			if [[ $isframe && $isapp && $isprivapp && $islib ]]; then
				signature2=$(echo "$signature-aflp")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				if [[ -d $sysdir/lib64 ]]; then
					grep -v "\"/system/media\"" updater-script > updater-script2
				else
					grep -v "\"/system/media\"\|\"/system/lib64\"" updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/app system/
				mv system1/framework system/
				mv system1/priv-app system/
				mv system1/lib system/
				mv system1/lib64 system/ 2>/dev/null
				docustzip
				mv system/app system1/
				mv system/framework system1/
				mv system/priv-app system1/
				mv system/lib system1/
				mv system/lib64 system1/ 2>/dev/null
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_not_exist$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "3" ]]; then # START framework
			if [[ $isframe ]]; then
				signature2=$(echo "$signature-framework")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/framework system/
				ducustzip
				mv system/framework system1/
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_frame_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "4" ]]; then # START app, priv-app
			if [[ $isapp || $isprivapp ]]; then
				signature2=$(echo "$signature-ap")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/framework\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/media\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/app system/
				mv system1/priv-app system/
				docustzip
				mv system/app system1/
				mv system/priv-app system1/
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_no_app_priv $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "5" ]]; then # START lib
			if [[ $islib ]]; then
				signature2=$(echo "$signature-lib")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				if [[ -d $sysdir/lib64 ]]; then
					grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/media\"\|\"/system/priv-app\"" updater-script > updater-script2
				else
					grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/media\"\|\"/system/priv-app\"\|\"/system/lib64\"" updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/lib system/
				mv system1/lib64 system/ 2>/dev/null
				docustzip
				mv system/lib system1/
				mv system/lib64 system1/ 2>/dev/null
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redtt_cust_lib_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "6" ]]; then # START media
			if [[ $ismedia ]]; then
				signature2=$(echo "$signature-media")
				echo "$bluet$signature2.zip $t_general_build $romname ...$normal"
				cd $usdir
				grep -v "\"/system/app\"\|\"/system/framework\"\|\"/system/lib\"\|\"/system/lib64\"\|\"/system/priv-app\"" updater-script > updater-script2
				mv updater-script2 updater-script
				cd $romdir
				mv system system1
				mkdir system
				mv system1/media system/
				docustzip
				mv system/media system1/
				rm -rf system
				mv system1 system
			else
				rm -rf $romdir/META-INF
				if [[ -d $romdir/META-INF1 ]]; then
					mv $romdir/META-INF1 $romdir/META-INF
				fi
				banner
				echo "$redb$yellowt$bold$t_missing$normal"
				echo "$redt$t_cust_media_not_exist $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		fi
		banner
		if [[ -f $signature2.zip ]]; then
			echo "$greent$signature2.zip $t_general_create $romname$normal"
			echo ""
			signzip
			read -p "$t_enter_build_menu"
		else
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_build_check_ziplog$normal"
			echo ""
			read -p "$t_enter_build_menu"
		fi
		return
	done
}
build_rom_zip() {
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	cd $romdir
	isfullrom
	if [[ ! $fullrom = "Yes" ]]; then
		banner
		echo "$redb$yellowt$bold$t_missing$normal"
		echo "$redt$t_cust_file_check $romname$normal"
		echo ""
		read -p "$t_enter_rom_tools"
		return
	fi
	if [[ "$odexstatus" = "Deodexed" ]]; then
		banner
		read -n 1 -p "$t_zipalign_q" reply
		echo ""
		echo ""
		if [[ $reply = "y" ]]; then
			dozipalign
		fi
	fi
	if [[ $(grep "ro.build.display.id" $sysdir/build.prop) ]]; then
		displayid="ro.build.display.id"
	elif [[ $(grep "ro.build.id" $sysdir/build.prop) ]]; then
		displayid="ro.build.id"
	fi
	displayid2=$(echo "$displayid" | sed 's/\./\\./g')
	bdisplay=$(grep "$displayid" $sysdir/build.prop | sed 's/\./\\./g; s:/:\\/:g; s/\,/\\,/g; s/\ /\\ /g')
	sed -i "s/$bdisplay/$displayid2=Built\.with\.SuperRs\.Kitchen/" $sysdir/build.prop
	update_project
	cd $prfiles
	get_sig
	if [[ -f $romdir/$signature.zip ]]; then
		mv $romdir/$signature.zip $romdir/${signature}_$timestamp.zip
	fi
	if [[ -f $romdir/$signature-signed.zip ]]; then
		mv $romdir/$signature-signed.zip $romdir/$signature-signed_$timestamp.zip
	fi
	cd $romdir
	permtype=$(cat $prfiles/permtype)
	cd $romdir
	if [[ $permtype = "sparse_dat" ]]; then
		if [[ ! -f $prfiles/file_contexts ]]; then
			banner
			echo "$redb$yellowt$t_error$normal"
			echo -e "$t_build_selinux_error"
			echo ""
			read -p "$t_enter_build_menu"
			build_zip
			return 1
		fi
		whatimg="system"
		findimgsize
		if [[ -s $prfiles/exdirs ]]; then
			rm -rf $prfiles/exdirsb
			for line in $(cat $prfiles/exdirs); do
				if [[ $(grep "$line.transfer" $usdir/updater-script) ]]; then
					whatimg="$line"
					findimgsize
				fi
			done
		fi
		if [[ $(grep "data.transfer" $usdir/updater-script) ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		whatimg="system"
		sparseimg=" -s"
		partimg
		partsdat
		if [[ -s $prfiles/exdirsb ]]; then
			for line in $(cat $prfiles/exdirs); do
				whatimg="$line"
				sparseimg=" -s"
				partimg
				partsdat
			done
		fi
		if [[ $(grep "data.transfer" $usdir/updater-script) ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				sparseimg=" -s"
				partimg
				partsdat
			fi
		fi
		banner
		echo "$bluet$signature.zip $t_general_build $romname ..."
		echo ""
		echo "$yellowt$t_build_patient$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			exzipfiles="install boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
		else
			exzipfiles="install boot.img META-INF supersu rootzip busybox gapps xposed magisk mod* $cusdir"
		fi
		$p7z a -tzip -mx5 $signature.zip *.new.dat *.patch.dat *.transfer.list $exzipfiles $prfiles/file_contexts 2>/dev/null >> $logs/zip.log
		rm -rf *.new.dat *.transfer.list *.patch.dat
	elif [[ $permtype = "raw_img" ]]; then
		if [[ ! -f $prfiles/file_contexts ]]; then
			banner
			echo "$redb$yellowt$t_error$normal"
			echo "$redt$t_build_need_boot_img$normal"
			echo ""
			read -p "$t_enter_build_menu"
			return
		fi
		banner
		echo "$bluet$t_build_prep_img$normal"
		whatimg="system"
		findimgsize
		if [[ -s $prfiles/exdirs ]]; then
			rm -rf $prfiles/exdirsb
			for line in $(cat $prfiles/exdirs); do
				if [[ $(grep "\"/$line\"" $usdir/updater-script) ]]; then
					whatimg="$line"
					findimgsize
				fi
			done
		fi
		if [[ $(grep "data.transfer" $usdir/updater-script) ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				findimgsize
			fi
		fi
		whatimg="system"
		partimg
		if [[ -s $prfiles/exdirsb ]]; then
			for line in $(cat $prfiles/exdirs); do
				whatimg="$line"
				partimg
			done
		fi
		if [[ $(grep "data.transfer" $usdir/updater-script) ]]; then
			if [[ ! -f $prfiles/data-set_metadata ]]; then
				whatimg="data"
				partimg
			fi
		fi
		banner
		echo "$bluet$signature.zip $t_general_build $romname ...$normal"
		echo ""
		echo "$yellowt$t_build_patient$normal"
		echo ""
		if [[ -f $prfiles/data-set_metadata ]]; then
			exzipfiles="boot.img META-INF install supersu rootzip busybox gapps xposed magisk mod* data $cusdir"
		else
			exzipfiles="boot.img META-INF install supersu rootzip busybox gapps xposed magisk mod* $cusdir"
		fi
		$p7z a -tzip -mx5 $signature.zip *_new.img $exzipfiles 2>/dev/null >> $logs/zip.log
		rm -rf *_new.img
	else
		banner
		echo "$bluet$signature.zip $t_general_build $romname ...$normal"
		exzipfiles="boot.img META-INF install system supersu rootzip busybox gapps xposed magisk data $cusdir $(cat $prfiles/exdirs 2>/dev/null| tr '\n', ' ') "
		$p7z a -tzip -mx5 $signature.zip $exzipfiles mod* 2>/dev/null >> $logs/zip.log
	fi
	banner
	if [[ -f $signature.zip ]]; then
		echo "$greent$signature.zip $t_general_create $romname$normal"
		echo ""
		signature2="$signature"
		signzip
		read -p "$t_enter_rom_tools"
	else
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_build_check_ziplog$normal"
		echo ""
		read -p "$t_enter_rom_tools"
	fi
	rom_tools
}
build_zip() {
	choice=""
	while [[ ! $choice ]]; do
		if [[ $main = "1" ]]; then
			return
		fi
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_build_menu$normal"
		echo ""
		echo "1) $t_menu_build_zip"
		echo "2) $t_menu_sys_img"
		echo "3) $t_menu_sign"
		echo "${yellowt}4) $t_menu_custom_zip"
		echo "5) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then # START Build ROM Zip
			build_rom_zip
			choice=""
			continue
		elif [[ $choice = "2" ]]; then # START Build system.img
			banner
			echo "$bluet$t_build_prep_sys_img$normal"
			if [[ ! -f $prfiles/file_contexts ]]; then
				get_contexts
			fi
			whatimg="system"
			findimgsize
			choice2=""
			while [[ ! $choice2 ]]; do
				banner
				echo "$yellowb$redt$t_img_sparse_q$normal"
				echo ""
				echo "1) raw"
				echo "2) sparse"
				echo "${yellowt}b = $t_menu_back$normal"
				echo ""
				read -n 1 -p "$t_select" choice2

				if [[ ! $choice2 =~ ^[1-2]$ ]] && [[ ! $choice2 = "b" ]]; then
					choice2=""
					continue
				elif [[ $choice2 = "b" ]]; then
					break
				elif [[ $choice2 = "2" ]]; then
					sparseimg=" -s"
				fi
				whatimg="system"
				partimg
				if [[ -f system_new.img && ! -f system.img ]]; then
					mv system_new.img system.img
					imgname="system.img"
				elif [[ ! -f system_new.img ]]; then
					banner
					echo "$redt$t_build_img_error$normal"
					echo ""
					read -p "$t_enter_build_menu"
					break
				else
					imgname="system_new.img"
				fi
				banner
				echo "$greent$imgname $t_general_create $romname$normal"
				echo ""
				read -p "$t_enter_build_menu"
			done
			choice=""
			continue
		elif [[ $choice = "3" ]]; then # START Sign Existing zip
			cd $romdir
			countzip=$(ls | grep ".zip" | wc -l)
			if [[ $(echo "$countzip") = "1" ]]; then
				signzipname=$(ls | grep ".zip" | rev | cut -d"." -f2- | rev)
			elif [[ $(echo "$countzip") = "0" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_build_no_zip$normal"
				echo ""
				read -p "$t_enter_build_menu"
				choice=""
				continue
			else
				while [[ ! $signzipname ]]; do
					banner
					echo "$greenb$t_build_cho_zip$normal"
					echo ""
					findzip=""
					findzip=( $(ls | grep ".zip") )
					prchoice="ext"
					choosepr project in ${findzip[@]}
					if [[ $REPLY = "q" ]]; then
						exit
					elif [[ $REPLY = "m" ]]; then
						cd $base
						main="1"
						return
					else
						signzipname=$(echo "$project" | rev | cut -d"." -f2- | rev)
					fi
				done
			fi
			banner
			signext="1"
			signzip
			choice=""
			continue
		elif [[ $choice = "4" ]]; then # START Custom zip menu
			build_custom_zip
			choice=""
			continue
		elif [[ $choice = "5" ]]; then # START ROM Tools menu
			return
		elif [[ $choice = "m" ]]; then # START Main Menu
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Quit
			echo ""
			echo ""
			exit
		fi
	done
}
change_permtype() {
	main="0"
	choice=""
	while [[ ! $choice ]]; do
		if [[ ! $permtype ]]; then
			if [[ -f $prfiles/permtype ]]; then
				permtype=$(cat $prfiles/permtype)
			fi
		fi
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_perm_title$normal"
		echo ""
		if [[ $permtype = "set_metadata" ]]; then
			echo "1) $t_perm_set_metadata_cur ($bluet$t_current$normal)"
		else
			if [[ ! $api -ge "19" ]]; then
				echo "${redt}1) $t_perm_set_metadata$normal"
			else
				echo "1) $t_perm_set_metadata"
			fi
		fi
		if [[ $permtype = "set_perm" ]]; then
			echo "2) $t_perm_set_perm ($bluet$t_current$normal)"
		else
			echo "2) $t_perm_set_perm"
		fi
		if [[ $permtype = "sparse_dat" ]]; then
			echo "3) $t_perm_sparse ($bluet$t_current$normal)"
		else
			if [[ $api -ge "21" && ! -f $romdir/system/init.rc ]]; then
				echo "3) $t_perm_sparse"
			else
				echo "${redt}3) $t_perm_sparse_red$normal"
			fi
		fi
		if [[ $permtype = "raw_img" ]]; then
			echo "4) $t_perm_raw_img ($bluet$t_current$normal)"
		else
			echo "4) $t_perm_raw_img"
		fi
		echo "${yellowt}5) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "m" ]]; then # START Main menu chosen
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Quit chosen
			echo ""
			echo ""
			exit
		elif [[ $choice = "5" ]]; then # START ROM Tools menu chosen
			return
		fi
		banner
		echo "$bluet$t_perm_check_symlinks$normal"
		if [[ ! -f $prfiles/symlinks && $(grep ^symlink $usdir/updater-script 2>/dev/null) ]]; then
			cd $usdir
			get_symlinks
		elif [[ ! -f $prfiles/symlinks && $(find $sysdir $romdir/vendor -type l 2>/dev/null) ]]; then
			cd $romdir
			link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
			link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
			paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
			cp $prfiles/symlinks $prfiles/symlinks.orig
			if [[ -d vendor ]]; then
				find system vendor -type l -exec rm -f {} \;
			else
				find system -type l -exec rm -f {} \;
			fi
		elif [[ ! -f $prfiles/symlinks ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_perm_no_symlinks$normal"
			echo ""
			read -p "$t_enter_rom_tools"
			return
		fi
		banner
		if [[ $choice = "1" ]]; then # set_metadata chosen
			if [[ ! $api -ge "19" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_perm_set_metadata_error$normal"
				echo ""
				read -p "$t_enter_change_perm_menu"
				choice=""
				continue
			fi
			echo "$bluet$t_perm_changing_perm$normal"
			if [[ ! -d $romdir/META-INF ]]; then
				permtype="set_metadata"
				echo "set_metadata" > $prfiles/permtype
				cp -R $tools/updater/META-INF $romdir/
				cp -R $tools/updater/install $romdir/
			fi
			if [[ -s $prfiles/$permtype ]]; then
				cd $usdir
				permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
				if [[ $permtest ]]; then
					grep -v "$permtest" updater-script > updater-script2
					mv updater-script2 updater-script
				fi
			fi
			if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
				cd $romdir
				rm -rf install META-INF config install
				cd $prfiles
				rm -rf permtype set_metadata set_perm exdone
				cp -R $tools/updater/META-INF $romdir
				cp -R $tools/updater/install $romdir/
			fi
			permtype="set_metadata"
			if [[ -f $prfiles/permtype ]]; then
				mv $prfiles/permtype $prfiles/permtype_old
			fi
			echo "$permtype" > $prfiles/permtype
		elif [[ $choice = "2" ]]; then # set_perm chosen
			echo "$bluet$t_perm_changing_perm$normal"
			if [[ ! -d $romdir/META-INF ]]; then
				permtype="set_perm"
				echo "set_perm" > $prfiles/permtype
				cp -R $tools/updater/META-INF $romdir
				cp -R $tools/updater/install $romdir/
			fi
			if [[ -s $prfiles/$permtype ]]; then
				cd $usdir
				permtest=$(gawk '/#PERM/,/set_progress/' updater-script | grep $permtype)
				if [[ $permtest ]]; then
					grep -v "$permtest" updater-script > updater-script2
					mv updater-script2 updater-script
				fi
			fi
			if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
				cd $romdir
				rm -rf install META-INF config
				cd $prfiles
				rm -rf permtype set_metadata set_perm exdone
				cp -R $tools/updater/META-INF $romdir
				cp -R $tools/updater/install $romdir/
			fi
			permtype="set_perm"
			if [[ -f $prfiles/permtype ]]; then
				mv $prfiles/permtype $prfiles/permtype_old
			fi
			echo "$permtype" > $prfiles/permtype
		elif [[ $choice = "3" ]]; then # Sparse dat chosen
			if [[ $api -lt "21" || -f $romdir/system/init.rc ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_perm_sparse_error$normal"
				echo ""
				read -p "$t_enter_change_perm_menu"
				choice=""
				continue
			fi
			echo "$bluet$t_perm_changing_perm$normal"
			rm -rf $romdir/META-INF $romdir/config $romdir/install
			cp -R $tools/updater/META-INF-DAT/META-INF $romdir/
			cp -R $tools/updater/install $romdir/
			cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
			cd $prfiles
			rm -rf permtype set_metadata set_perm exdone
			permtype="sparse_dat"
			if [[ -f $prfiles/permtype ]]; then
				mv $prfiles/permtype $prfiles/permtype_old
			fi
			echo "$permtype" > $prfiles/permtype
		elif [[ $choice = "4" ]]; then # raw_img chosen
			echo "$bluet$t_perm_changing_perm$normal"
			rm -rf $romdir/META-INF $romdir/install $romdir/config
			cp -R $tools/updater/META-INF-IMG/META-INF $romdir/
			cp -R $tools/updater/install $romdir/
			cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
			cd $prfiles
			rm -rf permtype set_metadata set_perm exdone
			permtype="raw_img"
			if [[ -f $prfiles/permtype ]]; then
				mv $prfiles/permtype $prfiles/permtype_old
			fi
			echo "$permtype" > $prfiles/permtype
		fi
		update_project
		if [[ -f $prfiles/root && ! -f $prfiles/root_existing ]]; then
			if [[ -f $sysdir/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu || -d $romdir/rootzip ]]; then
				rootrem
				root
			else
				rm -rf $prfiles/root
			fi
			if [[ -f $prfiles/busybox ]]; then
				root_busyboxrem
				root_busybox
			fi
		fi
		if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
			data_apprem
			data_app
		fi
		return
	done
}
chkstat() {
	while [[ $(grep 'Kitchen/\" $sysdir' $tools/source/superr) && ! $(grep 'Kitchen/\" $sysdir' $tools/source/superr | grep "#") ]]; do
		sleep 5
	done
	killall superr 2>&1 >/dev/null
}
choosepr() {
	local v e
	declare -i i=1
	v=$1
	shift 2
	for e in "$@"; do
		echo "$i) $e"
		i=i+1
	done
	if [[ $prchoice = "del" || $prchoice = "ext" ]]; then
		echo "${yellowt}m = $t_title_main"
	elif [[ $prchoice = "first" ]]; then
		echo "${yellowt}n = $t_menu_new$normal"
	elif [[ $prchoice = "plug" ]]; then
		echo "${yellowt}b = $t_menu_back$normal"
	fi
	echo "${magentat}q = $t_menu_quit$normal"
	echo ""
	if [[ "$#" -gt "9" ]]; then
		read -p "$t_select_enter" REPLY
	else
		read -n 1 -p "$t_select" REPLY
	fi
	i="$REPLY"
	if [[ $i -gt 0 && $i -le $# ]]; then
		export $v="${!i}"
	else
		export $v=""
	fi
	prchoice=""
}
data_app() {
	whatimg="data"
	partadd
	mkdir -p $romdir/data/app
}
data_apprem() {
	cd $usdir
	grep -v "\"\/data\"\|\"\/data\/app\"\|Extracting data\|#DATA\|data.transfer\|data_new.img\|#DATA" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -f $prfiles/data-*
}
debinstall() {
	debbased=$(which dpkg)
	if [[ $debbased ]]; then
		read -n 1 -p "$t_dep_install_q" reply
		if [[ $reply = "y" ]]; then
			banner
			echo "$bluet$t_dep_install$normal"
			echo ""
			universe=$(grep ^deb /etc/apt/sources.list 2>/dev/null | grep "universe")
			multiverse=$(grep ^deb /etc/apt/sources.list 2>/dev/null | grep "multiverse")
			if [[ ! $universe || ! $multiverse ]]; then
				${usesudo2}add-apt-repository universe >/dev/null
				${usesudo2}add-apt-repository multiverse >/dev/null
			fi
			${usesudo2}apt-get -qq update
			${usesudo2}apt-get -qq -y install $debpkg
			rm -rf depinstall
			debpkg=""
			cd $base
			banner
			echo "${redt}$t_restart$normal"
			echo ""
			read -p "$t_enter_exit"
			exit
		fi
	fi
	echo ""
	echo ""
	read -p "$t_enter_exit"
	rm -rf depinstall
	debpkg=""
	exit
}
debloat_rom() {
	choice=""
	while [[ ! $choice ]]; do
		if [[ ! -d $prfiles ]]; then
			mkdir -p $prfiles
		fi
		banner
		echo "$bluet$t_bloat_status$normal"
		debloatstatus=""
		debloatstatus1=""
		debloatcustomstatus=""
		debloatcustomstatus1=""
		knoxstatus=""
		knoxstatus1=""
		isdebloatstatus
		isdebloatcustomstatus
		isknoxstatus

		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_rom_debloat$normal"
		echo ""
		echo "1) $t_menu_debloat ($bluet$t_title_current$normal $debloatstatus1)"
		if [[ ! -s $tools/root/bloat_custom ]]; then
			echo "2) $t_menu_debloat_cust ($debloatcustomstatus1)"
		else
			echo "2) $t_menu_debloat_cust ($bluet$t_title_current$normal $debloatcustomstatus1)"
		fi
		echo "3) $t_menu_debloat_knox ($bluet$t_title_current$normal $knoxstatus1)"
		echo "4) $t_menu_debloat_restore"
		echo "5) $t_menu_debloat_refresh"
		echo "${yellowt}6) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-6]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then # START Debloat ROM
			if [[ $debloatstatus = "$t_debloated" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_already_debloated$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			fi
			banner
			read -n 1 -p "$t_bloat_q"
			echo ""
			echo ""
			if [[ ! $REPLY = "y" ]]; then
				choice=""
				continue
			fi
			banner
			echo "$bluet$t_bloat_rem$normal"
			debloat=""
			cat $prfiles/debloat_list | while read debloat; do
				debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
				mkdir -p $prfiles/debloated_files/$debloatdir
				mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
			done
			cd $prfiles
			rm -rf debloat_list
			rm -rf debloat_custom
			rm -rf debloat_knox
			isdebloatstatus
			banner
			echo "$greent$t_bloat_moved"
			echo "$yellowt$prfiles/debloated_files$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			choice=""
			continue
		elif [[ $choice = "2" ]]; then # START Custom Debloat
			if [[ ! -s $tools/root/bloat_custom ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_cust_info"
				echo ""
				echo "$yellowt$tools/root/bloat_custom$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			fi
			if [[ $debloatcustomstatus = "$t_debloated" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_already_debloated$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			fi
			banner
			read -n 1 -p "$t_bloat_q"
			echo ""
			echo ""
			if [[ ! $REPLY = "y" ]]; then
				choice=""
				continue
			fi
			banner
			echo "$bluet$t_bloat_rem$normal"
			debloat=""
			cat $prfiles/debloat_custom | while read debloat; do
				debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
				mkdir -p $prfiles/debloated_files/$debloatdir
				mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
			done
			cd $prfiles
			rm -rf debloat_list
			rm -rf debloat_custom
			rm -rf debloat_knox
			isdebloatcustomstatus
			banner
			echo "$greent$t_bloat_moved"
			echo "$yellowt$prfiles/debloated_files$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			choice=""
			continue
		elif [[ $choice = "3" ]]; then # START Remove Samsung Knox
			if [[ $knoxstatus = "No" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_knox_not_exist$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			fi
			banner
			read -n 1 -p "$t_bloat_knoz_rem_q"
			echo ""
			echo ""
			if [[ ! $REPLY = "y" ]]; then
				choice=""
				continue
			fi
			banner
			echo "$bluet$t_bloat_knox_rem$normal"
			debloat=""
			cat $prfiles/debloat_knox | while read debloat; do
				debloatdir=$(echo $debloat | rev | cut -d"/" -f2- | rev)
				mkdir -p $prfiles/debloated_files/$debloatdir
				mv $romdir/$debloat $prfiles/debloated_files/$debloatdir
			done
			cd $prfiles
			rm -rf debloat_list
			rm -rf debloat_custom
			rm -rf debloat_knox
			isknoxstatus
			banner
			echo "$greent$t_bloat_knox_moved"
			echo "$yellowt$prfiles/debloated_files$normal"
			echo ""
			read -p "$t_enter_debloat_menu"
			choice=""
			continue
		elif [[ $choice = "4" ]]; then # START Restore Bloat/Knox
			if [[ -d $prfiles/debloated_files ]]; then
				if [[ ! -d $prfiles/debloated_files ]]; then
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_bloat_no_files_restore$normal"
					echo ""
					read -p "$t_enter_debloat_menu"
					choice=""
					continue
				fi
				banner
				read -n 1 -p "$t_bloat_restore_q"
				echo ""
				echo ""
				if [[ ! $REPLY = "y" ]]; then
					choice=""
					continue
				fi
				banner
				echo "$bluet$t_bloat_restore$normal"
				cd $prfiles/debloated_files
				line=""
				find . -type d | sed 's/^.\///' | while read line; do
					mkdir -p $romdir/$line
				done
				line=""
				find . -type f | sed 's/^.\///' | while read line; do
					mv $line $romdir/$line
				done
				cd $prfiles
				rm -rf debloated_files
				rm -rf debloat_list
				rm -rf debloat_custom
				rm -rf debloat_knox
				isdebloatstatus
				banner
				echo "$greent$t_bloat_has_restored$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_bloat_no_restore$normal"
				echo ""
				read -p "$t_enter_debloat_menu"
				choice=""
				continue
			fi
		elif [[ $choice = "5" ]]; then # START Refresh Bloat Status
			rm -rf $prfiles/debloat_list
			rm -rf $prfiles/debloat_custom
			rm -rf $prfiles/debloat_knox
			choice=""
			continue
		elif [[ $choice = "6" ]]; then # START ROM Tools Menu
			return
		elif [[ $choice = "m" ]]; then # START Main Menu
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Exit
			echo ""
			echo ""
			exit
		fi
	done
}
delete_project() {
	cd $base
	if [[ ! $(ls -d */ | grep 'superr_') ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_delete_no_project$normal"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		return
	fi
	while [[ ! $delrom ]]; do
		banner
		echo "$redb$yellowt$bold$t_title_delete$normal"
		echo ""
		findproject=""
		findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//' | sed 's/\///') )
		prchoice="del"
		choosepr delproject in ${findproject[@]}
		if [[ $REPLY = "m" ]]; then
			cd $base
			return
		elif [[ $REPLY = "q" ]]; then
			exit
		else
			delrom="$delproject"
		fi
	done
	banner
	echo "$yellowt$base/superr_$delrom$normal"
	echo ""
	REPLY=""
	read -n 1 -p "$t_delete_q"
	if [[ $REPLY = "y" ]]; then
		if [[ -f $base/superr_$delrom/system/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/system/build.prop | cut -d"=" -f2)
		elif [[ -f $base/superr_$delrom/build.prop ]]; then
			delapi=$(grep "ro.build.version.sdk" $base/superr_$delrom/build.prop | cut -d"=" -f2)
		fi
		if [[ $delapi -ge "23" ]] && [[ -d superr_$delrom/bootimg || -d superr_$delrom/recoveryimg ]]; then
			echo ""
			echo ""
			${usesudo2}rm -rf superr_$delrom
		else
			rm -rf superr_$delrom
		fi
		delapi=""
	else
		cd $base
		return
	fi
	banner
	echo "$yellowt$base/superr_$delrom $greent$t_delete_has_been$normal"
	echo ""
	if [[ "superr_$delrom" = "superr_$romname" ]]; then
		romname=""
	fi
	read -p "$t_enter_main_menu"
	echo ""
	cd $base
	return
}
deodex_start() {
	cd $romdir
	exit_deo() {
		echo ""
		read -p "$t_enter_rom_tools"
		return
	}
	delete_meta_inf() {
		banner
		echo "$yellowb$redt$t_notice$normal"
		echo -e "$t_deodex_del_meta_inf_q"
		read -n 1 -p "" reply
		if [[ ! $reply = "y" ]]; then
			return
		fi
		banner
		echo "$bluet$t_deodex_del_meta_inf$normal"
		find system -name *.apk 2>/dev/null | grep -v "system\/framework\/" | while read line; do
			$aapt remove "$line" META-INF/CERT.RSA META-INF/CERT.SF META-INF/MANIFEST.MF
		done
	}
	choose_jartitle() {
		thecho=""
		countbak=$(find $tools/smali/current -name $jarname*.jar | wc -l)
		if [[ $countbak = "1" ]]; then
			thecho=$(find $tools/smali/current -name $jarname*.jar)
		elif [[ $countbak -gt "1" ]]; then
			while [[ ! $thecho ]]; do
				banner
				echo "$greenb$jartitle$normal"
				echo ""
				findbak=$(find $tools/smali/current -name $jarname*.jar | rev | cut -d"/" -f1 | rev | sort)
				choosepr bakcho in ${findbak[@]}
				if [[ $REPLY = "q" ]]; then
					exit
				else
					thecho="$tools/smali/current/$bakcho"
				fi
			done
		fi
	}
	choose_oat2dex() {
		choice=""
		while [[ ! $choice ]]; do
			banner
			echo "$t_deodex_oat2dex_ver"
			echo ""
			echo "1) $t_deodex_oat2dex_official"
			echo "2) $t_deodex_oat2dex_latest"
			echo ""
			read -n 1 -p "$t_select" choice

			if [[ ! ${choice} =~ ^[1-2]$ ]]; then
				choice=""
				continue
			elif [[ $choice = "1" ]]; then
				oat2dex=$(find $tools/smali/old -name *oat2dex*)
			elif [[ $choice = "2" ]]; then
				jarname="oat2dex"
				jartitle="$t_title_cho_oat2dex"
				choose_jartitle
				oat2dex="$thecho"
			fi
		done
	}
	rm -rf $logs/extraodex.txt
	if [[ ! -d "$framedir" || ! -f $sysdir/build.prop ]]; then
		banner
		echo "$redb$yellowt$bold$t_missing$normal"
		echo -e "$redt$t_deodex_copy_frame_prop $yellowt$romname/system$normal"
		exit_deo
	fi
	if [[ ! "$odexstatus" = "Odexed" ]]; then
		banner
		echo "$redt$t_deodex_no_odex$normal"
		exit_deo
	fi
	if [[ $api -ge 21 && ! $(find $framedir -name boot.oat) ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_boot_oat$normal"
		exit_deo
	fi
	banner
	echo "$yellowb$redt$t_notice$normal"
	echo -e "$bluet$t_deodex_disclaimer$normal"
	echo ""
	reply=""
	read -n 1 -p "$t_deodex_try_anyway" reply
	if [[ ! $reply = "y" ]]; then
		return
	fi
	if [[ -f $sysdir/odex.sqsh ]]; then
		sqshfile="odex.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex1.sqsh ]]; then
			sqshfile="odex1.sqsh"
			deodex_sqsh
			if [[ -f $sysdir/odex2.sqsh ]]; then
				sqshfile="odex2.sqsh"
				deodex_sqsh
			fi
		fi
	elif [[ -f $sysdir/odex.app.sqsh ]]; then
		sqshfile="odex.app.sqsh"
		deodex_sqsh
		if [[ -f $sysdir/odex.priv-app.sqsh ]]; then
			sqshfile="odex.priv-app.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/odex.framework.sqsh ]]; then
			sqshfile="odex.framework.sqsh"
			deodex_sqsh
		fi
		if [[ -f $sysdir/etc/product/orig.applications.sqsh ]]; then
			sqshfile="orig.applications.sqsh"
			deodex_sqsh
		fi
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $usdir/updater-script > $usdir/updater-script2
		mv $usdir/updater-script2 $usdir/updater-script
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		grep -v "odex.app\|odex.priv-app\|odex.framework\|orig.applications" $prfiles/symlinks.orig > $prfiles/symlinks.orig2
		mv $prfiles/symlinks.orig2 $prfiles/symlinks.orig
	fi
	get_heapsize
	if [[ $api -lt 21 ]]; then
		smali=$(find $tools/smali/old -name *smali* | grep -v "baksmali")
		baksmali=$(find $tools/smali/old -name *baksmali*)
		deodex_old
		return
	elif [[ $api -eq 21 || $api -eq 22 ]]; then
		choose_oat2dex
		dtype="l"
		deodex
		return
	elif [[ $api -eq 23 && ! $androidversion = "N" ]]; then
		choice=""
		while [[ ! $choice ]]; do
			banner
			echo "$t_deodex_use_method"
			echo ""
			echo "1) oat2dex"
			echo "2) smali/baksmali"
			echo ""
			read -n 1 -p "$t_select" choice

			if [[ ! ${choice} =~ ^[1-3]$ ]]; then
				choice=""
				continue
			elif [[ $choice = "1" ]]; then # START M oat2dex
				choose_oat2dex
				dtype="m"
				deodex
			elif [[ $choice = "2" ]]; then # START M smali/baksmali
				jarname="smali"
				jartitle="$t_title_cho_smali"
				choose_jartitle
				smali="$thecho"

				jarname="baksmali"
				jartitle="$t_title_cho_baksmali"
				choose_jartitle
				baksmali="$thecho"
				dtype="m2"
				deodex
			fi
		done
		return
	elif [[ $api -eq 23 || $api -eq 24 || $api -eq 25 ]] && [[ $androidversion != "O" ]]; then
		jarname="smali"
		jartitle="$t_title_cho_smali"
		choose_jartitle
		smali="$thecho"

		jarname="baksmali"
		jartitle="$t_title_cho_baksmali"
		choose_jartitle
		baksmali="$thecho"
		dtype="n2"
		deodex
	elif [[ $api -ge 25 ]]; then
		dtype="o"
		deodex
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_deodex_no_api$normal"
		echo ""
		exit_deo
	fi
}
deodex() {
	arch=""
	arch2=""
	while read i; do
		if [[ -d "$framedir/$i" ]]; then
			archtest="$i"
			break
		fi
	done <<< "$(echo -e "arm64\nx86_64\narm\nx86")"
	if [[ $(echo "$archtest" | grep "64") ]]; then
		arch2test=$(echo "$archtest" | sed 's/_64//; s/64$//')
	fi
	if [[ $archtest && -f $framedir/$archtest/boot.oat ]]; then
		arch="$archtest"
		if [[ $arch2test && -f $framedir/$arch2test/boot.oat ]]; then
			arch2="$arch2test"
		fi
	else
		while [[ ! -f $framedir/$arch/boot.oat ]]; do
			banner
			echo -e "$t_deodex_config_arch"
			echo ""
			read arch
		done
	fi
	if [[ -f $framedir/$arch/boot.oat ]]; then
		banner
		echo "$bluet$t_startup_project $greent$romname"
		echo "$bluet$t_startup_version $greent$androidversion"
		echo "$bluet$t_deodex_api$greent$api"
		echo "$bluet$t_deodex_arch$greent$arch$normal"
		if [[ $arch2 ]]; then
			echo "$bluet$t_deodex_arch2$greent$arch2$normal"
		fi
		if [[ $dtype = "m2" || $dtype = "n2" ]]; then
			echo -e "$bluet$t_deodex_method${greent}\t$(basename $smali)"
			echo -e "\t$(basename $baksmali)$normal"
		elif [[ $dtype = "l" || $dtype = "m" ]]; then
			echo -e "$bluet$t_deodex_method${greent}\t$(basename $oat2dex)$normal"
		elif [[ $dtype = "o" ]]; then
			echo -e "$bluet$t_deodex_method${greent}\t$(basename $vdexext)$normal"
		fi
		echo ""
		read -n 1 -p "$t_deodex_continue_q" reply
		if [[ $reply != "y" ]]; then
			return
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo "$redt$t_error_mess$normal"
		exit_deo
	fi
	dodeodex() {
		app=""
		for app in $(echo "$applist"); do
			cd "$deoappdir/$app"
			app2=$(ls | grep \.apk$ | head -n 1 | sed 's/\.apk$//')
			if [[ ! -d $deoarch || ! -f $app2.apk ]]; then
				continue
			fi
			if [[ ! $($p7z l $app2.apk | grep classes.dex) ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				if [[ $dtype = "m2" || $dtype = "n2" ]]; then
					classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoarch/$app2.odex 2>&1)
					echo "$classes" >> $logs/deodex.log
					echo "$classes" | while read line; do
						apkdex=$(basename $(echo "$line"))
						if [[ ! $(echo "$apkdex" | grep classes) ]]; then
							dexclass="classes.dex"
						else
							dexclass=$(echo "$apkdex" | cut -d":" -f2-)
						fi
						java -Xmx${heapsize}m -jar $baksmali deodex -b $framedir/$deoarch2/boot.oat $deoarch/$app2.odex/$apkdex -o $deoarch/smali >> $logs/deodex.log
						java -Xmx${heapsize}m -jar $smali assemble -a $api $deoarch/smali -o $deoarch/$dexclass >> $logs/deodex.log
						rm -rf $deoarch/smali
						if [[ ! -f $deoarch/$dexclass ]]; then
							echo "${deoappdir/$romdir/}/$app/$deoarch/$dexclass" >> $logs/deodex_fail_list
							continue
						fi
					done
				elif [[ $dtype = "m" || $dtype = "l" ]]; then
					java -Xmx${heapsize}m -jar $oat2dex $deoarch/$app2.odex $framedir/$deoarch2/odex >> $logs/deodex.log
					if [[ ! -f $deoarch/$app2.dex ]]; then
						rm -rf $deoarch/$app2-classes*.dex
						continue
					fi
					mv $deoarch/$app2.dex $deoarch/classes.dex
					find $deoarch -name $app2-classes*.dex | while read line; do
						appclassdex=$(basename $line)
						appclassdir=$(dirname $line)
						classname=$(echo "$appclassdex" | cut -d"-" -f2)
						mv $line $appclassdir/$classname
					done
				elif [[ $dtype = "o" ]]; then
					cd $deoarch
					$vdexext -i $app2.vdex >> $logs/deodex.log
					if [[ ! -f $app2.apk_classes.dex ]]; then
						$vdexext -i $app2.vdex --ignore-crc-error >> $logs/deodex.log
						if [[ ! -f $app2.apk_classes.dex ]]; then
							echo "${deoappdir/$romdir/}/$app/$app2.apk" >> $logs/deodex_fail_list
							rm -rf $app2.apk_classes*
							continue
						else
							echo "${deoappdir/$romdir/}/$app/$app2.apk" >> $logs/deodex_crc_ignored
						fi
					fi
					
					ls | grep ".apk_classes" | while read i; do
						mv "$i" "$(echo ${i##*_})"
					done
					cd $deoappdir/$app
				fi
				($aapt add -fk "$app2.apk" "$deoarch"/classes*.dex 2>&1) >> $logs/zip.log
				if [[ $dtype = "l" ]]; then
					rm -rf $deoarch
				else
					rm -rf oat
				fi
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				if [[ $dtype != "l" ]]; then
					rm -rf $deoappdir/$app/oat
				else
					rm -rf $deoappdir/$app/$deoarch
				fi
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_$dtype
	rm -rf $logs/*.log $logs/deodex_fail_list
	if [[ $(find $appdir $privdir $framedir -name *odex.* 2>/dev/null | grep ".gz\|.xz") ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_extract_txt"
		echo "----------------------------------------------------"
		echo ""
		find $appdir $privdir $framedir -name *odex.gz 2>/dev/null | while read line; do
			gzdir=$(dirname $line)
			gzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $gzfile"
			echo ""
			$p7z e -o$gzdir $line 2>/dev/null >> $logs/zip.log
		done
		find $appdir $privdir $framedir -name *odex.xz 2>/dev/null | while read line; do
			xzdir=$(dirname $line)
			xzfile=$(basename $line)
			echo ""
			echo "$t_deodex_extract $xzfile"
			echo ""
			$p7z e -o$xzdir $line 2>/dev/null >> $logs/zip.log
		done
	fi
	if [[ $dtype != "l" ]]; then
		if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
			odextmp=$(find system vendor -name *.odex 2>/dev/null | grep -v "system/system/framework/oat/\|system/system/framework/$arch/\|system/system/framework/$arch2/\|^system/system/app/\|^system/system/priv-app/\|system/system/vendor/framework" | rev | cut -d"/" -f4- | rev | sort -u)
		else
			odextmp=$(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/oat/\|system/framework/$arch/\|system/framework/$arch2/\|^system/app/\|^system/priv-app/\|system/vendor/framework" | rev | cut -d"/" -f4- | rev | sort -u)
		fi
	else
		odextmp=$(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework/$arch/\|system/framework/$arch2/\|^system/app/\|^system/priv-app/" | rev | cut -d"/" -f3- | rev | sort -u)
	fi
	if [[ -d $sysdir/app && $odextmp ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		extraapp=""
		line=""
		for line in $odextmp; do
			if [[ $(basename "$line" | grep "^\.") ]]; then
				newapp=$(ls $line | grep .apk | cut -d"." -f1)
				newappdir=$(echo "$line" | rev | cut -d"/" -f2- | rev)/$newapp
				mv $line $newappdir
				echo "$romdir/$newappdir $romdir/$line" >> $logs/extramv.txt
				line2=$(echo $line | sed 's:\/:\\/:g')
				newappdir2=$(echo $newappdir | sed 's:\/:\\/:g')
				line="$newappdir"
				extraapp=$(basename $line)
			else
				extraapp=$(basename $line)
				echo "$sysdir/app/$extraapp $romdir/$line" >> $logs/extramv.txt
			fi
			mv $romdir/$line $sysdir/app/$extraapp
		done
	fi
	chimerao=$(find $sysdir/priv-app/PrebuiltGmsCore/app_chimera -name *.odex 2>/dev/null | grep "$arch")
	chimerav=$(find $sysdir/priv-app/PrebuiltGmsCore/app_chimera -name *.vdex 2>/dev/null | grep "$arch")
	if [[ $chimerao ]]; then
		for i in $(echo "$chimerao"); do
			aname=$(basename $i | sed 's/\.odex//')
			dname=$(echo "$i" | rev | cut -d"/" -f4)
			mkdir -p $sysdir/app/$aname/oat/$arch
			mv $i $sysdir/app/$aname/oat/$arch/
			if [[ $chimerav ]]; then
				if [[ -f $(echo "$i" | sed 's/\.odex$/\.vdex/') ]]; then
					mv $(echo "$i" | sed 's/\.odex$/\.vdex/') $sysdir/app/$aname/oat/$arch/
				fi
			fi
			mv $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/$aname.apk $sysdir/app/$aname/
			echo "$sysdir/app/$aname/$aname.apk $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/" >> $logs/extramv.txt
		done
		rm -rf $sysdir/priv-app/PrebuiltGmsCore/app_chimera/$dname/oat
	fi
	if [[ -d "$sysdir/vendor/framework" ]]; then
		vframe=$(find $sysdir/vendor/framework -name *.jar 2>/dev/null)
		for i in $vframe; do
			nframe=$(basename $i | sed 's/\.jar$//')
			dframe=$(dirname $i)
			flip=""
			if [[ -f $dframe/oat/$arch/$nframe.odex ]]; then
				mv $dframe/oat/$arch/$nframe.odex $framedir/oat/$arch/
				flip="1"
			fi				
			if [[ -f $dframe/oat/$arch/$nframe.vdex ]]; then
				mv $dframe/oat/$arch/$nframe.vdex $framedir/oat/$arch/
				flip="1"
			fi
			if [[ $flip ]]; then
				mv $i $framedir/
				echo "$framedir/$nframe.jar $i" >> $logs/extramv.txt
			fi
		done
		rm -rf $sysdir/vendor/framework/oat
	fi
	if [[ $dtype = "l" || $dtype = "m" ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_deop"
		echo "----------------------------------------------------"
		echo ""
		if [[ ! -d "$framedir/$arch/odex" ]]; then
			java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch/boot.oat >> $logs/deodex.log
		fi
		if [[ $arch2 ]]; then
			if [[ ! -d "$framedir/$arch2/odex" ]]; then
				java -Xmx${heapsize}m -jar $oat2dex boot $framedir/$arch2/boot.oat >> $logs/deodex.log
			fi
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir)
	app=""
	for app in $(echo "$applist"); do
		if [[ $dtype = "l" ]]; then
			if [[ $arch2 && -d $appdir/$app/$arch && -d $appdir/$app/$arch2 ]]; then
				rm -rf $appdir/$app/$arch2
			fi
		else
			if [[ $arch2 && -d $appdir/$app/oat/$arch && -d $appdir/$app/oat/$arch2 ]]; then
				rm -rf $appdir/$app/oat/$arch2
			fi
		fi
	done
	deoappdir="$appdir"
	if [[ $dtype != "l" ]]; then
		deoarch="oat/$arch"
		deoarch2="$arch"
		dodeodex
		if [[ $arch2 ]]; then
			deoarch="oat/$arch2"
			deoarch2="$arch2"
			dodeodex
		fi
	else
		deoarch="$arch"
		deoarch2="$arch"
		dodeodex
		if [[ $arch2 ]]; then
			deoarch="$arch2"
			deoarch2="$arch2"
			dodeodex
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir)
	privapp=""
	for privapp in $(echo "$applist"); do
		if [[ $dtype != "l" ]]; then
			if [[ $arch2 && -d $privdir/$privapp/oat/$arch && -d $privdir/$privapp/oat/$arch2 ]]; then
				rm -rf $privdir/$privapp/oat/$arch2
			fi
		else
			if [[ $arch2 && -d $privdir/$privapp/$arch && -d $privdir/$privapp/$arch2 ]]; then
				rm -rf $privdir/$privapp/$arch2
			fi
		fi
	done
	deoappdir="$privdir"
	if [[ $dtype != "l" ]]; then
		deoarch="oat/$arch"
		deoarch2="$arch"
		dodeodex
		if [[ $arch2 ]]; then
			deoarch="oat/$arch2"
			deoarch2="$arch2"
			dodeodex
			deoarch="oat/$arch"
			deoarch2="$arch"
		fi
	else
		deoarch="$arch"
		deoarch2="$arch"
		dodeodex
		if [[ $arch2 ]]; then
			deoarch="$arch2"
			deoarch2="$arch2"
			dodeodex
			deoarch="$arch"
			deoarch2="$arch"
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	cd "$framedir"
	if [[ $dtype = "n2" || $dtype = "m2" ]]; then
		if [[ $dtype = "n2" ]]; then
			ls $deoarch2 | grep .oat$ | sort | while read line; do
				if [[ $line != "boot.oat" ]]; then
					framejar=$(echo "$(echo "$line" | sed 's/^boot-//; s/\.oat$//').jar")
					if [[ $($p7z l $framejar | grep classes.dex) ]]; then
						echo ""
						echo "$greent$frame $t_deodex_app_already$normal"
						echo ""
						continue
					fi
				fi
				echo ""
				echo "$t_deodex_deodexing $line"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoarch2/$line | rev | cut -d"/" -f1 | rev)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line2; do
					if [[ ! $(echo "$line2" | grep classes) ]]; then
						line3=$(echo "$line2" | rev | cut -d"." -f2- | rev)
						dexclass="classes.dex"
					else
						line3=$(echo "$line2" | rev | cut -d"." -f3- | rev)
						dexclass=$(echo "$line2" | cut -d":" -f2-)
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $deoarch2/boot.oat $deoarch2/$line/$line2 -o $deoarch2/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble -a $api $deoarch2/smali -o $line3.jar:$dexclass >> $logs/deodex.log
					rm -rf $deoarch2/smali
				done
			done
		elif [[ $dtype = "m2" ]]; then
			classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoarch2/boot.oat | rev | cut -d"/" -f1 | rev)
			line=""
			for line in $(echo "$classes"); do
				if [[ ! $(echo "$line" | grep classes) ]]; then
					framejar="$line"
					dexclass=":classes.dex"
				else
					framejar=$(echo "$line" | cut -d":" -f1)
					dexclass=""
				fi
				if [[ $($p7z l $framejar | grep classes.dex) ]]; then
					echo ""
					echo "$greent$frame $t_deodex_app_already$normal"
					echo ""
					continue
				fi
				line2=$(echo "$line" | rev | cut -d"." -f2- | rev)
				echo ""
				echo "$t_deodex_deodexing $line2"
				echo ""
				java -Xmx${heapsize}m -jar $baksmali deodex -b $deoarch2/boot.oat $deoarch2/boot.oat/$line -o smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali assemble -a $api smali -o $line$dexclass >> $logs/deodex.log
				rm -rf smali
			done
		fi
		if [[ -d $deoarch ]]; then
			frame=""
			for frame in $(ls $deoarch | grep .odex$ | sort); do
				framejar=$(echo "$(echo "$frame" | rev | cut -d"." -f2- | rev).jar")
				if [[ $($p7z l $framejar | grep classes.dex) ]]; then
					echo ""
					echo "$greent$frame $t_deodex_app_already$normal"
					echo ""
					continue
				fi
				echo ""
				echo "$t_deodex_deodexing $frame"
				echo ""
				classes=$(java -Xmx${heapsize}m -jar $baksmali list dex $deoarch/$frame)
				echo "$classes" >> $logs/deodex.log
				echo "$classes" | while read line; do
					apkdex=$(basename $(echo "$line"))
					if [[ ! $(echo "$apkdex" | grep classes) ]]; then
						dexclass="$apkdex:classes.dex"
					else
						dexclass="$apkdex"
					fi
					java -Xmx${heapsize}m -jar $baksmali deodex -b $deoarch2/boot.oat $deoarch/$frame/$apkdex -o $deoarch/smali >> $logs/deodex.log
					java -Xmx${heapsize}m -jar $smali assemble -a $api $deoarch/smali -o $dexclass >> $logs/deodex.log
					rm -rf $deoarch/smali
				done
			done
		fi
	elif [[ $dtype = "l" || $dtype = "m" ]]; then
		if [[ -d $deoarch ]]; then
			for frame in $(ls $deoarch | grep .odex$ | sort); do
				echo ""
				echo "$t_deodex_deodexing $frame"
				echo ""
				errtest=$(echo "$frame" | rev | cut -d"." -f2- | rev)
				java -Xmx${heapsize}m -jar $oat2dex $deoarch/$frame $deoarch2/odex >> $logs/deodex.log
			done
		fi
		mv $deoarch2/dex/* $deoarch/
		ls $deoarch | grep "\.dex$" | while read line; do
			if [[ ! $(echo "$line" | grep classes) ]]; then
				frame=$(echo "$(echo "$line" | sed 's/\.dex//').jar:classes.dex")
			else
				dexclass=$(echo "$line" | rev | cut -d"-" -f1 | rev)
				frame=$(echo "$(echo "$line" | sed "s/-$dexclass//").jar:$dexclass")
			fi
			mv $deoarch/$line $frame
		done
	elif [[ $dtype = "o" ]]; then
		for d in $framedir/$arch $framedir/$arch2; do
			cd "$d"
			if [[ -f "boot.oat" && -f "boot.vdex" ]]; then
				bootclass=$(strings boot.oat | tr ' ' '\n' 2>/dev/null | grep -m 1 '\-\-dex\-location=' | cut -d'=' -f2-)
			fi
			if [[ $bootclass && ! -f ${bootclass}__classes.dex ]]; then
				nclass="$(echo "$bootclass" | sed 's/\.jar$/\.vdex/')"
				mv boot.vdex boot-$(basename "$bootclass" | sed 's/\.jar$/\.vdex/')
			fi
			find -name "boot-*.vdex" | while read i; do
				nname=$(echo "$i" | sed 's/^\.\///; s/^boot-//; s/\.vdex$//')
				if [[ -f $framedir/$nname.jar__classes.dex ]]; then
					continue
				fi
				echo ""
				echo "$t_deodex_deodexing $(echo "$i" | sed 's/^\.\///')"
				echo ""
				mv "$i" "$nname.vdex"
				$vdexext -i "$nname.vdex" >> $logs/deodex.log
				if [[ ! $(ls | grep "$nname.apk_classes") ]]; then
					$vdexext -i "$nname.vdex" --ignore-crc-error >> $logs/deodex.log
					if [[ ! $(ls | grep "$nname.apk_classes") ]]; then
						echo "${d/$romdir/}/$nname.jar" >> $logs/deodex_fail_list
						continue
					else
						echo "${d/$romdir/}/$nname.jar" >> $logs/deodex_crc_ignored
					fi
				fi
				ls | grep "$nname.apk" | while read r; do
					mv "$r" "$framedir/$(echo "$r" | sed 's/apk_/jar:/')"
				done
			done
		done
		for d in $framedir/oat/$arch $framedir/oat/$arch2; do
			cd "$d"
			ls | grep ".vdex$" | while read i; do
				nname=$(echo "$i" | sed 's/\.vdex$//')
				if [[ -f $framedir/$nname.jar__classes.dex ]]; then
					continue
				fi
				echo ""
				echo "$t_deodex_deodexing $i"
				echo ""
				$vdexext -i "$i" >> $logs/deodex.log
				if [[ ! $(ls | grep ".apk_classes") ]]; then
					$vdexext -i "$i" --ignore-crc-error >> $logs/deodex.log
					if [[ ! $(ls | grep ".apk_classes") ]]; then
						echo "${d/$romdir/}/$nname.jar" >> $logs/deodex_fail_list
						continue
					else
						echo "${d/$romdir/}/$nname.jar" >> $logs/deodex_crc_ignored
					fi
				fi
				ls | grep "$nname.apk" | while read r; do
					mv $r $framedir/$(echo "$r" | sed 's/apk_/jar:/')
				done
			done
		done
	fi
	cd "$framedir"
	banner
	echo "$bluet$t_deodex_pack_jar$normal"
	ls | grep "jar:classes.dex" | sort | while read line; do
		jname=$(echo "$line" | cut -d':' -f1)
		ls | grep -e "^${jname}.*classes" | while read i; do
			jclass=$(echo "$i" | cut -d':' -f2)
			mv "$i" "$jclass"
		done
		if [[ -f "classes.dex" ]]; then
			($aapt add -fk "$jname" classes*.dex 2>&1) >> $logs/zip.log
		else
			echo "ERROR: $jname has no classes.dex" >> $logs/deodex.log
		fi
		rm -rf classes*.dex
	done
	if [[ $dtype = "l" || $dtype = "m" ]]; then
		rm -rf $arch/odex
		rm -rf $arch/dex
		if [[ $arch2 ]]; then
			rm -rf $arch2/odex
			rm -rf $arch2/dex
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	if [[ -s $logs/extramv.txt ]]; then
		cat $logs/extramv.txt | while read line; do
			mv $line
			if [[ $(echo "$line" | grep "app_chimera") ]]; then
				rm -rf $(dirname $(echo "$line" | gawk '{print $1}'))
			fi
		done
	fi
	rm -rf $logs/extramv.txt
	rm -rf oat
	rm -rf $arch
	if [[ $arch2 ]]; then
		rm -rf $arch2
	fi

	if [[ $dtype = "l" || $dtype = "m" ]]; then
		deodex_fail_list=$(grep "convertToDex: skip" $logs/deodex.log | cut -d"/" -f2- | sort -u)
	else
		deodex_fail_list=$(cat $logs/deodex_fail_list 2>/dev/null)
	fi
	if [[ $deodex_fail_list ]]; then
		banner
		echo -e "$t_deodex_problems"
		echo "$yellowt$deodex_fail_list$normal"
		if [[ $dtype = "m" ]]; then
			echo ""
			echo "$greent$t_deodex_try_smali$normal"
		fi
		echo ""
		read -p "$t_enter_continue"
	fi
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ ! "$stillodexed" ]]; then
		if [[ $dtype = "n" ]]; then
			delete_meta_inf
		fi
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_old() {
	banner
	echo "${bluet}$t_startup_project $greent$romname"
	echo "$bluet$t_startup_version $greent$androidversion"
	echo "$bluet$t_deodex_api$greent$api$normal"
	echo -e "$bluet$t_deodex_method${greent}\t$(basename $smali)"
	echo -e "\t$(basename $baksmali)$normal"
	echo ""
	read -n 1 -p "$t_deodex_continue_q"
	if [[ ! $REPLY = "y" ]]; then
		return
	fi
	dodeodexold() {
		app=""
		for app in $(echo "$applist"); do
			if [[ ! -f $deoappdir/$app.odex ]]; then
				continue
			fi
			if [[ ! $($p7z l $deoappdir/$app.$deoext | grep classes.dex) ]]; then
				echo ""
				echo "$t_deodex_deodexing $app"
				echo ""
				java -Xmx${heapsize}m -jar $baksmali -a $api -d $framedir -x $deoappdir/$app.odex -o $deoappdir/smali >> $logs/deodex.log
				java -Xmx${heapsize}m -jar $smali -a $api $deoappdir/smali -o $deoappdir/classes.dex >> $logs/deodex.log
				$aapt add -fk $deoappdir/$app.$deoext $deoappdir/classes.dex 2>/dev/null >> $logs/zip.log
				rm -rf $deoappdir/$app.odex
				rm -rf $deoappdir/smali
				rm -rf $deoappdir/classes.dex
			else
				echo ""
				echo "$greent$app $t_deodex_app_already$normal"
				echo ""
				rm -rf $deoappdir/$app.odex
			fi
		done
	}
	rm -rf $prfiles/deodex_*
	touch $prfiles/deodex_old
	rm -rf $logs/*.log
	if [[ -d $sysdir/app && $(find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/") ]]; then
		echo "$clears"
		echo ""
		echo "----------------------------------------------------"
		echo "$t_deodex_move"
		echo "----------------------------------------------------"
		echo ""
		find system vendor -name *.odex 2>/dev/null | grep -v "system/framework\|system/app/\|system/priv-app/" | rev | cut -d"." -f2- | rev > $logs/extraodex.txt
		if [[ -s $logs/extraodex.txt ]]; then
			line=""
			cat $logs/extraodex.txt | while read line; do
				( exec mv $romdir/$line* $sysdir/app/ 2<&1 ) > /dev/null
			done
		fi
	fi
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_app"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $appdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$appdir"
	deoext="apk"
	dodeodexold
	if [[ -s $logs/extraodex.txt ]]; then
		extraapp=""
		line=""
		cat $logs/extraodex.txt | while read line; do
			extraapp=$(echo $line | rev | cut -d"/" -f1 | rev)
			mv $sysdir/app/$extraapp.apk $romdir/$line.apk
		done
	fi
	rm -rf $logs/extraodex.txt
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_priv"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $privdir | grep .apk | rev | cut -c 5- | rev)
	deoappdir="$privdir"
	deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_start_frame"
	echo "----------------------------------------------------"
	echo ""
	applist=$(ls $framedir | grep .jar | rev | cut -c 5- | rev)
	deoappdir="$framedir"
	deoext="jar"
	dodeodexold
	applist=$(ls $framedir | grep -E .apk | rev | cut -c 5- | rev)
	deoappdir="$framedir"
	deoext="apk"
	dodeodexold
	echo "$clears"
	echo ""
	echo "----------------------------------------------------"
	echo "$t_deodex_clean"
	echo "----------------------------------------------------"
	echo ""
	echo ""
	rm -rf $framedir/*.odex
	cd $romdir
	stillodexed=$(find system vendor -name *.odex 2>/dev/null)
	if [[ ! "$stillodexed" ]]; then
		banner
		echo "$greent$t_deodex_complete$normal"
		exit_deo
	else
		banner
		echo "$redt$t_deodex_remain"
		echo ""
		echo "$yellowt$stillodexed$normal"
		exit_deo
	fi
}
deodex_sqsh() {
	banner
	echo "$bluet$t_general_extracting $sqshfile ...$normal"
	if [[ $(echo "$sqshfile" | grep "priv-app\|odex.app\|framework") ]]; then
		cd $sysdir
		sqshtype=$(echo "$sqshfile" | cut -d"." -f2)
		sqshdir=$(echo "sqshtmp/$sqshtype")
	elif [[ $(echo "$sqshfile" | grep "orig.applications") ]]; then
		cd $sysdir/etc/product
		mkdir -p sqshtmp
		mv $sqshfile sqshtmp/
		cd sqshtmp
		$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
		banner
		echo "$bluet$t_deodex_move_odex$normal"
		if [[ $(ls | grep arm64) ]]; then
			odexarch="arm64"
			cd arm64
		elif [[ $(ls | grep arm) ]]; then
			odexarch="arm"
			cd arm
		fi
		ls | while read line; do
			odexapp=$(echo "$line" | sed 's/\.odex//')
			mv $line $sysdir/etc/product/applications/$odexapp/oat/$odexarch/
			mv $sysdir/etc/product/sqshtmp/$odexapp/$odexapp.apk $sysdir/etc/product/applications/$odexapp/
		done
		rm -rf $sysdir/etc/product/sqshtmp $sysdir/etc/product/orig.applications
		sqshfile=""
		cd $romdir
		return
	else
		sqshdir="sqshtmp"
	fi
	mkdir -p $sqshdir
	mv $sqshfile $sqshdir/
	cd $sqshdir
	$p7z x $sqshfile 2>/dev/null >> $logs/zip.log
	rm -rf $sqshfile
	banner
	echo "$bluet$t_deodex_move_odex$normal"
	if [[ -d $sysdir/$sqshdir/arm || -d $sysdir/$sqshdir/arm64 ]]; then
		if [[ -d $sysdir/$sqshdir/arm ]]; then
			cd $sysdir/$sqshdir/arm
			sqsharch="arm"
		elif [[ -d $sysdir/$sqshdir/arm64 ]]; then
			cd $sysdir/$sqshdir/arm64
			sqsharch="arm64"
		fi
		if [[ ! $sqshtype = "framework" ]]; then
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				mkdir -p $sysdir/$sqshtype/$tmpapp/oat/$sqsharch
				mv "$line" $sysdir/$sqshtype/$tmpapp/oat/$sqsharch/
			done
		else
			line=""
			ls | grep .odex | while read line; do
				tmpapp=$(echo "$line" | sed 's/\.odex//')
				if [[ -d $framedir/$tmpapp ]]; then
					mkdir -p $framedir/$tmpapp/oat/$sqsharch
					mv "$line" $framedir/$tmpapp/oat/$sqsharch/
				fi
			done
			mkdir -p $sysdir/$sqshtype/oat/$sqsharch
			mv * $sysdir/$sqshtype/oat/$sqsharch/
		fi
	else
		cd $sysdir/sqshtmp
		line=""
		find . -type d | sed 's/^.\///' | while read line; do
			mkdir -p $sysdir/$line
		done
		line=""
		find . -type f | sed 's/^.\///' | while read line; do
			mv $line $sysdir/$line
		done
	fi
	cd $sysdir
	rmleft=$(echo "$sqshfile" | sed 's/\.sqsh$//')
	rm -rf sqshtmp $rmleft
	sqshfile=""
	cd $romdir
}
xdareg() {
	fname=$(echo "$dlinfo" | gawk '{print $1}')
	xdalink=$(echo "$dlinfo" | gawk '{print $2}')
	sterm=$(echo "$dlinfo" | gawk '{print $3}')
	ltmp=$(wget -qO- "$xdalink" | cat | grep "$sterm" | cut -d'"' -f2 | sed 's/\&amp;/\&/g')
	furl="https://forum.xda-developers.com/$ltmp"
	(wget -O "$fname" "$furl" 2>&1) >/dev/null
}
dozipalign() {
	cd $romdir
	echo ""
	banner
	read -n 1 -p "$t_zipalign_frame_q" reply
	echo ""
	echo ""
	line=""
	find system vendor -name *.apk 2>/dev/null | grep -v "/framework/" | sed 's/^\.\///' | sort | while read line; do
		app=$(basename $line)
		echo "$t_zipalign $app ..."
		$zipalign -f 4 $line $line-2 >/dev/null 2>&1
		mv $line-2 $line
	done
	if [[ $reply = "y" ]]; then
		line=""
		find system/framework -type f | grep -v "00_project_files" | grep .apk | sed 's/^\.\///' | while read line; do
			app=$(basename $line)
			echo "$t_zipalign $app ..."
			$zipalign -f 4 $line $line-2 >/dev/null 2>&1
			mv $line-2 $line
		done
	fi
}
ext_dirmenu() {
	choice=""
	while [[ ! $choice ]]; do
		isdataappstatus
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_extra_dir$normal"
		echo ""
		echo "1) $t_menu_data ($bluet$t_title_current$greent$dataapp1$normal)"
		echo "${yellowt}2) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then # START /data/app support
			if [[ ! $dataapp = "Yes" ]]; then
				banner
				read -n 1 -p "$t_extra_data_q"
				echo ""
				echo ""
				if [[ $REPLY = "y" ]]; then
					data_app
					if [[ $needpart = "1" ]]; then
						rm -rf $romdir/data
					else
						banner
						echo "$greent$t_extra_data_added"
						echo ""
						echo "$yellowt$romdir/data/app$normal"
						echo ""
						read -p "$t_enter_extra_dir_menu"
					fi
				fi
			else
				banner
				echo -e "$t_extra_already_data"
				read -n 1 -p ""
				echo ""
				echo ""
				if [[ $REPLY = "y" ]]; then
					data_apprem
					banner
					echo "$greent$t_extra_data_rem$normal"
					echo ""
					read -p "$t_enter_extra_dir_menu"
				fi
			fi
			choice=""
			continue
		elif [[ $choice = "2" ]]; then # START ROM Tools Menu
			return
		elif [[ $choice = "m" ]]; then # START Main Menu
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Quit
			echo ""
			echo ""
			exit
		fi
	done
}
extract_new() {
	loop="0"
	while [[ $loop = "0" ]]; do
		timestamp=$(date +%m-%d-%Y-%H:%M:%S)
		cd $base
		if [[ ! $(ls -d */ | grep 'superr_') ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_extract_no_project$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			return
		fi
		cd $romdir
		romzip=""
		romtar=""
		rommd5=""
		romchunk=""
		romimg=""
		romwin=""
		find . -maxdepth 1 -type f | grep ".tgz$\|.zip$\|.tar$\|.tar.a$\|.tar.md5$\|.win\|chunk\|.img$\|system.ext4$\|system.img.ext4" | grep -v "boot\.img\|recovery\.img" | sed 's/^\.\///' | sort > $prfiles/findextract
		if [[ ! $(cat $prfiles/findextract | wc -l) -gt "1" ]]; then
			if [[ $(grep *-*-factory-*.tgz $prfiles/findextract) || $(grep *-*-factory-*.zip $prfiles/findextract) || $(grep *-*-preview-*.tgz $prfiles/findextract) || $(grep *-*-preview-*.zip $prfiles/findextract) ]]; then
				romtgz=$(cat $prfiles/findextract)
			elif [[ $(grep .zip$ $prfiles/findextract) ]]; then
				romzip=$(cat $prfiles/findextract)
			elif [[ $(grep .tar$ $prfiles/findextract) ]]; then
				romtar=$(cat $prfiles/findextract)
			elif [[ $(grep .tar.a$ $prfiles/findextract) ]]; then
				romtara=$(ls | grep .tar.a$)
				romtaratar=$(echo $romtara | sed 's/tar\.a/tar/')
				mv $romtara $romtaratar
				romtar="$romtaratar"
			elif [[ $(grep .tar.md5$ $prfiles/findextract) ]]; then
				rommd5=$(cat $prfiles/findextract)
			elif [[ $(grep .win $prfiles/findextract) ]]; then
				romwin=$(cat $prfiles/findextract)
			elif [[ $(grep chunk $prfiles/findextract) ]]; then
				romchunk=$(cat $prfiles/findextract)
			elif [[ $(grep .img$ $prfiles/findextract) ]]; then
				romimg=$(cat $prfiles/findextract)
			elif [[ $(grep "system.ext4$\|system.img.ext4" $prfiles/findextract) ]]; then
				if [[ -f system.ext4 ]]; then
					mv system.ext4 system.img
				elif [[ -f system.img.ext4 ]]; then
					mv system.img.ext4 system.img
				fi
				romimg="system.img"
			fi
			rm -rf $prfiles/findextract
		else
			findproject=""
			findproject=( $(cat $prfiles/findextract) )
			prchoice="ext"
			while [[ ! $romzip && ! $romtar && ! $rommd5 && ! $romwin && ! $romchunk && ! $romimg && ! $romtgz ]]; do
				banner
				echo "$greenb$t_title_extract$normal"
				echo ""
				choosepr project in ${findproject[@]}
				if [[ $REPLY = "m" ]]; then
					rm -rf $prfiles/findextract
					cd $base
					return
				elif [[ $REPLY = "q" ]]; then
					rm -rf $prfiles/findextract
					exit
				else
					if [[ $(echo "$project" | grep *-*-factory-*.tgz) || $(echo "$project" | grep *-*-factory-*.zip) || $(echo "$project" | grep *-*-preview-*.tgz) || $(echo "$project" | grep *-*-preview-*.zip) ]]; then
						romtgz="$project"
					elif [[ $(echo "$project" | grep .zip$) ]]; then
						romzip="$project"
					elif [[ $(echo "$project" | grep .tar$) ]]; then
						romtar="$project"
					elif [[ $(echo "$project" | grep .tar.a$) ]]; then
						romtaratar=$(echo "$project" | sed 's/tar\.a/tar/')
						mv "$project" $romtaratar
						romtar="$romtaratar"
					elif [[ $(echo "$project" | grep .tar.md5$) ]]; then
						rommd5="$project"
					elif [[ $(echo "$project" | grep .win) ]]; then
						romwin="$project"
					elif [[ $(echo "$project" | grep chunk) ]]; then
						romchunk="$project"
					elif [[ $(echo "$project" | grep .img$) ]]; then
						romimg="$project"
					elif [[ $(echo "$project" | grep "system.ext4$\|system.img.ext4") ]]; then
						romimg="$project"
						if [[ $romimg = "system.ext4" ]]; then
							mv $sysdir.ext4 $sysdir.img
						elif [[ $romimg = "system.img.ext4" ]]; then
							mv $sysdir.img.ext4 $sysdir.img
						fi
						romimg="system.img"
					fi
					rm -rf $prfiles/findextract
				fi
			done
		fi
		if [[ -f cache.img.ext4 ]]; then
			mv cache.img.ext4 cache.img
		elif [[ -f cache.ext4 ]]; then
			mv cache.ext4 cache.img
		fi
		if [[ ! $romzip && ! $romtar && ! $rommd5 && ! $romimg && ! $romwin && ! $romchunk && ! $romtgz ]]; then
			choice=""
			while [[ ! $choice ]]; do
				banner
				echo "$bluet$t_startup_project $greent$romname$normal"
				echo ""
				echo "$yellowb$redt$t_extract_title$normal"
				echo ""
				echo -e "$t_extract_no_files_message"
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice

				if [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
					choice=""
					continue
				elif [[ $choice = "1" ]]; then # START Add a ROM zip, tar/boot.img, system.img/boot.img, or win/boot.win
					extrest="1"
				elif [[ $choice = "2" ]]; then # START Pull system, vendor, boot, and recovery images from device
					choice2=""
					while [[ ! $choice2 ]]; do
						banner
						echo -e "$t_extract_cho_option"
						echo "${yellowt}m = $t_title_main"
						echo "${magentat}q = $t_menu_quit$normal"
						echo ""
						read -n 1 -p "$t_select" choice2

						if [[ ! ${choice2} =~ ^[1-2]$ ]] && [[ ! $choice2 = "m" && ! $choice2 = "q" ]]; then
							choice2=""
							continue
						elif [[ $choice2 = "1" ]]; then # START My device is booted to custom recovery (stock will not work)
							banner
							echo "$bluet$t_extract_plug$normal"
							echo ""
							read -n 1 -p "$t_general_continue_q" reply
							if [[ ! $reply = "y" ]]; then
								cd $base
								return
							fi
							banner
							echo "$bluet$t_extract_detect_part$normal"
							echo ""
							if [[ ! $($adb shell mount | grep /system) ]]; then
								$adb shell mount /system
							fi
							$adb pull /system/build.prop $romdir/build.prop
							get_devicename
							deviceloc="$base/tools/devices/$devicename"
							rm -rf $romdir/build.prop
							mkdir -p "$deviceloc"
							if [[ ! -f "$deviceloc/superr_byname" ]]; then
								byname1=$($adb shell "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
								if [[ ! $byname1 ]]; then
									byname1=$($adb shell su -c "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
								fi
								amnt=$($adb shell "mount")
								if [[ $(echo "$amnt" | grep "/SYSTEM") ]]; then
									touch "$deviceloc/superr_capbyname"
								elif [[ $(echo "$amnt" | grep "/APP") ]]; then
									touch "$deviceloc/superr_appbyname"
								fi
								echo "$byname1" | sed 's:/:\\/:g' > "$deviceloc/superr_byname"
							fi
							byname=$(cat "$deviceloc/superr_byname" | sed 's:\\::g')
							pullimg="boot"
							pullimgr
							pullimg="system"
							pullimgr
							pullimg="recovery"
							pullimgr
							if [[ -f "$deviceloc/superr_mmc" && $(grep "vendor" "$deviceloc/superr_mmc") ]]; then
								pullimg="vendor"
								pullimgr
							elif [[ $(grep "by-name" "$deviceloc/superr_byname") && $($adb shell ls -la $byname | grep vendor) ]]; then
								pullimg="vendor"
								pullimgr
							fi
						elif [[ $choice2 = "2" ]]; then # START My device is booted to Android (must be rooted)
							banner
							echo -e "$t_byname_usb_debug"
							echo ""
							echo -e "$t_byname_usb_debug_root"
							echo ""
							read -n 1 -p "$t_general_continue_q" reply
							if [[ ! $reply = "y" ]]; then
								cd $base
								return
							fi
							banner
							echo "$bluet$t_extract_detect_part$normal"
							echo ""
							$adb "wait-for-device"
							$adb pull /system/build.prop $romdir/build.prop >/dev/null
							get_devicename
							deviceloc="$base/tools/devices/$devicename"
							rm -rf $romdir/build.prop
							mkdir -p "$deviceloc"
							if [[ ! -f "$deviceloc/superr_byname" ]]; then
								byname1=$($adb shell "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
								if [[ ! $byname1 ]]; then
									byname1=$($adb shell su -c "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
								fi
								amnt=$($adb shell "mount")
								if [[ $(echo "$amnt" | grep "/SYSTEM") ]]; then
									touch "$deviceloc/superr_capbyname"
								elif [[ $(echo "$amnt" | grep "/APP") ]]; then
									touch "$deviceloc/superr_appbyname"
								fi
								echo "$byname1" | sed 's:/:\\/:g' > "$deviceloc/superr_byname"
							fi
							byname=$(cat "$deviceloc/superr_byname" | sed 's:\\::g')
							pullimg="system"
							pullimga
							pullimg="boot"
							pullimga
							pullimg="recovery"
							pullimga
							if [[ -f "$deviceloc/superr_mmc" && $(grep "vendor" "$deviceloc/superr_mmc") ]]; then
								pullimg="vendor"
								pullimga
							elif [[ -s "$deviceloc/superr_byname" && $($adb shell su -c "ls -la $byname" | grep vendor) ]]; then
								pullimg="vendor"
								pullimga
							fi
						elif [[ $choice2 = "m" ]]; then # START Main Menu
							cd $base
							return
						elif [[ $choice2 = "q" ]]; then # START Quit
							echo ""
							echo ""
							exit
						fi
						if [[ -f $sysdir.img ]]; then
							romimg="system.img"
						else
							banner
							echo "$redb$yellowt$bold$t_error$normal"
							echo -e "$redt$t_extract_pull_error$normal"
							echo ""
							read -p "$t_enter_main_menu"
							cd $base
							return
						fi
					done
				elif [[ $choice = "m" ]]; then # START Main Menu
					cd $base
					return
				elif [[ $choice = "q" ]]; then # START Quit
					echo ""
					echo ""
					exit
				fi
			done
		fi
		if [[ $extrest = "1" ]]; then
			continue
		fi
		banner
		echo "$t_extract_q $yellowt$romzip$romtar$rommd5$romimg$romchunk$romwin$romtgz$normal"
		read -n 1 -p "$t_extract_q2" reply
		echo ""
		echo ""
		if [[ ! $reply = "y" ]]; then
			cd $base
			return
		fi
		banner
		echo "$bluet$t_extract_prep$normal"
		if [[ ! $romimg = "cache.img" && ! $romimg = "hidden.img" && ! $romimg = "data.img" && ! $romimg = "vendor.img" && ! $romimg = "product.img" && ! $romimg = "cust.img" && ! $romimg = "generic.img" ]]; then
			moveoldfiles
		fi
		if [[ $romzip ]]; then
			cd $romdir
			if [[ ! $($p7z l $romzip | grep ".*system.ext4.tar.*\|.*tar.md5\|.*chunk\|system\/build.prop\|system.new.dat\|system_new.img\|system.img" | grep -v ".*chunk.*\.so$") ]]; then
				banner
				echo "$redb$yellowt$bold$t_warning$normal"
				echo -e "$redt$t_extract_zip_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				return
			fi
			if [[ $($p7z l $romzip | grep "META-INF/com/google/android/update-binary") ]]; then
				$p7z e $romzip META-INF/com/google/android/update-binary 2>/dev/null >> $logs/zip.log
				if [[ $(file update-binary | grep /sbin/sh) ]]; then
					upbinary="1"
				fi
				rm -rf update-binary
			fi
			if [[ $upbinary = "1" && $($p7z l $romzip | gawk '{ print $6 }' | grep "^system/build.prop") ]]; then
				banner
				echo "$bluet$t_extract_zip$normal"
				$p7z x $romzip 2>/dev/null >> $logs/zip.log
				line=""
				cat $usdir/update-binary | grep "symlink " | while read line; do
					part2=$(echo "$line" | gawk '{ print $2 }')
					part3=$(echo "$line" | gawk '{ print $3 }')
					echo "symlink(\"$part2\", \"$part3\");" >> $prfiles/symlinks
				done
				cp $prfiles/symlinks $prfiles/symlinks.orig
				rm -rf META-INF
				romzip=""
				cp -R $tools/updater/META-INF META-INF
				cp -R $tools/updater/install $romdir/
				get_devicename
				if [[ ! -d "$base/tools/devices/$devicename" ]]; then
					mkdir -p "$base/tools/devices/$devicename"
				fi
				deviceloc="$base/tools/devices/$devicename"
				update_project
			elif [[ $($p7z l $romzip | grep system.new.dat) ]]; then
				banner
				echo "$bluet$t_extract_dat$normal"
				$p7z e $romzip *.new.dat* *.transfer.list boot.img 2>/dev/null >> $logs/zip.log
				ls | grep "\.new\.dat" | while read i; do
					line=$(echo "$i" | cut -d"." -f1)
					if [[ $(echo "$i" | grep "\.dat\.xz") ]]; then
						$p7z e "$i" 2>/dev/null >> $logs/zip.log
						rm -rf "$i"
					fi
					if [[ $(echo "$i" | grep "\.dat\.br") ]]; then
						banner
						echo "$bluet$t_extract_convert_br$normal"
						$ttools/brotli -d "$i"
						rm -f "$i"
					fi
					banner
					echo "$bluet$t_extract_convert_sys $line.img ...$normal"
					$ttools/sdat2img.py $line.transfer.list $line.new.dat $line.img > $logs/main.log
					rm -rf $line.transfer.list $line.new.dat
				done
				romzip=""
				romimg="system.img"
			elif [[ $($p7z l $romzip | grep "system_new.img\|system.img$") ]]; then
				banner
				echo "$bluet$t_extract_img_from_zip$normal"
				if [[ -f system.img ]]; then
					mv system.img system_old.img
				fi
				$p7z e $romzip system_new.img system.img vendor_new.img vendor.img boot.img 2>/dev/null >> $logs/zip.log
				if [[ -f system_new.img ]]; then
					mv system_new.img system.img
				fi
				if [[ -f vendor_new.img ]]; then
					mv vendor_new.img vendor.img
				fi
				romzip=""
				romimg="system.img"
			elif [[ $($p7z l $romzip | grep system.ext4.tar.a) ]]; then
				banner
				echo "$bluet$t_extract_tar_boot$normal"
				$p7z e $romzip system.ext4.tar.a boot.img 2>/dev/null >> $logs/zip.log
				romzip=""
				mv system.ext4.tar.a system.ext4.tar
				romtar="system.ext4.tar"
			elif [[ $($p7z l $romzip | grep tar.md5) && ! $($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_) ]]; then
				banner
				tarmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }')
				echo "$bluet$t_general_extracting $tarmd5 ...$normal"
				$p7z e $romzip $tarmd5 2>/dev/null >> $logs/zip.log
				banner
				echo "$bluet$t_extract_img$normal"
				if [[ $(tar -tf $tarmd5 | grep system.img.ext4) ]]; then
					tar -xf $tarmd5 system.img.ext4 boot.img cache.img.ext4 2>/dev/null >> $logs/zip.log
					mv system.img.ext4 system.img
					mv cache.img.ext4 cache.img
				elif [[ $(tar -tf $tarmd5 | grep system.img) ]]; then
					tar -xf $tarmd5 system.img boot.img cache.img 2>/dev/null >> $logs/zip.log
				fi
				if [[ -f system.img ]]; then
					rm -rf $tarmd5
				else
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_extract_fail$normal"
					echo ""
					read -p "$t_enter_main_menu"
					cd $base
					return
				fi
				romzip=""
				romimg="system.img"
			elif [[ $($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_) ]]; then
				banner
				mainmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^AP_)
				cscmd5=$($p7z l $romzip | grep tar.md5 | gawk '{ print $6 }' | grep ^CSC_)
				echo "$bluet$t_extract_tar_md5$normal"
				$p7z e $romzip $mainmd5 $cscmd5 2>/dev/null >> $logs/zip.log
				banner
				echo "$bluet$t_extract_img$normal"
				for i in "$mainmd5" "$cscmd5"; do
					tarulist=$(tar -tf $i | grep -e ".*system.*\.img.*\|.*system.*ext4\|.*boot\.img\|.*cache.*\.img.*\|.*cache.*ext4")
					echo "$tarulist" | while read line; do
						tar -xf "$i" "$line" 2>/dev/null >> $logs/zip.log
						if [[ $(echo "$line" | grep "\.lz4") ]]; then
							"$lz4" "$line"
							rm -f "$line"
							line=$(echo "$line" | sed 's/\.lz4$//')
						fi
						if [[ $(echo "$line" | grep "\.ext4") ]]; then
							mv "$line" "$(echo "$line" | cut -d'.' -f1).img"
						fi
					done
				done
				if [[ -f system.img ]]; then
					rm -rf $mainmd5
					rm -rf $cscmd5
				else
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_extract_fail$normal"
					echo ""
					read -p "$t_enter_main_menu"
					cd $base
					return
				fi
				romzip=""
				romimg="system.img"
			elif [[ $($p7z l $romzip | grep chunk | grep -v ".*\.so$") ]]; then
				banner
				echo "$bluet$t_extract_chunk$normal"
				$p7z e $romzip *system*chunk* boot.img */*system*chunk* */boot.img 2>/dev/null >> $logs/zip.log
				rm -f *system_b*
				romzip=""
				romchunk=$(ls | grep chunk | sort)
			fi
			if [[ $romzip ]]; then
				banner
				echo "$bluet$t_general_extracting $romzip$normal"
				$p7z x $romzip 2>/dev/null >> $logs/zip.log
				rm -rf $romdir/META-INF/*.RSA
				rm -rf $romdir/META-INF/*.SF
				rm -rf $romdir/META-INF/*.MF
				rm -rf $romdir/META-INF/com/android
				deviceloc=""
				if [[ -f $sysdir/build.prop && -f $usdir/updater-script ]]; then
					get_devicename
					mkdir -p "$base/tools/devices/$devicename"
					deviceloc="$base/tools/devices/$devicename"
					cd $usdir
					if [[ ! -f "$deviceloc/superr_byname" ]]; then
						mountck=$(grep "/system" updater-script | grep -m 1 "^mount" | gawk '{ print $3 }' | sed 's/\"//g; s/\/system//g; s/\,//g; s:\/:\\/:g')
						if [[ $(echo "$mountck" | grep mmcblk) ]]; then
							echo "$mountck \/system" > "$deviceloc/superr_mmc"
							bootmmc=$(grep boot.img updater-script | cut -d'"' -f4 | sed 's:\/:\\/:g')
							echo "$bootmmc \/boot" >> "$deviceloc/superr_mmc"
							echo "mmc" > "$deviceloc/superr_byname"
						elif [[ $(echo "$mountck" | grep by-name) ]]; then
							echo "$mountck" > "$deviceloc/superr_byname"
						fi
					fi
					permtype=""
					if [[ $(grep ^set_perm_recursive updater-script) ]]; then
						permtype="set_perm"
						echo "$permtype" > $prfiles/permtype
						grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
					elif [[ $(grep ^set_metadata_recursive updater-script) ]]; then
						permtype="set_metadata"
						echo "$permtype" > $prfiles/permtype
						grep ^$permtype updater-script | grep -v "/tmp/" > $prfiles/$permtype
					fi
					get_symlinks
					rm -rf $prfiles/debloat_test
					rm -rf $prfiles/debloat_test_custom
					update_project
				fi
			fi
		fi
		if [[ $romchunk ]]; then
			banner
			echo "$bluet$t_extract_convert_chunk$normal"
			if [[ $(echo "$romchunk" | grep "sparsechunk") ]]; then
				$simg2img $(echo "$romchunk" | tr '\n' ' ') system.img.raw >> $logs/main.log
				rm -rf *chunk*
				banner
				echo "$bluet$t_extract_fix_img$normal"
				$tools/source/fixmoto.py system.img.raw system.img >> $logs/main.log
				if [[ -f system.img ]]; then
					rm -rf system.img.raw
				else
					mv system.img.raw system.img
				fi
			else
				$simg2img *chunk* system.img
				rm -rf *chunk*
			fi
			romimg="system.img"
		fi
		if [[ $romwin && $(echo $romwin | grep "system_img\|system.img\|systemimg") ]]; then
			mv $romwin system.img
			romimg="system.img"
			romwin=""
			if [[ -f boot.emmc.win ]]; then
				cp boot.emmc.win boot.img
			fi
		elif [[ $romwin ]]; then
			if [[ $(ls | grep .win | grep -v boot | wc -l) -gt "1" ]]; then
				romwin=$(ls | grep .win | grep -v boot)
				winsystem=$(echo "$romwin" | grep 000)
			else
				winsystem="$romwin"
			fi
			if [[ -f boot.emmc.win ]]; then
				cp boot.emmc.win boot.img
			fi
			if [[ ! $(tar -tf $winsystem -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
				mkdir system
				tosystem="1"
			fi
			banner
			echo "$bluet$t_extract_general $romname ...$normal"
			cd $romdir
			echo "$romwin" | while read line; do
				if [[ $tosystem = "1" ]]; then
					tar -xf $line -C system >/dev/null 2>/dev/null >> $logs/zip.log
				else
					tar -xf $line >/dev/null 2>/dev/null >> $logs/zip.log
				fi
			done
		fi
		if [[ $romtgz ]]; then
			banner
			echo "$bluet$t_extract_check_firm$normal"
			if [[ $(echo "$romtgz" | grep .tgz) ]]; then
				tar -tzf $romtgz 2>&1 > $logs/tarlist
				extype="tgz"
			elif [[ $(echo "$romtgz" | grep .zip) ]]; then
				tgzdevice=$(echo "$romtgz" | cut -d"-" -f1)
				$p7z l $romtgz | grep "$tgzdevice" | gawk '{print $6}' 2<&1 > $logs/tarlist
				extype="zip"
			fi
			if [[ ! $(cat $logs/tarlist | grep "image-") ]]; then
				rm -rf $logs/tarlist
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo -e "$redt$t_extract_tgz_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				return
			fi
			eximage=$(cat $logs/tarlist | grep "image-")
			exdir=$(dirname $eximage)
			banner
			echo "$bluet$t_extract_files$normal"
			if [[ $extype = "tgz" ]]; then
				tar -xf $romtgz $eximage 2>&1 > $logs/zip.log
			elif [[ $extype = "zip" ]]; then
				$p7z x $romtgz $eximage 2>&1 > $logs/zip.log
			fi
			mv $romdir/$exdir/* $romdir/
			rm -rf $exdir
			imagezip=$(ls | grep image-*.zip)
			banner
			echo "$bluet$t_extract_img$normal"
			$p7z e $imagezip system.img boot.img vendor.img 2>&1 > $logs/zip.log
			rm -rf $imagezip $logs/tarlist
			romtgz=""
			romimg="system.img"
		fi
		if [[ $rommd5 ]]; then
			romnomd5=$(echo "$rommd5" | rev | cut -d"." -f2- | rev)
			mv $rommd5 $romnomd5
			if [[ $($p7z l $romnomd5 | grep system.img.ext4) ]]; then
				echo "$bluet$t_extract_img$normal"
				$p7z x $romnomd5 system.img.ext4 cache.img.ext4 boot.img 2>&1 > $logs/zip.log
				mv system.img.ext4 system.img
				mv cache.img.ext4 cache.img
				rommd5=""
				romimg="system.img"
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_md5_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				return
			fi
		fi
		if [[ $romimg ]]; then
			romimgdir=$(echo $romimg | rev | cut -d'.' -f2- | rev)
			extractimg="$romimgdir"
			imgextract
			if [[ -f $romdir/$romimgdir/build.prop && ! $romimgdir = "system" && ! $romimg = "vendor.img" ]]; then
				mv $romdir/$romimgdir $sysdir
			fi
		fi
		if [[ $romtar ]]; then
			if [[ $(tar --numeric-owner -tvf $romtar 2>&1 | gawk '{ print $2, $6 }' | grep -m 1 "/bin" | gawk '{ print $1 }') != "0/2000" ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_tar_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
				cd $base
				return
			fi
			banner
			echo "$bluet$t_extract_general $romtar ...$normal"
			cd $romdir
			if [[ ! $(tar -tf $romtar -P 2>&1 | grep -o -m 1 system/) = "system/" ]]; then
				mkdir system
				tar -xf $romtar -C system 2>/dev/null >> $logs/zip.log
			else
				tar -xf $romtar 2>/dev/null >> $logs/zip.log
			fi
		fi
		if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
			sysdir="$romdir/system/system"
		elif [[ -f $romdir/system/system/build.prop ]]; then
			mv $romdir/system/system/* $romdir/system/
			rm -rf $romdir/system/system
			sysdir="$romdir/system"
		else
			sysdir="$romdir/system"
		fi
		if [[ -f $sysdir/xbin/su || -f $sysdir/bin/su ]]; then
			touch $prfiles/root_existing
		fi
		if [[ $romimg || $romwin || $romtar ]] && [[ ! $(echo "$romimg" | grep "cache.img\|hidden.img\|data.img\|vendor.img\|generic.img") ]]; then
			if [[ -f $sysdir/build.prop ]]; then
				if [[ -f cache.img ]]; then
					banner
					choice=""
					read -n 1 -p "$t_extract_cache_extract_q" choice
					if [[ $choice = "y" ]]; then
						extractimg="cache"
						imgextract
						if [[ -d cache && $(grep "ro.product.manufacturer" $sysdir/build.prop | cut -d"=" -f2) = "samsung" ]]; then
							choice=""
							echo ""
							echo -e "$t_extract_cache_include_q"
							read -n 1 -p "" choice
							echo ""
							if [[ $choice = "y" ]]; then
								banner
								echo "$bluet$t_extract_cache$normal"
								echo ""
								cscfull=$(find cache -name "*.zip")
								cscdir=$(echo $cscfull | rev | cut -d"/" -f2- | rev)
								csczip=$(echo $cscfull | rev | cut -d"/" -f1 | rev)
								cd $cscdir
								$p7z x $csczip 2>/dev/null >> $logs/zip.log
								find system -type f | while read line; do
									cscdirname=$(dirname "$line")
									mkdir -p $romdir/$cscdirname
									mv "$line" "$romdir/$line"
								done
								cd $romdir
								rm -rf cache
							fi
						fi
					fi
				fi
				cd $romdir
				if [[ $(ls | grep "\.img$" | grep -v "system\|cache\|boot\|recovery") ]]; then
					for line in $(ls | grep "\.img$" | grep -v "system\|cache\|boot\|recovery"); do
						line2=$(echo "$line" | sed 's/\.img//')
						if [[ ! $(grep "$line2" $prfiles/exdirs 2>/dev/null) ]]; then
							banner
							choice=""
							echo "$t_extract_extra_extract$yellowt$line$normal$t_extract_extra_q"
							read -n 1 -p "" choice
							if [[ $choice = "y" ]]; then
								extractimg="$line2"
								imgextract
								if [[ -d $line2 ]]; then
									choice=""
									echo ""
									echo "$t_extract_extra_include"
									read -n 1 -p "$line$t_extract_extra_include_q" choice
									if [[ $choice = "y" ]]; then
										echo "$line2" >> $prfiles/exdirs
									fi
								fi
							fi
						else
							extractimg="$line2"
							imgextract
						fi
					done
				fi
				get_devicename
				mkdir -p "$base/tools/devices/$devicename"
				deviceloc=""
				deviceloc="$base/tools/devices/$devicename"
				rm -rf $prfiles/permtype
				permtype=""
				cp -R $tools/updater/META-INF $romdir/
				cp -R $tools/updater/install $romdir/
				cd $romdir
				if [[ ! $cyg ]]; then
					link1=$(find system vendor -type l -printf "%l\n" 2>/dev/null | sed 's/^/symlink(\"/; s/$/\", /')
					link2=$(find system vendor -type l 2>/dev/null | sed 's/^/\"\//; s/$/\");/')
					paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
					if [[ $(grep "symlink(\"egl/" $prfiles/symlinks) ]]; then
						sed -i 's/symlink(\"egl/symlink(\"\/egl/' $prfiles/symlinks
					fi
					cp $prfiles/symlinks $prfiles/symlinks.orig
					if [[ -d vendor ]]; then
						find system vendor -type l -exec rm -f {} \;
					else
						find system -type l -exec rm -f {} \;
					fi
				fi
				rm -rf debloat_test debloat_test_custom
				update_project
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_rom_fail$normal"
				echo ""
				read -p "$t_enter_main_menu"
			fi
		fi
		cd $base
		break
	done
}
findfstab() {
	fstab=""
	dircur="$(pwd)"
	fsdir="$romdir/system\n$romdir/bootimg/ramdisk\n$romdir/system/vendor/etc\n$romdir/vendor/etc\n$romdir/recoveryimg/ramdisk/etc"
	while read i; do
		if [[ $fstab ]]; then
			break
		fi
		if [[ ! -d "$i" ]]; then
			continue
		fi
		cd $i
		fstmp=$(${usesudo}ls | grep "fstab" | grep -v "goldfish\|ranchu\|charger\|zram\|nodata\|\.fwup\|\.fota\|mofd_v1\|\.ftm\|\.sdboot")
		if [[ $fstmp ]]; then
			while read f; do
				if [[ $(${usesudo}grep "/system" "$i/$f" | grep -v "^#") ]]; then
					fstab="$i/$f"
					break
				fi
			done <<< "$(echo "$fstmp")"
			if [[ ! $fstab ]]; then
				while read f; do
					if [[ $(${usesudo}grep "/data" "$i/$f" | grep -v "^#") ]]; then
						fstab="$i/$f"
						break
					fi
				done <<< "$(echo "$fstmp")"
			fi
		fi
	done <<< "$(echo -e "$fsdir")"
	if [[ ! $fstab ]]; then
		fstab=1
		echo "NOTICE: No fstab in ramdisk" >> $logs/boot.log
	fi
	cd $dircur
}
findimgsize() {
	choice=""
	while [[ ! $choice ]]; do
		cd $romdir
		imgfile=$(echo $whatimg | cut -c1-3)
		if [[ -f "$deviceloc/${imgfile}imgsize" ]]; then
			tmpsize=$(cat "$deviceloc/${imgfile}imgsize")
			break
		fi
		banner
		echo "$yellowb$redt$t_extract_cho_part_detect$normal $greenb$whatimg$normal"
		echo ""
		echo "1) $t_extract_adb_shell"
		echo "2) $t_extract_project_dir $whatimg"
		echo "3) $t_extract_manual"
		if [[ -f $whatimg.img ]]; then
			echo "4) $whatimg.img"
		fi
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then #START Device through adb shell
			banner
			echo -e "$t_byname_usb_debug"
			echo ""
			echo -e "$t_byname_usb_debug_root"
			echo ""
			read -n 1 -p "$t_general_continue_q" reply
			if [[ ! $reply = "y" ]]; then
				return
			fi
			banner
			echo "$bluet$t_extract_detect $whatimg ...$normal"
			byname=$(cat "$deviceloc/superr_byname")
			byname2=$(echo "$byname" | sed 's/\\//g')
			if [[ -f "$deviceloc/superr_mmc" ]]; then
				imgblock=$(grep $whatimg "$deviceloc/superr_mmc" | gawk '{ print $1 }' | cut -d"/" -f4)
			else
				if [[ -f "$deviceloc/superr_appbyname" ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="APP"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VNR"
					elif [[ $whatimg = "data" ]]; then
						newname="UDA"
					fi
				elif [[ -f "$deviceloc/superr_capbyname" ]]; then
					if [[ $whatimg = "system" ]]; then
						newname="SYSTEM"
					elif [[ $whatimg = "vendor" ]]; then
						newname="VENDOR"
					elif [[ $whatimg = "data" ]]; then
						newname="USERDATA"
					fi
				else
					newname="$whatimg"
				fi
				$adb "wait-for-device"
				imgblock=$($adb shell su -c "ls -al $byname2" | grep $newname | tr " " "\n" | grep mmcblk | cut -d"/" -f4)
			fi
			$adb "wait-for-device"
			rawsize=$($adb shell su -c "cat /proc/partitions" | grep "$imgblock" | gawk '{ print $3 }')
			if [[ ! $rawsize ]]; then
				banner
				echo "$redt$t_error_mess$normal"
				echo ""
				read -p "$t_enter_cho_another_detection"
				choice=""
				continue
			fi
			tmpsize=$(echo $(($rawsize * 1024)))
		elif [[ $choice = "2" ]]; then #START Project $whatimg directory (BETA)
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo -e "$t_extract_beta"
			echo ""
			choice=""
			read -n 1 -p "$t_general_cont_anyway_q" choice
			if [[ ! $choice = "y" ]]; then
				return
			fi
			imgtest=$(du -hbd 0 $romdir/$whatimg | gawk '{ print $1 }')
			tmpsize=$(($imgtest + 75000000))
		elif [[ $choice = "3" ]]; then #START Enter it manually in bytes
			banner
			imgsize=""
			echo "$t_extract_manual_bytes $whatimg:"
			read whatsize
			if [[ ! $whatsize || ! $whatsize =~ ^[0-9]+$ ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$whatimg $t_extract_detect_fail$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			else
				tmpsize="$whatsize"
			fi
		elif [[ $choice = "4" ]]; then #START $whatimg.img
			if [[ -f $whatimg.img ]]; then
				banner
				echo "$bluet$t_extract_sparse_convert$normal"
				$simg2img $whatimg.img $whatimg.img-2 2>/dev/null
				if [[ ! -s $whatimg.img-2 ]]; then
					rm -rf $whatimg.img-2
				else
					mv $whatimg.img-2 $whatimg.img
				fi
				tmpsize=$(wc -c $whatimg.img | gawk '{ print $1 }')
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_extract_img_fail $whatimg.img$normal"
				echo ""
				read -p "$t_enter_build_menu"
				return
			fi
		elif [[ $choice = "q" ]]; then #START Quit
			echo ""
			echo ""
			exit
		fi
	done
	if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) ]]; then
		echo "$whatimg $tmpsize" >> $prfiles/exdirsb
		return
	fi
	export ${imgfile}size=$tmpsize
}
get_byname() {
	choice=""
	while [[ ! $choice ]]; do
		if [[ -s "$deviceloc/superr_byname" ]]; then
			byname=$(cat "$deviceloc/superr_byname")
			return
		fi
		banner
		echo "$t_byname_how_to_get_q"
		echo ""
		echo "1) $t_menu_byname_detect_boot"
		echo "2) $t_menu_byname_detect_device"
		echo "3) $t_menu_byname_detect_manual"
		echo "4) $t_menu_byname_detect_mmc"
		echo "${yellowt}m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "q" ]] && [[ ! $choice = "m" ]]; then
			choice=""
			continue
		elif [[ $choice = "m" ]]; then
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then
			exit
		elif [[ $choice = "2" ]]; then # START Detect by-name from your device
			banner
			echo -e "$t_byname_usb_debug"
			echo ""
			read -p "$t_enter_ready"
			banner
			echo "${bluet}...$normal"
			get_devicename
			echo "$devicename" > "$deviceloc/devicename"
			byname1=$($adb shell "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
			if [[ ! $byname1 ]]; then
				byname1=$($adb shell su -c "find /dev -name by-name 2>/dev/null" | grep -m 1 "")
			fi
			if [[ ! $byname1 ]]; then
				rm -rf "$deviceloc/superr_byname"
				banner
				echo "$redb$yellowt$t_error$normal"
				echo -e "$redt$t_byname_error_device$normal"
				echo ""
				read -p "$t_enter_continue"
				choice=""
				continue
			fi
			if [[ $($adb shell "mount" | grep "/SYSTEM") ]]; then
				touch "$deviceloc/superr_capbyname"
			elif [[ $($adb shell "mount" | grep "/APP") ]]; then
				touch "$deviceloc/superr_appbyname"
			fi
			echo "$byname1" | sed 's:/:\\/:g' > "$deviceloc/superr_byname"
			rm -rf "$deviceloc/devicename" "$deviceloc/build.prop" $prfiles/permtype_old
			byname=$(cat "$deviceloc/superr_byname")
		elif [[ $choice = "1" ]]; then # START Detect by-name from the boot.img
			if [[ ! -f $romdir/boot.img && ! -f $romdir/kernel.elf && ! -f $romdir/recovery.img ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo -e "$redt$t_byname_no_boot$normal"
				echo ""
				read -p "$t_enter_continue"
				choice=""
				continue
			fi
			banner
			if [[ ! -d $romdir/bootimg/ramdisk && ! -d $romdir/recoveryimg/ramdisk ]]; then
				choose_img
				bootext="1"
				boot_unpack
				if [[ ! -d $romdir/${chosenimg}img/ramdisk ]]; then
					banner
					echo "$redb$yellowt$t_error$normal"
					echo "$redt$t_byname_no_files$normal"
					echo ""
					read -p "$t_enter_continue"
					rm -rf "$deviceloc/superr_byname"
					choice=""
					continue
				fi
			fi
			if [[ -f $romdir/system/init.rc ]]; then
				cd $romdir/system
			else
				cd $romdir/${chosenimg}img/ramdisk
			fi
			findfstab
			if [[ $fstab != 1 ]]; then
				bntest=$(${usesudo}grep -v "^#" $fstab | sed 's/\r$//')
				if [[ $(echo "$bntest" | grep "by-name/system") ]]; then
					echo "$bntest" | grep "by-name/system" | gawk '{ print $1 }' | sed 's/\/system//' > "$deviceloc/superr_byname2"
				elif [[ $(echo "$bntest" | grep "by-name/SYSTEM") ]]; then
					echo "$bntest" | grep "by-name/SYSTEM" | gawk '{ print $1 }' | sed 's/\/SYSTEM//' > "$deviceloc/superr_byname2"
					touch "$deviceloc/superr_capbyname"
				elif [[ $(echo "$bntest" | grep "by-name/APP") ]]; then
					echo "$bntest" | grep "by-name/APP" | gawk '{ print $1 }' | sed 's/\/APP//' > "$deviceloc/superr_byname2"
					touch "$deviceloc/superr_appbyname"
				elif [[ $(echo "$bntest" | grep "by-name/userdata") ]]; then
					echo "$bntest" | grep "by-name/userdata" | gawk '{ print $1 }' | sed 's/\/userdata//' > "$deviceloc/superr_byname2"
				fi
				sed -i 's:/:\\/:g' "$deviceloc/superr_byname2"
				mv "$deviceloc/superr_byname2" "$deviceloc/superr_byname"
				byname=$(cat "$deviceloc/superr_byname")
				rm -rf $prfiles/permtype_old
			fi
			${usesudo}rm -rf $romdir/bootimg $romdir/recoveryimg
			if [[ ! $byname ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_boot_fail"
				echo "$t_byname_try_recovery$normal"
				echo ""
				read -p "$t_enter_continue"
				rm -rf "$deviceloc/superr_byname"
				choice=""
				continue
			fi
		elif [[ $choice = "3" ]]; then # START Enter it manually
			banner
			echo "$t_byname_detect_manual"
			echo ""
			echo "$greenb$t_example$normal"
			echo ""
			echo "${yellowt}/dev/block/bootdevice/by-name$normal"
			echo ""
			read -e byname2
			if [[ ! $byname2 ]]; then
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_byname_no_byname$normal"
				echo ""
				read -p "$t_enter_continue"
				choice=""
				continue
			else
				echo "$byname2" > "$deviceloc/superr_byname"
				sed -i 's:/:\\/:g' "$deviceloc/superr_byname"
				byname=$(cat "$deviceloc/superr_byname")
				rm -rf $prfiles/permtype_old
			fi
		elif [[ $choice = "4" ]]; then # START Create mmc from recovery.img
			banner
			echo "$bluet$t_byname_create_mmc$normal"
			if [[ ! -d $romdir/recoveryimg/ramdisk ]]; then
				if [[ -f $romdir/recovery.img ]]; then
					bootext="1"
					chosenimg2="recovery.img"
					chosenimg="recovery"
					boot_unpack
				else
					banner
					echo "$redb$yellowt$t_error$normal"
					echo "$redt$t_byname_need_recovery$normal"
					echo ""
					read -p "$t_enter_continue"
					choice=""
					continue
				fi
			fi
			cd $romdir/recoveryimg/ramdisk/etc
			findfstab
			if [[ $fstab != 1 ]]; then
				mmctest=$(${usesudo}grep -v "^#" $fstab | sed 's/\r$//')
				echo -e "system\nboot\ndata\ncache\nrecovery\nmodem\nvendor" | while read line; do
					if [[ ! $(echo "$mmctest" | grep "$line") ]]; then
						continue
					fi
					mmc2="/$line"
					if [[ $(echo "$mmctest" | grep "$line" | gawk '{ print $1 }' | grep "/dev/") && $(echo "$mmctest" | grep "$line" | gawk '{ print $2 }' | grep "$line") ]]; then
						mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $1}')
					elif [[ $(echo "$mmctest" | grep "$line" | gawk '{ print $3 }' | grep "/dev/") && $(echo "$mmctest" | grep "$line" | gawk '{ print $1 }' | grep "$line") ]]; then
						mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $3}')
					elif [[ $(echo "$mmctest" | grep "$line" | gawk '{ print $1 }' | grep "$mmc2") ]]; then
						mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $2}')
					elif [[ $(echo "$mmctest" | grep "$line" | gawk '{ print $2 }' | grep "$mmc2") ]]; then
						mmc1=$(echo "$mmctest" | grep "$line" | gawk '{print $1}')
					else
						continue
					fi
					echo "$mmc1 $mmc2" | sed 's:/:\\/:g' >> "$deviceloc/superr_mmc"
				done
			fi
			if [[ ! -s "$deviceloc/superr_mmc" ]]; then
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_no_mmc$normal"
				echo ""
				read -p "$t_enter_continue"
				choice=""
				continue
			fi
			${usesudo}rm -rf $romdir/recoveryimg
			if [[ -s "$deviceloc/superr_mmc" ]]; then
				echo "mmc" > "$deviceloc/superr_byname"
				byname=$(cat "$deviceloc/superr_byname")
			else
				rm -rf "$deviceloc/superr_mmc"
				banner
				echo "$redb$yellowt$t_error$normal"
				echo "$redt$t_byname_recovery_fail"
				echo "$t_byname_try_boot$normal"
				echo ""
				read -p "$t_enter_continue"
				choice=""
				continue
			fi
		fi
	done
}
get_contexts() {
	docon() {
		if [[ ! -f $prfiles/file_contexts ]]; then
			local c="/file_contexts"
			local b="/file_contexts.bin"
			local p="/plat_file_contexts"
			local n="/nonplat_file_contexts"
			
			for f in "$romdir/system" "$romdir/system/system" "$romdir/bootimg/ramdisk" "$romdir/recoveryimg/ramdisk" "$romdir/system/etc/selinux" "$romdir/system/system/etc/selinux" "$romdir/vendor/etc/selinux" "$romdir/output"; do
				if [[ -f "$f$c" ]]; then
					${usesudo}cp "$f$c" "$prfiles/"
					break
				fi
				if [[ -f "$f$b" ]]; then
					${usesudo}cp "$f$b" "$prfiles/"
					break
				fi
				if [[ -f "$f$p" ]]; then
					cat "$f$p" >> "$prfiles$c"
				fi
				if [[ -f "$f$n" ]]; then
					cat "$f$n" >> "$prfiles$c"
				fi
			done
		fi
	}
	docon
	if [[ ! -f $prfiles/file_contexts && ! -f $prfiles/file_contexts.bin && -f $romdir/boot.img ]]; then
		chosenimg="boot"
		chosenimg2="boot.img"
		bootext="1"
		boot_unpack
		docon
		${usesudo}rm -rf $romdir/bootimg
	fi
	if [[ -f $prfiles/file_contexts.bin ]]; then
		cp $tools/boot/file_contexts $prfiles/file_contexts
		contest=$(strings $prfiles/file_contexts.bin | sed -e '/^u:/,/\//!d' | grep -v "abcd")
		paste -d '\t' <(echo "$contest" | grep -v "^u:") <(echo "$contest" | grep "^u:") | grep -v "S2RP\|ERCP" >> $prfiles/file_contexts
		rm -rf $prfiles/file_contexts.bin
	fi
	if [[ -f $prfiles/file_contexts ]]; then
		${usesudo}chown -h $myuser:$myuser $prfiles/file_contexts
	fi
}
get_devicename() {
	devicename=""
	while read i; do
		if [[ ! -f $i ]]; then
			continue
		fi
		while read x; do
			if [[ $(grep "$x=" $i) ]]; then
				devicename="$(grep -m 1 "$x=" $i | cut -d"=" -f2)"
				devicechk="$x"
				break
			fi
		done <<< "$(echo -e "ro.product.device\nro.build.product\nro.product.name")"
	done <<< "$(echo -e "$sysdir/build.prop\n$romdir/build.prop")"
	if [[ ! "$devicename" ]]; then
		while read i; do
			if [[ ! -f $i ]]; then
				continue
			fi
			devicename="$(grep -m 1 "ro.build.description=" $i | cut -d"=" -f2 | cut -d'-' -f1)"
			devicechk="ro.product.device"
			break
		done <<< "$(echo -e "$sysdir/build.prop\n$romdir/build.prop")"
	fi
}
get_heapsize() {
	if [[ -f $tools/heapsize ]]; then
		heapsize=$(cat $tools/heapsize)
	else
		heapsize=$(grep MemTotal /proc/meminfo | gawk '{ print $2/1024-500 }' | cut -d"." -f1)
	fi
}
get_sig() {
	if [[ ! -f $prfiles/signature ]]; then
		while [[ ! $signature1 ]]; do
			banner
			echo -e "$bluet$t_sig_info$normal"
			echo ""
			read -e signature1
			if [[ $(echo "$signature1" | grep "/") ]]; then
				banner
				echo -e "$redt$t_sig_error$normal\n"
				read -p "$t_enter_continue"
				signature1=
			fi
		done
		echo "$signature1" | sed 's/ /_/g; s:/:\\/:g' > $prfiles/signature
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	else
		signature1=$(sed 's/_/ /g' $prfiles/signature)
		signature=$(cat $prfiles/signature)
	fi
}
get_symlinks() {
	grep ^symlink updater-script > $prfiles/symlinks
	grep ",$" $prfiles/symlinks > $prfiles/symlinks2
	if [[ -s $prfiles/symlinks2 ]]; then
		line=""
		cat $prfiles/symlinks2 | while read line; do
			line2=$(echo "$line" | sed 's/\"/\\"/g; s/ /\\ /g; s:\/:\\/:g; s/\[/\\[/g')
			sed -n "/$line2/,/;/p" updater-script > $prfiles/mulsym
			top=$(head -n 1 $prfiles/mulsym | sed 's/\[/\\[/g')
			top2=$(echo "$top" | gawk '{ print $1}')
			bottom=$(tail -n 1 $prfiles/mulsym)
			grep -v "$top" $prfiles/mulsym | grep -v "$bottom" > $prfiles/mulsym2
			grep -v "$bottom" updater-script > updater-script2
			mv updater-script2 updater-script
			echo "$top" | tr ',' '\n' | grep -v ^symlink >> $prfiles/mulsym2
			if [[ $(echo "$bottom" | tr -cd , | wc -c) -gt "0" ]]; then
				echo "$bottom" | tr ',' '\n' | sed "s/);//" >> $prfiles/mulsym2
			else
				echo "$bottom" | sed "s/);//" >> $prfiles/mulsym2
			fi
			cat $prfiles/mulsym2 | tr ',' '\n' | sed 's/^ *//; s/ *$//; /^$/d' | sort > $prfiles/mulsym3
			rm -rf $prfiles/mulsym2
			mv $prfiles/mulsym3 $prfiles/mulsym
			for symbuild in $(cat $prfiles/mulsym); do
				echo "$symbuild" | sed "s/^/$top2 /; s/$/);/" >> $prfiles/mulsym2
			done
			cat $prfiles/mulsym2 >> $prfiles/symlinks
			rm -rf $prfiles/mulsym2
			rm -rf $prfiles/mulsym
		done
		grep -v ",$" updater-script > updater-script2
		mv updater-script2 updater-script
		grep -v ",$" $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
		sed 's:\\\[:\[:g' $prfiles/symlinks > $prfiles/symlinks2
		mv $prfiles/symlinks2 $prfiles/symlinks
	fi
	rm -rf $prfiles/symlinks2
	cp $prfiles/symlinks $prfiles/symlinks.orig
}
grab_devices() {
	reply=""
	timestamp=$(date +%m-%d-%Y-%H:%M:%S)
	banner
	echo -e "$bluet$t_zipdev_info"
	echo ""
	echo "$yellowt$base$normal"
	echo ""
	read -n 1 -p "$t_general_continue_q" reply
	if [[ ! $reply = "y" ]]; then
		cd $base
		main="1"
		return
	fi
	cd $base
	mkdir tempdevices
	ls tools/devices | sort | while read line; do
		if [[ ! $(grep "$line" .gitignore) ]]; then
			cp -r "$base/tools/devices/$line" "$base/tempdevices/"
		fi
	done
	if [[ $(ls tempdevices) ]]; then
		banner
		echo "$bluet$t_zipdev_building$normal"
		cd tempdevices
		$p7z a -tzip -mx5 DEVICES-$timestamp.zip * 2>/dev/null >> $logs/zip.log
		mv DEVICES-$timestamp.zip $base/
		cd $base
		rm -rf tempdevices
		banner
		echo "$greent$t_zipdev_finished"
		echo ""
		echo "$yellowt$base/DEVICES-$timestamp.zip"
		echo ""
		echo -e "$greent$t_zipdev_upload$normal"
		echo ""
		read -p "$t_enter_main_menu"
		main="1"
		return
	else
		rm -rf tempdevices
		banner
		echo "$redb$yellowt$bold$t_info$normal"
		echo "$redt$t_zipdev_no_new$normal"
		echo ""
		read -p "$t_enter_main_menu"
		main="1"
		return
	fi
}
imgextract() {
	banner
	echo "$bluet$t_extract_sparse_convert$normal"
	$simg2img ${extractimg}.img ${extractimg}.img-2 >/dev/null
	if [[ ! -s ${extractimg}.img-2 ]]; then
		rm -rf ${extractimg}.img-2
	else
		mv ${extractimg}.img-2 ${extractimg}.img
	fi
	banner
	if [[ $cyg || $bashwin ]]; then
		echo "$bluet$t_extract_copy_e ${extractimg} ...$normal"
		$imgextractor ${extractimg}.img ${extractimg} 2>&1 >/dev/null
		gawk '{print $1, $5}' ${extractimg}_statfile.txt | grep ". ." > symtest
		link1=$(gawk '{print $2}' symtest | sed 's/^/symlink(\"/; s/$/\", /')
		link2=$(gawk '{print $1}' symtest | sed 's/^/\"\//; s/$/\");/')
		paste -d '' <(echo "$link1") <(echo "$link2") | sort > $prfiles/symlinks
		cp $prfiles/symlinks $prfiles/symlinks.orig
		gawk '{print $1}' symtest | while read line; do
			rm -rf $line
		done
		if [[ -f system/build.prop ]]; then
			get_contexts
			cp ${extractimg}_statfile.txt >> ${extractimg}_statfile
			gawk '{print $1}' symtest | while read line; do
				grep -v "$line" ${extractimg}_statfile > ${extractimg}_statfile2
				mv ${extractimg}_statfile2 ${extractimg}_statfile
			done
			grep -v "system/system/" ${extractimg}_statfile | while read line; do
				cyfile=$(echo "$line" | gawk '{print $1}')
				cyuid=$(echo "$line" | gawk '{print $2}')
				cygid=$(echo "$line" | gawk '{print $3}')
				cymode=$(echo "$line" | gawk '{print $4}')
				cycon=$(sed 's:\\::g' $prfiles/file_contexts | grep "lost+found" | gawk '{print $2}')
				echo "set_metadata(\"/$cyfile\", \"uid\", $cyuid, \"gid\", $cygid, \"mode\", $cymode, \"capabilities\", 0x0, \"selabel\", \"$cycon\");" >> $prfiles/root_meta
			done
		fi
		rm -rf ${extractimg}_statfile.txt symtest ${extractimg}_statfile
	else
		echo "$bluet$t_extract_mount_e ${extractimg}.img ...$normal"
		mkdir output
		${usesudo2}mount -t ext4 -o loop ${extractimg}.img output/
		banner
		echo "$bluet$t_extract_copy_e ${extractimg} ...$normal"
		mkdir ${extractimg}
		${usesudo2}cp -R output/* ${extractimg}/
		${usesudo2}chown -hR $myuser:$myuser $romdir/${extractimg}
		${usesudo2}chmod -R a+rwX $romdir/${extractimg}
		apitmp1=$(find system -name build.prop 2>/dev/null | grep -m 1 "")
		if [[ -f $apitmp1 ]]; then
			apitmp=$(grep "ro.build.version.sdk" "$apitmp1" | cut -d"=" -f2)
		else
			apitemp=""
		fi
		banner
		echo "$bluet$t_cust_prep$normal"
		if [[ $apitmp -ge "19" ]]; then
			local getmeta=$($tools/source/getmeta.py -s "$romdir/output" "$extractimg")
			if [[ $extractimg = "system" || $extractimg = "vendor" ]]; then
				if [[ $extractimg = "system" ]]; then
					if [[ -f output/init.rc && -d output/system/app ]]; then
						echo "$getmeta" | grep -v "system/system\|system/ " | while read i; do
							local thefile=$(echo "$i" | gawk '{print $1}')
							local uid=$(echo "$i" | gawk '{print $2}')
							local gid=$(echo "$i" | gawk '{print $3}')
							local mode=$(echo "$i" | gawk '{print $4}')
							local cap=$(echo "$i" | gawk '{print $5}')
							local con=$(echo "$i" | gawk '{print $6}')
							echo "set_metadata(\"/$thefile\", \"uid\", $uid, \"gid\", $gid, \"mode\", $mode, \"capabilities\", $cap, \"selabel\", \"$con\");" >> $prfiles/root_meta
						done
						find output/system/bin -type f 2>/dev/null | sed 's/^output/system/' | sort > $prfiles/binblk
						find output/system/vendor/bin -type f 2>/dev/null | sed 's/^output/system/' | sort > $prfiles/vinblk
						cp $tools/updater/set_meta_list2 $prfiles/set_meta_list
					else
						find output/bin -type f 2>/dev/null | sed 's/^output/system/' | sort > $prfiles/binblk
						find output/vendor/bin -type f 2>/dev/null | sed 's/^output/system/' | sort > $prfiles/vinblk
						cp $tools/updater/set_meta_list $prfiles/set_meta_list
					fi
					sed -i "/#BIN/ r $prfiles/binblk" $prfiles/set_meta_list
					sed -i "/#VBIN/ r $prfiles/vinblk" $prfiles/set_meta_list
					rm -rf $prfiles/binblk $prfiles/vinblk
					cat $prfiles/set_meta_list > $prfiles/tmpmetalist
				elif [[ $extractimg = "vendor" ]]; then
					cp $tools/updater/set_meta_listV $prfiles/tmpmetalist
				fi				
				echo "$getmeta" | grep -v "$(grep "$extractimg " <<< "$getmeta" | cut -d':' -f3)" | sort | while read line; do
					i=$(echo "$line" | gawk '{print $1}')
					if [[ ! $(grep "$i$" $prfiles/tmpmetalist) ]]; then
						echo "$i" >> $prfiles/tmpmetalist
					fi
				done
				echo "$getmeta" | grep -v " 0x0 " | sort | while read line; do
					i=$(echo "$line" | gawk '{print $1}')
					if [[ ! $(grep "$i$" $prfiles/tmpmetalist) ]]; then
						echo "$i" >> $prfiles/tmpmetalist
					fi
				done
				echo "$getmeta" | grep -v "0644\ 0x0\ \|0755\ 0x0\ " | sort | while read line; do
					i=$(echo "$line" | gawk '{print $1}')
					if [[ ! $(grep "$i$" $prfiles/tmpmetalist) ]]; then
						echo "$i" >> $prfiles/tmpmetalist
					fi
				done
				cat $prfiles/tmpmetalist | while read line; do
					line2=$(echo "$line" | sed 's/\ -R$//')
					if [[ $extractimg = "system" ]]; then
						set_metadata1="set_metadata1"
					else
						set_metadata1="set_metadataV"
					fi
					if [[ -f "$line2" || -d "$line2" ]]; then
						local i=$(grep "^$line2 " <<< "$getmeta")
						local thefile=$(echo "$i" | gawk '{print $1}')
						local uid=$(echo "$i" | gawk '{print $2}')
						local gid=$(echo "$i" | gawk '{print $3}')
						local mode=$(echo "$i" | gawk '{print $4}')
						local cap=$(echo "$i" | gawk '{print $5}')
						local con=$(echo "$i" | gawk '{print $6}')
						if [[ $(echo "$line" | grep " -R$") ]]; then
							if [[ $(echo "$line2" | grep "/bin$\|/bin/") ]]; then
								fmode="0755"
							else
								fmode="0644"
							fi
							echo "set_metadata_recursive(\"/$thefile\", \"uid\", $uid, \"gid\", $gid, \"dmode\", $mode, \"fmode\", $fmode, \"capabilities\", $cap, \"selabel\", \"$con\");" >> $prfiles/$set_metadata1
						else
							echo "set_metadata(\"/$thefile\", \"uid\", $uid, \"gid\", $gid, \"mode\", $mode, \"capabilities\", $cap, \"selabel\", \"$con\");" >> $prfiles/$set_metadata1
						fi
					fi
				done
			fi
		fi
		${usesudo2}umount output/
		rm -rf $romdir/output $prfiles/set_meta_list $prfiles/tmpmetalist
	fi
	extractimg=""
}

install_binaries() {
	cd $base
	echo ""
	read -n 1 -p "$t_binary_q"
	if [[ ! $REPLY = "y" ]]; then
		exit
	fi
	banner
	echo "$bluet$t_binary_installing$normal"
	cd $tools
	if [[ ! $cyg ]]; then
		if [[ ! -d linux_tools ]]; then
			rm -rf 7z 7z.so aapt adb adb64 make_ext4fs_32 make_ext4fs_64 sdat2img.py simg2img_32 simg2img_64 zipalign
			(wget $dlurl/srk_linux_tools.zip 2>&1) >/dev/null
			unzip srk_linux_tools.zip 2>&1 >/dev/null
			rm -rf srk_linux_tools.zip
		fi
		if [[ ! -d $tools/boot/AIK ]]; then
			cd $tools/boot
			dlinfo="aik.tar.gz AIK-Linux"
			aikdl
			tar -xf aik.tar.gz 2>&1 >/dev/null
			rm -rf aik.tar.gz
			mv AIK-Linux AIK
		fi
	else
		if [[ ! -d cyg_tools ]]; then
			rm -rf aapt.exe adb.exe AdbWinApi.dll AdbWinUsbApi.dll Imgextractor.exe make_ext4fs.exe rimg2sdat.exe simg2img.exe zipalign.exe
			(wget $dlurl/cyg_tools.zip 2>&1) >/dev/null
			$p7z x -y cyg_tools.zip 2>&1 >/dev/null
			rm -rf cyg_tools.zip
		fi
		if [[ ! -d $tools/boot/AIK2 ]]; then
			mkdir -p $tools/boot/AIK2
			cd $tools/boot/AIK2
			dlinfo="aik2.zip Win32"
			aikdl
			$p7z x -y aik2.zip 2>&1 >/dev/null
			rm -rf aik2.zip
		fi
	fi
	if [[ ! -d $tools/smali ]]; then
		cd $tools
		ssurl=$(grep "smali =" $tools/depends/urls | gawk '{print $3}')
		(wget -O srk_smali.zip $ssurl 2>&1) >/dev/null
		$p7z x -y srk_smali.zip 2>&1 >/dev/null
		rm -rf srk_smali.zip
	fi
	if [[ ! -f $tools/root/root_zips/SuperSU.zip ]]; then
		cd $tools/root/root_zips
		ssurl=$(grep "supersu =" $tools/depends/urls | gawk '{print $3}')
		(wget -O SuperSU.zip $ssurl 2>&1) >/dev/null
	fi
	if [[ ! -f $tools/root/busybox/Busybox.zip ]]; then
		cd $tools/root/busybox
		dlinfo="Busybox.zip https://forum.xda-developers.com/showthread.php?t=2239421 UPDATE-Busybox"
		xdareg
	fi
	if [[ $bashwin && ! -f $ttools/Imgextractor.exe ]]; then
		(wget $dlurl/Imgextractor.exe 2>&1) >/dev/null
		mv Imgextractor.exe $ttools/
	fi
	cd $base
	banner
	echo "$greent$t_binary_installed$normal"
	echo ""
	read -p "$t_enter_main_menu"
	return
}
isassertdevices() {
	if [[ -f $usdir/updater-script ]]; then
		assertdevices=$(grep -m 1 abort $usdir/updater-script | gawk '{ print $5 }' | sed 's/\"//g' | sed 's/\\//g')
		assertcustom1=$(grep "assert(getprop" $usdir/updater-script | grep -v "ro.product.device" | cut -d '"' -f2 | tr '\n' ',' | sed 's/,$//')
		if [[ ! $assertcustom1 ]]; then
			assertcustom1="$t_none"
		fi
	fi
}
isbusyboxstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $sysdir/xbin/busybox || -d $romdir/Busybox || -d $romdir/busybox || -d $romdir/BusyBox ]]; then
			if [[ ! -f $prfiles/busybox ]]; then
				touch $prfiles/busybox
			fi
			busyboxstatus1=$(echo "$greent$t_enabled$normal")
		else
			rm -rf $prfiles/busybox
			busyboxstatus1=$(echo "$redt$t_disabled$normal")
		fi
	fi
}
isdataappstatus() {
	if [[ -f $prfiles/data-set_metadata || -f $prfiles/data-sparse_dat || -f $prfiles/data-raw_img ]]; then
		if [[ ! -d $romdir/data ]]; then
			data_apprem
			rom_tools
			return 1
		fi
		dataapp="Yes"
		if [[ -f $prfiles/data-set_metadata ]]; then
			dataapp1=$(echo "$greent$t_enabled: set_metadata${normal}")
		elif [[ -f $prfiles/data-sparse_dat ]]; then
			dataapp1=$(echo "$greent$t_enabled: sparse_dat${normal}")
		elif [[ -f $prfiles/data-raw_img ]]; then
			dataapp1=$(echo "$greent$t_enabled: raw_img${normal}")
		fi
	else
		dataapp="No"
		dataapp1=$(echo "$redt$t_add_support$normal")
	fi
}
isdebloatstatus() {
	if [[ ! -f $prfiles/debloat_list ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/bloat | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_list
		done
	fi
	if [[ ! -s $prfiles/debloat_list ]]; then
		debloatstatus="$t_debloated"
		debloatstatus1=$(echo "${greent}$t_debloated${normal}")
	else
		debloatstatus="$t_bloated"
		debloatstatus1=$(echo "${redt}$t_bloated${normal}")
	fi
}
isdebloatcustomstatus() {
	if [[ ! -f $tools/root/bloat_custom ]]; then
		touch $tools/root/bloat_custom
	fi
	if [[ -s $tools/root/bloat_custom ]]; then
		if [[ ! -f $prfiles/debloat_custom && -s $tools/root/bloat_custom ]]; then
			cd $romdir
			debloatcustom=""
			cat $tools/root/bloat_custom | while read debloatcustom; do
				( find $debloatcustom -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_custom
			done
		fi
		if [[ ! -s $prfiles/debloat_custom ]]; then
			debloatcustomstatus="$t_debloated"
			debloatcustomstatus1=$(echo "${greent}$t_debloated${normal}")
		else
			debloatcustomstatus="$t_bloated"
			debloatcustomstatus1=$(echo "${redt}$t_bloated${normal}")
		fi
	else
		debloatcustomstatus="$t_debloated"
		debloatcustomstatus1=$(echo "$redt$t_bloat_dir_emply$normal")
	fi
}
isdmverity() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
	elif [[ -f $romdir/system/init.rc ]]; then
		cd $romdir/system
	else
		return 1
	fi
	findfstab
	vdtb=$($tools/source/rmverity.py -s $romdir/${chosenimg}img/split_img/${chosenimg}.img-zImage)
	vfstab=""
	if [[ $fstab != 1 ]]; then
		vfstab=$(${usesudo}grep "verify" $fstab)
	fi
	if [[ $vdtb = "yes" || $vfstab ]]; then
		dmveritystatus="Yes"
		dmveritystatus1="${redt}$t_enabled$normal"
	else
		dmveritystatus="No"
		dmveritystatus1="${greent}$t_disabled$normal"
	fi		
}
isforcee() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
	elif [[ -f $romdir/system/init.rc ]]; then
		cd $romdir/system
	else
		return 1
	fi
	findfstab
	if [[ $fstab != 1 ]]; then
		if [[ $(${usesudo}grep "/data" $fstab | grep "forceencrypt\|forcefdeorfbe\|fileencryption") ]]; then
			forceestatus="Yes"
			forceestatus1="${redt}$t_enabled$normal"
		else
			forceestatus="No"
			forceestatus1="${greent}$t_disabled$normal"
		fi
	else
		forceestatus="1"
		forceestatus1="${redt}N/A$normal"
	fi
}
isfullrom() {
	fullrom=""
	fullrom1=""
	if [[ -d $sysdir ]]; then
		if [[ ! -d $sysdir/lib || ! -d $sysdir/etc || ! -d $sysdir/bin || ! -d $romdir/META-INF ]]; then
			fullrom="No"
			fullrom1=$(echo "$redt$t_no$normal")
		else
			if [[ ! -f $romdir/system/init.rc && ! -f $romdir/boot.img && ! -f $prfiles/noboot ]]; then
				banner
				echo -e "$t_build_no_boot_q"
				read -n 1 -p "" reply
				if [[ ! $reply = "y" ]]; then
					fullrom="No"
					fullrom1=$(echo "$redt$t_no$normal")
					return 1
				else
					touch $prfiles/noboot
					grep -v "boot.img\|boot\ image" $usdir/updater-script > $usdir/updater-script2
					mv $usdir/updater-script2 $usdir/updater-script
				fi
			fi
			fullrom="Yes"
			fullrom1=$(echo "$greent$t_yes$normal")
		fi
	fi
}
isinitd() {
	if [[ -d $romdir/bootimg/ramdisk ]]; then
		cd $romdir/bootimg/ramdisk
	elif [[ -f $romdir/system/init.rc ]]; then
		cd $romdir/system
	else
		initdstatus="1"
		initdstatus1="${redt}N/A$normal"
		return
	fi
	inittest=""
	while read line; do
		inittest=$(${usesudo}grep "init\.d" $line | grep -v "lge_fota\|chargerlogo")
		if [[ $inittest ]]; then
			break
		fi
	done <<< "$(ls | grep .rc$)"

	if [[ $inittest ]]; then
		initdstatus="Yes"
		initdstatus1="$greent$t_enabled$normal"
	else
		initdstatus="No"
		initdstatus1="${redt}$t_disabled$normal"
	fi
}
isinsecure() {
	insectest=""
	if [[ -f $dfprop ]]; then
		insectest=$(${usesudo}grep "ro.secure=0" $dfprop)
	else
		insecurestatus="1"
		insecurestatus1=$(echo "${redt}N/A$normal")
		return
	fi
	if [[ ! $insectest ]]; then
		insecurestatus="No"
		insecurestatus1=$(echo "$redt$t_secure$normal")
	else
		insecurestatus="Yes"
		insecurestatus1=$(echo "$greent$t_insecure$normal")
	fi
}
isknoxstatus() {
	if [[ ! -f $prfiles/debloat_knox ]]; then
		cd $romdir
		debloat=""
		cat $tools/root/knox | while read debloat; do
			( find $debloat -maxdepth 0 2>/dev/null | sed 's/^\.\///' ) >> $prfiles/debloat_knox
		done
	fi
	if [[ ! -s $prfiles/debloat_knox ]]; then
		knoxstatus="No"
		knoxstatus1=$(echo "$greent$t_no_knox$normal")
	else
		knoxstatus="Yes"
		knoxstatus1=$(echo "$redt$t_knox$normal")
	fi
}
isodexstatus() {
	if [[ -d $romdir ]]; then
		if [[ ! $(find $sysdir $romdir/vendor -name *.odex 2>/dev/null) && ! -f $sysdir/odex.sqsh && ! $(find $framedir -name boot.oat) ]]; then
			mmode=""
			if [[ $api -ge "23" ]]; then
				if [[ -f $prfiles/deodex_m ]]; then
					mmode=" - oat2dex"
				elif [[ -f $prfiles/deodex_m2 || -f $prfiles/deodex_n2 ]]; then
					mmode=" - smali/baksmali"
				fi
			fi
			odexstatus="Deodexed"
			odexstatus1=$(echo "$greent$t_deodexed$mmode$normal")
		else
			odexstatus="Odexed"
			odexstatus1=$(echo "$redt$t_odexed$normal")
		fi
	fi
}
isrootstatus() {
	if [[ -d $romdir ]]; then
		if [[ -f $sysdir/xbin/su || -d $romdir/SuperSU || -d $romdir/supersu || -d $romdir/rootzip ]]; then
			if [[ ! -f $prfiles/root ]]; then
				touch $prfiles/root
			fi
			rootstatus="Yes"
			rootstatus1=$(echo "$greent$t_rooted$normal")
		else
			rm -rf $prfiles/root
			rootstatus="No"
			rootstatus1=$(echo "$redt$t_no_root$normal")
		fi
	fi
}
issud() {
	if [[ $(grep "su\.d" $usdir/updater-script) && -d $sysdir/su.d ]]; then
		sudstatus="Yes"
		sudstatus1="$greent$t_enabled$normal"
	else
		sudstatus="No"
		sudstatus1="${redt}$t_disabled$normal"
	fi
}
kitchen_update() {
	cd $base
	internet=$(wget -q --tries=10 --timeout=20 --spider http://google.com; echo $?)
	if [[ $internet = "0" ]]; then
		banner
		echo "$bluet$t_update_check_kitchen$normal"
		newinfo=$(wget -qO- "http://srk.ddayweb.com/filemanager.php?file=changelog1.txt" | sed 's:<br />::g')
		newv=$(echo "$newinfo" | head -n 1)
		changelog=$(echo "$newinfo" | head -n 8)
		upcheck=$(echo "$newv" | sed 's/v//; s/\.//g')
		currentv=$(echo "$superrv" | cut -d"-" -f1 | cut -d"_" -f1 | sed 's/v//; s/\.//g; s/^0//')
		if [[ ! $newinfo ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo -e "$redt$t_update_down.$normal"
			echo ""
			read -p "$t_enter_main_menu"
			return
		fi
		if [[ "$currentv" -lt "$upcheck" ]]; then
			choice=""
			while [[ ! $choice ]]; do
				banner
				echo -e "$t_update_update_avail"
				echo ""
				echo "$bluet$t_update_update_cv $redt$superrv"
				echo "$bluet$t_update_update_nv $greent$newv$normal"
				echo ""
				echo "1) $t_update_update_now"
				echo "2) $t_update_update_view"
				echo "${yellowt}m = $t_title_main"
				echo "${magentat}q = $t_menu_quit$normal"
				echo ""
				read -n 1 -p "$t_select" choice

				if [[ ! ${choice} =~ ^[1-2]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
					choice=""
					continue
				elif [[ $choice = "m" ]]; then
					return
				elif [[ $choice = "q" ]]; then
					echo ""
					echo ""
					exit
				elif [[ $choice = "2" ]]; then # START View changelog
					banner
					echo "$greenb$t_update_changelog$normal"
					echo ""
					echo "$yellowt$changelog$normal"
					echo ""
					read -p "$t_enter_kitchen_updater"
					choice=""
					continue
				elif [[ $choice = "1" ]]; then # START Update now
					if [[ -d ".git" ]]; then
						banner
						echo "$bluet$t_update_updating$normal"
						echo ""
						rm -rf $tools/depmet
						git pull
						superrv=$(grep "SuperR's Kitchen v" README.md | gawk '{ print $4 }' | sed 's/*//g')
						currentv=$(echo "$superrv" | cut -d"-" -f1 | cut -d"_" -f1 | sed 's/v//; s/\.//g; s/^0//')
						if [[ "$currentv" -lt "$upcheck" ]]; then
							banner
							echo "$redb$yellowt$bold$t_error$normal"
							echo -e "$redt$t_update_fail$normal"
							echo ""
							read -p "$t_enter_main_menu"
							return
						fi
						if [[ $(ls $tools | grep "\-srk" | grep -v "english") ]]; then
							lang=$(ls $tools | grep "\-srk" | grep -v "english" | sed 's/-chosen//')
							language_check
						else
							lang="english-srk"
						fi
						source $tools/language/$lang

						cd $tools
						md5fail="$(md5chk md5lin)"
						if [[ $md5fail != "0" ]]; then
							rm -rf linux_tools
						fi
						md5fail="$(md5chk md5aik)"
						if [[ $md5fail != "0" ]]; then
							rm -rf boot/AIK
						fi
						md5fail="$(md5chk md5smali)"
						if [[ $md5fail != "0" ]]; then
							rm -rf smali
						fi
						md5fail="$(md5chk md5su)"
						if [[ $md5fail != "0" ]]; then
							rm -rf root/root_zips/SuperSU.zip
						fi
						md5fail="$(md5chk md5busybox)"
						if [[ $md5fail != "0" ]]; then
							rm -rf root/busybox/Busybox.zip
						fi
						cd $base

						banner
						echo "$greent$t_update_finished$normal"
						echo ""
						read -p "$t_enter_continue"
					else
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo -e "$redt$t_update_no_git$normal"
						echo ""
						read -p "$t_enter_continue"
						return
					fi
				fi
			done
		else
			banner
			echo "$greent$t_update_already$normal"
			echo ""
			read -p "$t_enter_continue"
			return
		fi
		if [[ -f $HOME/Desktop/SuperRs-Kitchen ]]; then
			banner
			echo "$bluet$t_update_check_launcher$normal"
			newzip=$(wget -qO- $dlurl | cat | grep "SRK-Install-Launch" | grep -m 1 .zip | cut -d">" -f2 | cut -d"<" -f1)
			srkil=$(cat $HOME/Desktop/SuperRs-Kitchen | head -n 3 | grep "#v" | sed 's/^#//')
			newv=$(echo "$newzip" | cut -d"_" -f2 | sed 's/\.zip//')
			upcheck=$(echo "$newv" | sed 's/v//; s/\.//g')
			currentv=$(echo "$srkil" | sed 's/v//; s/\.//g')
			if [[ "$currentv" -lt "$upcheck" || ! "$currentv" ]]; then
				banner
				echo -e "$t_update_launcher_avail"
				echo ""
				echo "$t_update_launcher_cv $redt$srkil"
				echo "$t_update_launcher_nv $greent$newv$normal"
				echo ""
				read -n 1 -p "$t_update_q"
				if [[ $REPLY = "y" ]]; then
					banner
					echo "$bluet$t_update_updating$normal"
					cd $HOME/Desktop
					( wget $dlurl/$newzip 2>&1 ) >/dev/null
					if [[ -f $newzip ]]; then
						$p7z x -y $newzip 2>&1 >/dev/null
						rm -rf $newzip
						banner
						echo "$greent$t_update_launcher_finished$normal"
						echo ""
						read -p "$t_enter_continue"
					else
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo "$redt$t_update_problem_download$normal"
						echo ""
						read -p "$t_enter_continue"
						return
					fi
					cd $base
				fi
			fi
		fi
		export updatecheck="1"
		if [[ ! -f $tools/updatecheck-yes && ! -f $tools/updatecheck-no ]]; then
			banner
			choice=""
			read -n 1 -p "$t_update_auto_q" choice
			if [[ $choice = "y" ]]; then
				touch $tools/updatecheck-yes
			else
				touch $tools/updatecheck-no
			fi
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_update_no_internet$normal"
		echo ""
		read -p "$t_enter_main_menu"
		return
	fi
	cd $base
	banner
	echo "${redt}$t_restart$normal"
	echo ""
	read -p "$t_enter_exit"
	exit
}
language_check() {
	banner
	echo "$bluet$t_checking_language $lang ...$normal"
	lang_add=""
	grep "^export" $tools/language/english-srk | while read line; do
		line2=$(echo "$line" | cut -d"=" -f1 | gawk '{print $2}')
		if [[ ! $(grep "$line2" $tools/language/$lang | grep -v "$line2\_") ]]; then
			echo "$line" >> $tools/language/$lang
			lang_add="1"
		fi
	done
	if [[ $lang_add = "1" ]]; then
		banner
		echo -e "$redt$t_lang_added $lang"
		echo "$t_lang_translate$normal"
		echo ""
		echo "$t_enter_continue"
	fi
}
md5chk() {
	cat depends/$1 | while read i; do
		f=$(echo "$i" | gawk '{print $1}')
		omd5=$(echo "$i" | gawk '{print $2}')
		if [[ -f $f ]]; then
			nmd5=$(md5sum $f | gawk '{print $1}')
			if [[ $omd5 != $nmd5 ]]; then
				echo "1"
				return
			else
				continue
			fi
		else
			echo "1"
			return
		fi
	done
	echo "0"
}
misc_tools() {
	choice=""
	while [[ ! $choice ]]; do
		get_heapsize
		if [[ ! -f $tools/heapsize ]]; then
			heapstatus="${heapsize}MB $t_heapsize_auto"
		else
			heapstatus="${heapsize}MB $t_menu_cust_dir"
		fi

		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		if [[ -f $sysdir/build.prop ]]; then
			echo "$bluet$t_startup_version $greent$androidversion$normal"
		else
			echo "$bluet$t_startup_title_no_rom$normal"
		fi
		echo ""
		echo "$yellowb$redt$t_title_misc$normal"
		echo ""
		echo "1) $t_menu_zip_devices"
		echo "2) $t_menu_language"
		echo "3) $t_menu_heapsize ($bluet$t_title_current$greent$heapstatus$normal)"
		echo "4) $t_menu_support"
		echo "5) $t_menu_reset"
		echo "${yellowt}m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice
		echo ""
		echo ""
		if [[ ! ${choice} =~ ^[1-5]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "m" ]]; then # START Main menu
			cd $base
			return
		elif [[ $choice = "q" ]]; then # START Quit
			exit
		elif [[ $choice = "1" ]]; then # START Zip new devices to share
			grab_devices
			return
		elif [[ $choice = "2" ]]; then # START Reset Languages
			rm -f $tools/*-srk-chosen
			banner
			echo -e "$greent$t_reset_language$normal"
			echo ""
			read -p "$t_enter_exit"
			exit
		elif [[ $choice = "3" ]]; then # START Use custom heapsize for java apps
			choice2=""
			while [[ ! $choice2 ]]; do
				banner
				echo "$yellowb$redt$t_heapsize_choose$normal"
				echo ""
				echo "1) $t_heapsize_custom ($bluet$t_title_current$greent$heapstatus$normal)"
				echo "2) $t_heapsize_reset"
				echo "${yellowt}b = $t_menu_back$normal"
				echo ""
				read -n 1 -p "$t_select" choice2
				if [[ ! $choice2 =~ ^[1-2]$ ]] && [[ ! $choice2 = "b" ]]; then
					choice2=""
					continue
				elif [[ $choice2 = "1" ]]; then
					banner
					totalmem=$(grep MemTotal /proc/meminfo | gawk '{ print $2/1024-500 }' | cut -d"." -f1)
					echo -e "$t_heapsize_q $yellowt$totalmem$normal"
					read -p "" reply
					if [[ $reply =~ ^[0-9]+$ ]]; then
						if [[ $reply -gt $totalmem ]]; then
							banner
							echo "$redb$yellowt$bold$t_error$normal"
							echo -e "$redt$t_heapsize_error2$normal"
							echo ""
							echo "$yellowt$t_physical_ram$totalmem$normal"
							echo ""
							read -p "$t_enter_misc_tools_menu"
							choice=""
							break
						fi
						echo "$reply" > $tools/heapsize
					else
						banner
						echo "$redb$yellowt$bold$t_error$normal"
						echo "$redt$t_heapsize_error$normal"
						echo ""
						read -p "$t_enter_misc_tools_menu"
						choice=""
						break
					fi
				elif [[ $choice2 = "2" ]]; then
					rm -rf $tools/heapsize
				fi
			done
			choice=""
			continue
		elif [[ $choice = "4" ]]; then # START Support: Create zip to send
			banner
			echo "$bluet$t_support_create$normal"
			rm -rf $romdir/support.zip
			mkdir -p $romdir/srk_support_zip
			if [[ $cyg ]]; then
				echo "CYGWIN" >> $romdir/srk_support_zip/info
			elif [[ $bashwin ]]; then
				echo "BASHWIN" >> $romdir/srk_support_zip/info
			else
				cat /etc/*-release | grep "DESCRIPTION" | cut -d"=" -f2 | sed 's/\"//g'>> $romdir/srk_support_zip/info
				getconf LONG_BIT >> $romdir/srk_support_zip/info
			fi
			echo "$superrv" >> $romdir/srk_support_zip/info
			cat $prfiles/permtype >> $romdir/srk_support_zip/info
			if [[ $(ls $prfiles | grep "deodex_") ]]; then
				ls $prfiles | grep "deodex_" >> $romdir/srk_support_zip/info
			fi
			cp $usdir/updater-script $romdir/srk_support_zip/
			cp -R $prfiles/logs $romdir/srk_support_zip/
			cp $sysdir/build.prop $romdir/srk_support_zip/
			$p7z a -tzip -mx5 $romdir/support.zip $romdir/srk_support_zip/* 2>/dev/null >> $logs/zip.log
			rm -rf $romdir/srk_support_zip
			banner
			echo "$greent$t_support_finish$normal"
			echo ""
			read -p "$t_enter_misc_tools_menu"
			choice=""
			continue
		elif [[ $choice = "5" ]]; then # START Reset all tools
			cd $tools
			cat depends/deldeps | while read i; do
				rm -rf $i
			done
			cd $base
			banner
			echo "${redt}$t_restart$normal"
			echo ""
			read -p "$t_enter_exit"
			exit
		fi
	done
}
moveoldfiles() {
	mktmptime() {
		echo $timestamp > $prfiles/temptime
		temptime=$(cat $prfiles/temptime)
		mkdir -p $prfiles/old_rom_files/$romname.$temptime
	}
	cd $romdir
	movetest="system\|META-INF\|supersu\|rootzip\|busybox\|gapps\|xposed\|magisk\|mod\|data\|vendor\|bootimg\|recoveryimg"
	if [[ $(ls -d  */ | sed 's/\/$//g' | grep "$movetest") ]]; then
		mktmptime
		ls -d  */ | sed 's/\/$//g' | grep "$movetest" | while read line; do
			mv $romdir/$line $prfiles/old_rom_files/$romname.$temptime/
		done
	fi
	if [[ $romzip && $($p7z l $romdir/$romzip | grep boot.img) ]]; then
		if [[ -f $romdir/boot.img ]]; then
			if [[ ! -d $prfiles/old_rom_files/$romname.$temptime ]]; then
				mktmptime
			fi
			mv $romdir/boot.img $prfiles/old_rom_files/$romname.$temptime/
		fi
	fi
	if [[ -d $prfiles/old_rom_files/$romname.$temptime ]]; then
		movelist=$(ls $prfiles/old_rom_files/$romname.$temptime)
		banner
		echo "$bluet$t_extract_moved_old_rom"
		echo "$yellowt$prfiles/old_rom_files/$romname.$temptime $normal"
		echo ""
		echo "$yellowt$movelist$normal"
		echo ""
		rm -rf $prfiles/temptime
		read -p "$t_enter_continue_extracting $romzip$romtar$romimg ..."
	fi
}
new_project() {
	cd $base
	romname=""
	romname1=""
	while [[ ! $romname ]]; do
		banner
		echo "$t_new_q"
		read -e romname1
		export romname=$(echo "$romname1" | sed 's/ /_/g')
		if [[ ! $(ls -d */ | grep "superr_$romname/") ]]; then
			mkdir -p superr_$romname/00_project_files/logs
		else
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_new_already$normal"
			echo ""
			read -p "$t_enter_try_again"
			romname=""
			continue
		fi
	done
}
partadd() {
	banner
	echo "$bluet$t_img_add $whatimg ...$normal"
	permtype=$(cat $prfiles/permtype)
	needpart=""
	partbyname=""
	if [[ -f "$deviceloc/superr_mmc" && $(grep "$whatimg" "$deviceloc/superr_mmc") ]]; then
		partbyname=$(grep "$whatimg" "$deviceloc/superr_mmc" | gawk '{ print $1 }')
	elif [[ -s $deviceloc/superr_byname ]]; then
		partbyname="$whatimg"
	fi
	if [[ $partbyname ]]; then
		if [[ $permtype = "sparse_dat" || $permtype = "raw_img" ]]; then
			cd $usdir
			gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ file_getprop\(\"\/tmp\/config\",\ \"$whatimg\"\),\ \"\/$whatimg\"\,\ \"\");/" updater-script
			gawk 'a=/^ifelse\(is_mounted/{b=1}b&&!a{print "#UNMOUNT1";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT2";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			sed -i "s/#UNMOUNT1/ifelse(is_mounted(\"\/$whatimg\"),\ unmount(\"\/$whatimg\"));/" updater-script
			sed -i "s/#UNMOUNT2/unmount(\"\/$whatimg\");/" updater-script
			if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) ]]; then
				partup=$(echo $whatimg | gawk '{print toupper($0)}')
				if [[ $permtype = "sparse_dat" ]]; then
					if [[ ! $(grep "#$partup" updater-script) ]]; then
						line=$(grep -m 1 "block_image_update(" updater-script | sed 's/\"/\\"/g; s:\/:\\/:g; s/\./\\./g; s/\ /\\ /g')
						sed -i "s:$line:$line\n#$partup:" updater-script
					fi
				else
					if [[ ! $(grep "#$partup" updater-script) ]]; then
						gcmd="a=/system_new/{b=1}b&&!a{print \"#$partup\";b=0}1"
						gawk "$gcmd" updater-script > updater-script2
						mv updater-script2 updater-script
					fi
				fi
				sed -i "/#$partup/ r $tools/updater/extra-$permtype.txt" updater-script
				sed -i "s/#PEXTRA/$whatimg/g" updater-script
				touch $prfiles/${whatimg}img
			elif [[ $whatimg = "data" ]]; then
				if [[ $permtype = "sparse_dat" ]]; then
					gawk 'a=/^block_image_update/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				else
					gawk 'a=/system_new/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				fi
				mv updater-script2 updater-script
				choice=
				while [[ ! $choice ]]; do
					banner
					echo "$yellowb$redt$t_extra_data$normal"
					echo ""
					echo "1) $permtype"
					echo "2) set_metadata"
					echo ""
					read -n 1 -p "$t_extra_data_perm" choice

					if [[ ! ${choice} =~ ^[1-2]$ ]]; then
						choice=
						continue
					elif [[ $choice = "1" ]]; then # START sparse_dat/raw_img data
						sed -i "/#DATA/ r $tools/updater/data-$permtype.txt" updater-script
						touch $prfiles/data-$permtype
					elif [[ $choice = "2" ]]; then # START metadata data
						sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
						touch $prfiles/data-set_metadata
					fi
				done
			fi
		else
			cd $usdir
			gawk 'a=/^mount/{b=1}b&&!a{print "#MOUNT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			sed -i "s/#MOUNT/mount(\"ext4\"\,\ \"EMMC\"\,\ file_getprop\(\"\/tmp\/config\",\ \"$whatimg\"\),\ \"\/$whatimg\");/" updater-script
			gawk 'a=/^ifelse\(is_mounted/{b=1}b&&!a{print "#UNMOUNT1";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			gawk 'a=/^unmount/{b=1}b&&!a{print "#UNMOUNT2";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
			sed -i "s/#UNMOUNT1/ifelse(is_mounted(\"\/$whatimg\"),\ unmount(\"\/$whatimg\"));/" updater-script
			sed -i "s/#UNMOUNT2/unmount(\"\/$whatimg\");/" updater-script
			if [[ ! $whatimg = "data" ]]; then
				gawk 'a=/^format/{b=1}b&&!a{print "#FORMAT";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "s/#FORMAT/format(\"ext4\"\,\ \"EMMC\"\,\ file_getprop\(\"\/tmp\/config\",\ \"$whatimg\"\),\ \"0\"\,\ \"\/$whatimg\");/" updater-script
			fi
			if [[ -s $prfiles/exdirs && $(grep "$whatimg" $prfiles/exdirs) ]]; then
				partup=$(echo $whatimg | gawk '{print toupper($0)}')
				if [[ ! $(grep "#$partup" updater-script) ]]; then
					line=$(grep "package_extract_dir(\"system\"" updater-script | sed 's/\"/\\"/g; s:\/:\\/:g')
					sed -i "s:$line:$line\n#$partup:" updater-script
				fi
				if [[ $whatimg = "vendor" ]]; then
					sed -i "/#$partup/ r $tools/updater/vendor-set_metadata.txt" updater-script
				else
					sed -i "/#$partup/ r $tools/updater/extra-set_metadata.txt" updater-script
				fi
				sed -i "s/#PEXTRA/$whatimg/g" updater-script
				touch $prfiles/${whatimg}img
				if [[ $whatimg = "vendor" && -f $prfiles/set_metadataV ]]; then
					cat $prfiles/set_metadataV >> $prfiles/set_metadata
				fi
			elif [[ $whatimg = "data" ]]; then
				gawk 'a=/\"system\",/{b=1}b&&!a{print "#DATA";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				sed -i "/#DATA/ r $tools/updater/data-set_metadata.txt" updater-script
				touch $prfiles/data-set_metadata
			fi
		fi
	else
		banner
		echo "$redb$yellowt$bold$t_warning$normal"
		echo ""
		echo -e "$redt$t_img_flash_fail $whatimg$normal"
		echo ""
		read -p "$t_enter_continue"
		if [[ $whatimg = "data" ]]; then
			needpart="1"
		fi
	fi
	whatimg=""
}
partsdat() {
	banner
	echo "$bluet$t_img_create_dat $whatimg ...$normal"
	mkdir -p $romdir/tmpsparse
	if [[ $api = "21" ]]; then
		aver="1"
	elif [[ $api = "22" ]]; then
		aver="2"
	elif [[ $api = "23" ]]; then
		aver="3"
	elif [[ $api -ge "24" ]]; then
		aver="4"
	fi
	cd $romdir
	( $tools/img2sdat/img2sdat.py ${whatimg}_new.img $romdir/tmpsparse $aver 2>&1 ) >> $logs/main.log
	rm -rf ${whatimg}_new.img
	cd $romdir/tmpsparse
	if [[ ! $whatimg = "system" ]]; then
		mv system.transfer.list $whatimg.transfer.list
		mv system.new.dat $whatimg.new.dat
		mv system.patch.dat $whatimg.patch.dat
	fi
	mv * $romdir/
	cd $romdir
	rm -rf $romdir/tmpsparse
}
partimg() {
	banner
	echo "$bluet$t_img_create_symlinks $whatimg.img ...$normal"
	cd $romdir
	line=""
	cat $prfiles/symlinks | while read line; do
		target=$(echo "$line" | cut -d"\"" -f2)
		link=$(echo "$line" | cut -d"\"" -f4 | sed 's/^\///')
		linkdir=$(dirname $link)
		if [[ ! -d $linkdir ]]; then
			mkdir -p $linkdir
		fi
		ln -s -f -T $target $link
	done
	banner
	fcontexts=""
	if [[ -f $prfiles/file_contexts ]]; then
		fcontexts=" -S $prfiles/file_contexts"
	fi
	echo "$bluet$t_img_create_raw $whatimg.img ...$normal"
	if [[ $whatimg = "system" ]]; then
		if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
			( $make_ext4fs -T 0$fcontexts -l $syssize -L / -a /$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
		else
			( $make_ext4fs -T 0$fcontexts -l $syssize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
		fi
	elif [[ $whatimg = "data" ]]; then
		( $make_ext4fs -T 0$fcontexts -l $datsize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
	elif [[ -s $prfiles/exdirsb && $(grep "$whatimg" $prfiles/exdirsb) ]]; then
		partsize=$(grep "$whatimg" $prfiles/exdirsb | gawk '{print $2}')
		( $make_ext4fs -T 0$fcontexts -l $partsize -a $whatimg$sparseimg ${whatimg}_new.img ${whatimg}/ 2>&1 ) >> $logs/main.log
	fi
	sparseimg=""
	if [[ -d vendor ]]; then
		find system vendor -type l -exec rm -f {} \;
	else
		find system -type l -exec rm -f {} \;
	fi
	if [[ ! -f ${whatimg}_new.img ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo -e "$t_img_fail"
		echo ""
		read -p "$t_enter_main_menu"
		cd $base
		main="1"
		return
	fi
}
part_setup() {
	if [[ -f "$deviceloc/superr_mmc" ]]; then
		if [[ $(grep "$chosenimg" "$deviceloc/superr_mmc") ]]; then
			mmcchosen=$(grep "$chosenimg" "$deviceloc/superr_mmc" | gawk '{ print $1 }')
			sed -i "s:file_getprop(\"\/tmp\/config\",\ \"$chosenimg\"):\"$mmcchosen\":g" $usdir/updater-script
		else
			if [[ $chosenimg = 'boot' && -f $romdir/system/init.rc ]]; then
				grep -v " boot \|boot.img" $usdir/updater-script > $usdir/updater-script2
				mv $usdir/updater-script2 $usdir/updater-script
			else
				banner
				echo "$redb$yellowt$bold$t_warning$normal"
				echo ""
				echo -e "$redt$t_img_flash_fail2$normal"
				echo ""
				read -p "$t_enter_continue"
			fi
		fi
		mmcsystem=$(grep "system" "$deviceloc/superr_mmc" | gawk '{ print $1 }')
		sed -i "s:file_getprop(\"\/tmp\/config\",\ \"system\"):\"$mmcsystem\":g" $usdir/updater-script
	else
		if [[ -f "$deviceloc/superr_capbyname" ]]; then
			sed -i "s/+\ \"\/system\"\ +/+\ \"\/SYSTEM\"\ +/g" $usdir/updater-script
			sed -i "s/+\ \"\/boot\"\ +/+\ \"\/BOOT\"\ +/g" $usdir/updater-script
			sed -i "s/+\ \"\/recovery\"\ +/+\ \"\/RECOVERY\"\ +/g" $usdir/updater-script
		elif [[ -f "$deviceloc/superr_appbyname" ]]; then
			sed -i "s/+\ \"\/system\"\ +/+\ \"\/APP\"\ +/g" $usdir/updater-script
			sed -i "s/+\ \"\/boot\"\ +/+\ \"\/LNX\"\ +/g" $usdir/updater-script
			sed -i "s/+\ \"\/recovery\"\ +/+\ \"\/SOS\"\ +/g" $usdir/updater-script
		fi
	fi
}
pullimga() {
	sdcard=$($adb shell su -c "df -h /sdcard 2>/dev/null" | grep "/" | gawk '{ print $4 }')
	if [[ ! $sdcard ]]; then
		sdcard="${redt}N/A$normal"
	fi
	sdcard1=$($adb shell su -c "df -h /storage/sdcard1 2>/dev/null" | grep "/" | gawk '{ print $4 }')
	if [[ ! $sdcard1 ]]; then
		sdcard1="${redt}N/A$normal"
	fi
	choice=""
	while [[ ! $choice ]]; do
		banner
		echo -e "$t_pullimg_info"
		echo ""
		echo "1) /sdcard ($bluet$t_extract_free_space$greent$sdcard$normal)"
		echo "2) /storage/sdcard1 ($bluet$t_extract_free_space$greent$sdcard1$normal)"
		echo "3) $t_extract_manual"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! $choice =~ ^[1-3]$ ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then
			pullpath="/sdcard"
		elif [[ $choice = "2" ]]; then
			pullpath="/storage/sdcard1"
		elif [[ $choice = "3" ]]; then
			banner
			echo "$t_pullimg_q"
			echo ""
			echo "$greenb$t_example$normal"
			echo "${yellowt}/storage/sdcard1$normal"
			echo ""
			read pullpath
			echo "$pullpath" > $prfiles/pullimgpath
		fi
	done
		
	if [[ ! $($adb shell su -c "df -h $pullpath 2>/dev/null" | grep "/" | gawk '{ print $4 }') ]]; then
		banner
		echo -e "$redt$t_extract_space_error$normal"
		echo ""
		reply=""
		read -n 1 -p "$t_general_cont_anyway_q" reply
		if [[ ! $reply = "y" ]]; then
			cd $base
			main="1"
			return
		fi
	fi
	banner
	echo "$bluet$t_general_extracting $pullimg ...$normal"
	echo ""
	if [[ -f "$base/tools/devices/$devicename/superr_mmc" ]]; then
		partbyname=$(grep "$pullimg" "$base/tools/devices/$devicename/superr_mmc" | gawk '{ print $1 }' | sed 's/\\//g')
	else
		partbyname="$byname/$pullimg"
	fi
	$adb shell su -c "dd if=$partbyname of=$pullpath/$pullimg.img 2>/dev/null"
	$adb pull $pullpath/$pullimg.img $romdir/$pullimg.img > $logs/main.log
	$adb shell "rm $pullpath/$pullimg.img"
	pullimg=""
}
pullimgr() {
	banner
	echo "$bluet$t_general_extracting $pullimg ...$normal"
	echo ""
	if [[ -f "$base/tools/devices/$devicename/superr_mmc" ]]; then
		partbyname=$(grep "$pullimg" "$base/tools/devices/$devicename/superr_mmc" | gawk '{ print $1 }' | sed 's/\\//g')
		mmcname=$(echo "$partbyname" | rev | cut -d"/" -f1 | rev)
		$adb pull $partbyname $pullimg.img
	else
		$adb pull $byname/$pullimg $pullimg.img
	fi
	pullimg=""
}
rom_tools() {
	choice=""
	while [[ ! $choice ]]; do
		if [[ $main = "1" ]]; then
			return
		fi
		banner
		echo "$bluet$t_boot_status$normal"
		odexstatus=""
		odexstatus1=""
		dataapp=""
		dataapp1=""
		if [[ ! -f $sysdir/build.prop ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_startup_no_rom$normal"
			echo ""
			read -p "$t_enter_main_menu"
			cd $base
			return
		fi
		if [[ ! -s $prfiles/permtype ]]; then
			change_permtype
			choice=""
			continue
		fi
		isodexstatus
		permtype=$(cat $prfiles/permtype)
		debloatstatus1=""
		if [[ -f $prfiles/debloat_test ]]; then
			if [[ ! -s $prfiles/debloat_test ]]; then
				debloatstatus1=$(echo "${greent}$t_debloated${normal}")
			else
				debloatstatus1=$(echo "${redt}$t_bloated${normal}")
			fi
		fi
		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_rom_tools$normal"
		echo ""
		echo "1) $t_menu_deodex ($bluet$t_title_current$greent$odexstatus1$normal)"
		echo "2) $t_menu_perm_type ($bluet$t_title_current$greent$permtype$normal)"
		echo "${yellowt}3) $t_menu_root"
		echo "4) $t_menu_asserts"
		echo "5) $t_menu_extra_dir"
		echo "6) $t_menu_rom_debloat"
		echo "7) $t_menu_build_menu"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-7]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then # START Deodex ROM
			deodex_start
			choice=""
			continue
		elif [[ $choice = "2" ]]; then # START Change perm type (set_perm/set_metadata)
			change_permtype
			choice=""
			continue
		elif [[ $choice = "3" ]]; then # START Root Menu
			root_tools
			choice=""
			continue
		elif [[ $choice = "4" ]]; then # START Asserts: Add/Change devices
			assert_devices
			choice=""
			continue
		elif [[ $choice = "5" ]]; then # START Extra Directory Menu
			ext_dirmenu
			choice=""
			continue
		elif [[ $choice = "6" ]]; then # START Debloat Menu
			debloat_rom
			choice=""
			continue
		elif [[ $choice = "7" ]]; then # START Build Zip Menu
			build_zip
			choice=""
			continue
		elif [[ $choice = "m" ]]; then # START Main menu
			cd $base
			return
		elif [[ $choice = "q" ]]; then # START Quit
			echo ""
			echo ""
			exit
		fi
	done
}
root() {
	rootzip=""
	rootver=""
	countroot=""
	countroot=$(find $tools/root/root_zips -name *.zip | wc -l)
	if [[ $countroot = "1" ]]; then
		export rootzip=$(basename $(find $tools/root/root_zips -name *.zip))
	elif [[ $countroot -gt "1" ]]; then
		while [[ ! $rootzip ]]; do
			banner
			echo "$greenb$t_title_cho_root_zip$normal"
			echo ""
			findrootzip=""
			findrootzip=$(find $tools/root/root_zips -name *.zip | rev | cut -d"/" -f1 | rev)
			choosepr ssucho in ${findrootzip[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			else
				export rootzip="$ssucho"
			fi
		done
	fi
	if [[ $(echo "$rootzip" | grep "SuperSU\|supersu\|SuperSu\|Supersu") ]]; then
		rootver="supersu"
	fi
	if [[ $api -ge "23" ]] || [[ $androidversion = "5.1.1" && $(grep "ro.product.manufacturer" $sysdir/build.prop | cut -d"=" -f2) = "samsung" ]] && [[ $rootver = "supersu" ]]; then
		choice=""
		while [[ ! $choice ]]; do
			banner
			echo "$t_menu_root_method"
			echo ""
			echo "1) $t_menu_supersucho"
			echo "2) $t_menu_system_install"
			if [[ -d $tools/inject-sepolicy ]]; then
				echo "3) $t_menu_inject"
			else
				echo "3) $t_menu_download_inject"
			fi
			echo ""
			read -n 1 -p "$t_select" choice
			echo ""
			echo ""
			if [[ ! ${choice} =~ ^[1-3]$ ]]; then
				choice=""
				continue
			elif [[ $choice = "2" ]]; then
				echo "SYSTEMLESS=false" > $sysdir/.supersu
			elif [[ $choice = "3" ]]; then
				if [[ ! -d $tools/inject-sepolicy ]]; then
					cd $tools
					(wget https://bitbucket.org/superr/superrs-kitchen/downloads/inject-sepolicy-addon.zip 2>&1) >> $logs/zip.log
					$p7z x -y inject-sepolicy-addon.zip 2>&1 >> $logs/zip.log
					rm -rf inject-sepolicy-addon.zip
					root
					return
				fi
				echo "SYSTEMLESS=false" > $sysdir/.supersu
				if [[ ! -d $romdir/bootimg ]]; then
					chosenimg="boot"
					chosenimg2="boot.img"
					bootext="1"
					boot_unpack
				fi
				cd $tools/inject-sepolicy
				./inject
				chosenimg="boot"
				bootext="1"
				boot_repack
			fi
		done
	fi
	cd $usdir
	if [[ ! $(grep -o "#ROOT" updater-script) = "#ROOT" ]]; then
		if [[ $(grep "^set_perm" updater-script) ]]; then
			gawk 'a=/^set_perm/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		elif [[ $(grep "^set_metadata" updater-script) ]]; then
			gawk 'a=/^set_metadata/{b=1}b&&!a{print "#ROOT";b=0}1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
	fi
	cd $prfiles
	if [[ $(grep "install-recovery.sh" symlinks) ]]; then
		grep "install-recovery.sh" symlinks >> symunroot
	fi
	sed -i "/#ROOT/ r $tools/root/root_prog" $usdir/updater-script
	sed -i "s/#ROOTZIP/$rootzip/g" $usdir/updater-script
	mkdir -p $romdir/rootzip
	cp $tools/root/root_zips/$rootzip $romdir/rootzip/
}
rootrem() {
	cd $prfiles
	rm -rf $prfiles/root_existing
	rm -rf $sysdir/.supersu
	if [[ -f $prfiles/boot.noroot ]]; then
		mv $prfiles/boot.noroot $romdir/boot.img
	fi
	if [[ -f "$sysdir/bin/install-recovery_original.sh" ]]; then
		mv $sysdir/bin/install-recovery_original.sh $sysdir/bin/install-recovery.sh
	fi
	if [[ -f "$sysdir/etc/install-recovery_original.sh" ]]; then
		mv $sysdir/etc/install-recovery_original.sh $sysdir/etc/install-recovery.sh
	fi
	if [[ -f "$sysdir/bin/install-recovery.sh-ku.bak" ]]; then
		mv $sysdir/bin/install-recovery.sh-ku.bak $sysdir/bin/install-recovery.sh
	fi
	if [[ -f "$sysdir/etc/install-recovery.sh-ku.bak" ]]; then
		mv $sysdir/etc/install-recovery.sh-ku.bak $sysdir/etc/install-recovery.sh
	fi
	if [[ -f $sysdir/bin/debuggerd_real ]]; then
		mv $sysdir/bin/debuggerd_real $sysdir/bin/debuggerd
	fi
	if [[ -f $sysdir/bin/install-recovery.sh && $(grep xbin $sysdir/bin/install-recovery.sh) ]]; then
		rm -rf $sysdir/bin/install-recovery.sh
		grep -v "system/bin/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f $sysdir/etc/install-recovery.sh && $(grep xbin $sysdir/etc/install-recovery.sh) ]]; then
		rm -rf $sysdir/etc/install-recovery.sh
		grep -v "system/etc/install-recovery.sh" symlinks > symlinks2
		mv symlinks2 symlinks
	fi
	if [[ -f symunroot ]]; then
		cat symunroot >> symlinks
	fi
	if [[ -f $sysdir/bin/app_process_original ]]; then
		mv $sysdir/bin/app_process_original $sysdir/bin/app_process
	elif [[ -f $sysdir/bin/app_process32_original ]]; then
		mv $sysdir/bin/app_process32_original $sysdir/bin/app_process32
	elif [[ -f $sysdir/bin/app_process64_original ]]; then
		mv $sysdir/bin/app_process64_original $sysdir/bin/app_process64
	elif [[ -f $sysdir/bin/app_process.orig ]]; then
		mv $sysdir/bin/app_process.orig $sysdir/bin/app_process
	elif [[ -f $sysdir/bin/app_process32.orig ]]; then
		mv $sysdir/bin/app_process32.orig $sysdir/bin/app_process32
	elif [[ -f $sysdir/bin/app_process64.orig ]]; then
		mv $sysdir/bin/app_process64.orig $sysdir/bin/app_process64
	fi
	remrootscript=""
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" symlinks.orig > symlinks.orig2
		mv symlinks.orig2 symlinks.orig
	done
	if [[ ! $permtype = "sparse_dat" && ! $permtype = "raw_img" ]]; then
		remrootscript=""
		cat $tools/root/root_files | while read remrootscript; do
			grep -v "$remrootscript" $permtype > $permtype-2
			mv $permtype-2 $permtype
		done
	fi
	remrootscript=""
	cd $usdir
	cat $tools/root/root_files | while read remrootscript; do
		grep -v "$remrootscript" updater-script > updater-script2
		mv updater-script2 updater-script
	done
	rootfile=""
	cat $tools/root/root_files | while read rootfile; do
		rm -rf $romdir/$rootfile
	done
}
root_busybox() {
	cd $usdir
	if [[ ! $(grep -o "#BUSYBOX" updater-script) = "#BUSYBOX" ]]; then
		gawk '/#ROOT/ && !x {print "#BUSYBOX"; x=1} 1' updater-script > updater-script2
		mv updater-script2 updater-script
	fi
	sed -i "/#BUSYBOX/ r $tools/root/busybox_prog" $usdir/updater-script
	busybox=$(find $tools/root/busybox -name *.zip | rev | cut -d'/' -f1 | rev)
	sed -i "s/#BUSYBOX1/$busybox/g" $usdir/updater-script
	mkdir -p $romdir/busybox
	cp $tools/root/busybox/$busybox $romdir/busybox/
}
root_busyboxrem() {
	cd $usdir
	grep -v "Busybox\|/tmp/busybox" updater-script > updater-script2
	mv updater-script2 updater-script
	rm -rf $romdir/busybox
	rm -rf $sysdir/xbin/busybox
}
root_sud() {
	mkdir -p $sysdir/su.d
	if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
		sudfile="$tools/boot/sud_perms2"
	else
		sudfile="$tools/boot/sud_perms"
	fi
	sed -i 's/#ROOT/#SUD\n#ROOT/' $usdir/updater-script
	sed -i "/#SUD/ r $sudfile" $usdir/updater-script
}
root_sudrem() {
	rm -rf $sysdir/su.d
	grep -v "#SUD\|su\.d" $usdir/updater-script > $usdir/updater-script2
	mv $usdir/updater-script2 $usdir/updater-script
}
root_tools() {
	choice=""
	while [[ ! $choice ]]; do
		rootstatus=""
		rootstatus1=""
		sudstatus=""
		sudstatus1=""
		isrootstatus
		isbusyboxstatus
		issud

		banner
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
		echo ""
		echo "$yellowb$redt$t_menu_root$normal"
		echo ""
		echo "1) $t_menu_root_unroot ($bluet$t_title_current$greent$rootstatus1$normal)"
		echo "2) $t_menu_busybox ($bluet$t_title_current$greent$busyboxstatus1$normal)"
		echo "3) $t_menu_add_remove_sud ($bluet$t_title_current$sudstatus1$normal)"
		echo "${yellowt}4) $t_menu_rom_tools"
		echo "m = $t_title_main"
		echo "${magentat}q = $t_menu_quit$normal"
		echo ""
		read -n 1 -p "$t_select" choice

		if [[ ! ${choice} =~ ^[1-4]$ ]] && [[ ! $choice = "m" && ! $choice = "q" ]]; then
			choice=""
			continue
		elif [[ $choice = "1" ]]; then # START Root/Unroot ROM
			if [[ ! -f $prfiles/root ]]; then
				banner
				read -n 1 -p "$t_root_q"
				if [[ $REPLY = "y" ]]; then
					root
				fi
			else
				banner
				echo "$greent$t_root_already$normal"
				echo ""
				read -n 1 -p "$t_general_remove_q"
				echo ""
				echo ""
				if [[ $REPLY = "y" ]]; then
					rootrem
					update_project
				fi
			fi
			choice=""
			continue
		elif [[ $choice = "2" ]]; then # START Busybox Add/Remove
			if [[ ! -f $prfiles/busybox ]]; then
				if [[ -f $prfiles/root ]]; then
					banner
					read -n 1 -p "$t_busybox_q"
					if [[ $REPLY = "y" ]]; then
						root_busybox
					fi
				else
					banner
					echo "$redb$yellowt$bold$t_error$normal"
					echo "$redt$t_root_must_add$normal"
					echo ""
					read -p "$t_enter_root_menu"
				fi
			else
				banner
				echo "$greent$t_busybox_already$normal"
				echo ""
				read -n 1 -p "$t_general_remove_q"
				echo ""
				echo ""
				if [[ $REPLY = "y" ]]; then
					root_busyboxrem
				fi
			fi
			choice=""
			continue
		elif [[ $choice = "3" ]]; then # START Add/Remove su.d support
			if [[ $rootstatus = "Yes" ]]; then
				if [[ ! $sudstatus = "Yes" ]]; then
					banner
					read -n 1 -p "$t_root_sud_add_q" reply
					if [[ ! $reply = "y" ]]; then
						choice=""
						continue
					fi
					root_sud
				else
					banner
					read -n 1 -p "$t_root_sud_rem_q" reply
					if [[ ! $reply = "y" ]]; then
						choice=""
						continue
					fi
					root_sudrem
				fi
			else
				banner
				echo "$redb$yellowt$bold$t_error$normal"
				echo "$redt$t_root_must_add$normal"
				echo ""
				read -p "$t_enter_boot_menu"
			fi
			choice=""
			continue
		elif [[ $choice = "4" ]]; then # START ROM Tools Menu
			return
		elif [[ $choice = "m" ]]; then # START Main menu
			cd $base
			main="1"
			return
		elif [[ $choice = "q" ]]; then # START Quit
			echo ""
			echo ""
			exit
		fi
	done
}
signzip() {
	if [[ $cyg ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_sign_cygwin$normal"
		echo ""
		read -p "$t_enter_continue"
		return
	fi
	if [[ ! $signzipname ]]; then
		signzipname="$signature2"
	fi
	reply=""
	read -n 1 -p "$t_sign_q" reply
	if [[ $reply = "y" ]]; then
		banner
		echo "$bluet$t_sign_ram_check$normal"
		cd $romdir
		zipbyte=$(wc -c $signzipname.zip | gawk '{ print $1 }')
		zipmb=$(echo | gawk "{ print $zipbyte/1024/1024+1 }" | cut -d"." -f1)
		get_heapsize
		ramest=$(echo | gawk "{ print ${zipmb}*3.48+1 }" | cut -d"." -f1)
		if [[ $ramest -gt $heapsize ]]; then
			banner
			echo "$redb$yellowt$bold$t_warning$normal"
			echo "$redt$t_sign_no_ram$normal"
			echo ""
			choice=""
			read -n 1 -p "$t_deodex_try_anyway" choice
			echo ""
			echo ""
			if [[ $choice != "y" ]]; then
				return
			fi
		fi
		banner
		echo "$bluet$t_sign_signing $signzipname.zip ...$normal"
		java -Xmx${heapsize}m -jar $tools/signapk/signapk.jar -w $tools/signapk/testkey.x509.pem $tools/signapk/testkey.pk8 $signzipname.zip $signzipname-signed.zip
		$p7z e $signzipname.zip META-INF/com/google/android/update-binary 2>/dev/null >> $logs/zip.log
		if [[ $(file update-binary | grep /sbin/sh) ]]; then
			$tools/signapk/zipadjust $signzipname-signed.zip $signzipname-signed-fixed.zip 2>&1 >/dev/null
			java -Xmx${heapsize}m -jar $tools/signapk/minsignapk.jar $tools/signapk/testkey.x509.pem $tools/signapk/testkey.pk8 $signzipname-signed-fixed.zip $signzipname-signed2.zip
			rm -rf $signzipname-signed.zip $signzipname-signed-fixed.zip
			mv $signzipname-signed2.zip $signzipname-signed.zip
		fi
		rm -rf update-binary
		banner
		if [[ -f $signzipname-signed.zip ]]; then
			echo "$greent$signzipname-signed.zip $t_sign_signed$normal"
			echo ""
		else
			echo "$redb$yellowt$bold$t_error$normal"
			echo "$redt$t_sign_fail$normal"
			echo ""
		fi
		if [[ $signext ]]; then
			read -p "$t_enter_build_menu"
		fi
	else
		if [[ $signext ]]; then
			return
		fi
		echo ""
		echo ""
	fi
	signext=""
	signzipname=""
}
update_project() {
	loop="0"
	while [[ $loop = "0" ]]; do
		if [[ -f $prfiles/permtype ]]; then
			permtype=$(cat $prfiles/permtype)
		else
			permtype=""
		fi
		if [[ $(grep "#SIGNATURE" $usdir/updater-script) ]]; then
			cd $prfiles
			get_sig
		fi
		get_byname
		cd $romdir
		romdir2=$(echo "$romdir" | sed 's:\/:\\/:g')
		find $sysdir $romdir/vendor 2>/dev/null | sed "s/$romdir2//g" | sort > $prfiles/all_files.txt
		if [[ $permtype && $permtype != "sparse_dat" && $permtype != "raw_img" ]]; then
			cd $usdir
			permtype=""
			if [[ ! -f $prfiles/permtype ]]; then
				if [[ $(grep "^set_metadata" updater-script 2>/dev/null | grep -v "/tmp/") && ! $(grep "system.new.dat\|system_new" updater-script 2>/dev/null) ]]; then
					permtype="set_metadata"
					echo "$permtype" > $prfiles/permtype
				elif [[ $(grep "^set_perm" updater-script 2>/dev/null | grep -v "/tmp/") ]]; then
					permtype="set_perm"
					echo "$permtype" > $prfiles/permtype
				fi
			else
				permtype=$(cat $prfiles/permtype)
			fi
		fi
		if [[ ! $permtype ]]; then
			api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
			choice=""
			while [[ ! $choice ]]; do
				banner
				echo "$t_perm_which"
				echo ""
				if [[ ! $api -ge "19" ]]; then
					echo "${redt}1) $t_perm_set_metadata$normal"
				else
					echo "1) $t_perm_set_metadata"
				fi
				echo "2) $t_perm_set_perm"
				if [[ $api -ge "21" && ! -f $romdir/system/init.rc ]]; then
					echo "3) $t_perm_sparse"
				else
					echo "${redt}3) $t_perm_sparse_red$normal"
				fi
				echo "4) $t_perm_raw_img"
				echo ""
				read -n 1 -p "$t_select" choice

				if [[ ! ${choice} =~ ^[1-4]$ ]]; then
					choice=""
					continue
				elif [[ $choice = "1" ]]; then # set_metadata chosen
					if [[ ! $api -ge "19" ]]; then
						banner
						echo "$redt$t_perm_set_metadata_error$normal"
						echo ""
						read -p "$t_enter_continue"
						continue
					fi
					permtype="set_metadata"
					echo "$permtype" > $prfiles/permtype
				elif [[ $choice = "2" ]]; then # set_perm chosen
					permtype="set_perm"
					echo "$permtype" > $prfiles/permtype
				elif [[ $choice = "3" ]]; then # Sparse dat chosen
					if [[ $api -lt "21" || -f $romdir/system/init.rc ]]; then
						banner
						echo "$redt$t_perm_sparse_error$normal"
						echo ""
						read -p "$t_enter_continue"
						continue
					fi
					permtype="sparse_dat"
					rm -rf $romdir/META-INF $romdir/config $romdir/install
					cp -R $tools/updater/META-INF-DAT/META-INF $romdir/
					cp -R $tools/updater/install $romdir/
					cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
					cd $prfiles
					rm -rf permtype set_metadata set_perm
					echo "$permtype" > $prfiles/permtype
					continue
				elif [[ $choice = "4" ]]; then # raw_img chosen
					rm -rf $romdir/META-INF $romdir/install $romdir/config
					cd $tools/updater
					cp -R $tools/updater/META-INF-IMG/META-INF $romdir/
					cp -R $tools/updater/install $romdir/
					cp $tools/updater/META-INF/com/google/android/update-binary $usdir/
					cd $prfiles
					rm -rf permtype set_metadata set_perm
					permtype="raw_img"
					if [[ -f $prfiles/permtype ]]; then
						mv $prfiles/permtype $prfiles/permtype_old
					fi
					echo "$permtype" > $prfiles/permtype
					continue
				fi
			done
		else
			rm -rf $prfiles/permtype_old
		fi
		banner
		echo "$bluet$t_startup_prep_updater_script$normal"
		cd $usdir		
		if [[ ! $(grep -o "#ASSERT" updater-script) ]]; then
			sed -i '1i#ASSERT' updater-script
			grep " getprop(\|(getprop(" updater-script > $prfiles/assert_original
		fi
		if [[ ! $(grep -o "#SYM" updater-script) = "#SYM" ]]; then
			gawk '/^symlink/ && !x {print "#SYM"; x=1} 1' updater-script > updater-script2
			mv updater-script2 updater-script
		fi
		if [[ ! $(grep -o "#PERM" updater-script) = "#PERM" ]]; then
			if [[ $(grep "^$permtype" updater-script | grep -v "/tmp/") ]]; then
				gawk 'a=/^#SYM/{b=1}b&&!a{print "#PERM";b=0}1' updater-script > updater-script2
				mv updater-script2 updater-script
				grep "^$permtype" updater-script | grep -v "/tmp/" > $prfiles/${permtype}_original
			fi
		fi
		if [[ $permtype = "set_metadata" || $permtype = "set_perm" ]]; then
			sed -i '/^#PERM/,/^set_progress/{//!d}' updater-script
		fi
		grep -v " getprop(\|(getprop(\|^symlink" updater-script > updater-script2
		mv updater-script2 updater-script
		cd $prfiles
		rm -rf set_metadata
		rm -rf set_perm
		if [[ $permtype = "set_perm" ]]; then
			line=""
			cut -d"\"" -f2 $tools/updater/set_perm-data | while read line; do
				if [[ $(grep -r -m 1 "^$line$" all_files.txt) = "$line" ]]; then
					grep -m 1 "$line" $tools/updater/set_perm-data >> set_perm
				fi
			done
			cp set_perm set_perm.orig
		elif [[ $permtype = "set_metadata" ]]; then
			if [[ ! -f $prfiles/file_contexts2 ]]; then
				if [[ ! -f $prfiles/file_contexts ]]; then
					get_contexts
					if [[ ! -f $prfiles/file_contexts ]]; then
						banner
						echo "$redb$yellowt$t_error$normal"
						echo -e "$t_build_selinux_error"
						echo ""
						read -p "$t_enter_continue"
						rm -rf $prfiles/permtype
						permtype=""
						continue
					fi
				fi
			fi
			cd $prfiles
			sed 's/--//g' file_contexts | grep "^/system/" | sort > file_contexts2
			if [[ $(grep "vendor" exdirs 2>/dev/null) ]]; then
				grep "^/vendor/" file_contexts >> file_contexts2
			fi
			sed 's/\\././g; s/(\/\.\*)?//g' file_contexts2 | gawk '{ print $1, $2 }' | sort > file_contexts3
			mv file_contexts3 file_contexts2
			if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
				sed -i 's/^/\/system/g' file_contexts2
			fi
			if [[ ! -f set_metadata1 ]]; then
				line=""
				for line in $(gawk '{ print $1 }' file_contexts2); do
					if [[ $(grep -m 1 "^$line$" all_files.txt) = "$line" ]]; then
						grep -m 1 "^$line " file_contexts2 >> pre_metadata
					elif [[ $(cat symlinks | cut -d'"' -f4 | grep -m 1 "^$line$" ) = "$line" ]]; then
						grep -m 1 "^$line " file_contexts2 >> pre_metadata
					fi
				done
				if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
					metadata=$tools/updater/set_metadata-data2
				else
					metadata=$tools/updater/set_metadata-data
				fi
				line=""
				cat $metadata | while read line; do
					line2=$(echo "$line" | gawk '{ print $1 }' | cut -d'"' -f2)
					if [[ $(gawk '{ print $1 }' pre_metadata | grep -m 1 "^$line2$") = "$line2" ]]; then
						context=$(grep -m 1 "^$line2 " pre_metadata | gawk '{ print $2 }')
						grep -m 1 "$line2" $metadata | sed "s/#CONTEXT/$context/" >> set_metadata
					elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && $(echo $line | grep "#CONTEXT") ]]; then
						grep -m 1 "$line2" $metadata | sed "s/#CONTEXT/u:object_r:system_file:s0/" >> set_metadata
					elif [[ $(grep -m 1 "^$line2$" all_files.txt) = "$line2" && ! $(echo $line | grep "#CONTEXT") ]]; then
						grep -m 1 "$line2" $metadata >> set_metadata
					fi
				done
				cat pre_metadata | while read line; do
					line2=$(echo "$line" | gawk '{ print $1 }')
					if [[ ! $(grep "$line2" set_metadata) ]]; then
						xcontext=$(echo "$line" | gawk '{ print $2 }')
						echo "set_metadata(\"$line2\", \"selabel\", \"$xcontext\");" >> set_metadata
					fi
				done
				if [[ $(grep "ro.board.platform=" $sysdir/build.prop | cut -d"=" -f2) = "exynos5" ]]; then
					sed -i "s/init\.sec\.boot\.sh\",\ \"uid\",\ 0,\ \"gid\",\ 2000, \"mode\",\ 0644/init\.sec\.boot\.sh\",\ \"uid\",\ 0,\ \"gid\",\ 2000, \"mode\",\ 0550/" set_metadata
				fi
				rm -rf pre_metadata
			else
				rm -rf set_metadata
				cp set_metadata1 set_metadata
				if [[ $(grep "vendor" exdirs 2>/dev/null) && -f set_metadataV ]]; then
					cat set_metadataV >> set_metadata
				fi
				if [[ $(grep "#CONTEXT" set_metadata) ]]; then
					cat set_metadata | while read line; do
						if [[ $(echo "$line" | grep "#CONTEXT") ]]; then
							line2=$(echo "$line" | cut -d'"' -f2)
							context=$(grep -m 1 "^$line2 " file_contexts2 | gawk '{ print $2 }')
							if [[ ! $context ]]; then
								context="u:object_r:system_file:s0"
							fi
							echo "$line" | sed "s/#CONTEXT/$context/" >> set_metadata2
						else
							echo "$line" >> set_metadata2
						fi
					done
					mv set_metadata2 set_metadata
				fi
			fi
			if [[ -s root_meta ]]; then
				cat root_meta >> set_metadata
			fi
		fi
		cd $prfiles
		rm -rf symlinks
		cp symlinks.orig symlinks
		grep "/system/app\|/system/priv-app" all_files.txt | cut -d"/" -f1-4 | grep -v "^/system/app$\|^/system/priv-app$" | sort -u >> appsym
		line=""
		grep "/system/app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
			if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
				grep -v "$line" symlinks > symlinks2
				mv symlinks2 symlinks
			fi
		done
		line=""
		grep "/system/priv-app" symlinks | cut -d"\"" -f4 | cut -d"/" -f1-4 | while read line; do
			if [[ ! "$line" = $(grep "^$line$" appsym) ]]; then
				grep -v "$line" symlinks > symlinks2
				mv symlinks2 symlinks
			fi
		done
		sort -u symlinks > symlinks2
		mv symlinks2 symlinks
		rm -rf appsym
		cd $prfiles
		if [[ ! $byname ]]; then
			banner
			echo "$redb$yellowt$bold$t_error$normal"
			echo -e "$redt$t_byname_manual_info$normal"
			echo ""
			read -p "$t_enter_continue_rest"
		else
			chosenimg="boot"
			part_setup
		fi
		devname1=$(echo "$devicename" | sed 's/\ /\\ /g')
		if [[ ! -f assert ]]; then
			cat $tools/updater/custom/assert >> assert
			cat $tools/updater/custom/abort >> assert
			sed -i "s/#DEVICENAME/$devname1/g" assert
			sed -i "s/#DEVICECHK/$devicechk/g" assert
			if [[ -f assertcustom ]]; then
				grep "ro.product.device" assert > assert-2
				mv assert-2 assert
				cat assertcustom >> assert
			fi
		fi
		if [[ ! $(grep " getprop(\|(getprop(" $usdir/updater-script) ]]; then
			sed -i '/#ASSERT/ r assert' $usdir/updater-script
		fi
		sed -i "s/#SIGNATURE/$signature1/g" $usdir/updater-script
		sed -i "s/#DEVICENAME/$devname1/g" $usdir/updater-script
		sed -i "s/#DEVICECHK/$devicechk/g" $usdir/updater-script
		sed -i '/#SYM/ r symlinks' $usdir/updater-script
		sed -i "/#PERM/ r $permtype" $usdir/updater-script
		if [[ -s $prfiles/exdirs && ! -f $prfiles/exdone ]]; then
			for line in $(cat $prfiles/exdirs); do
				if [[ ! $(grep "\"\/$line\");" $usdir/updater-script) && ! $(grep "$line.transfer" $usdir/updater-script) ]]; then
					whatimg="$line"
					partadd
				fi
			done
			touch $prfiles/exdone
		fi
		if [[ $api > "18" ]]; then
			get_contexts
		fi
		break
	done
}

redt=$(tput setaf 1)
redb=$(tput setab 1)
greent=$(tput setaf 2)
greenb=$(tput setab 2)
yellowt=$(tput setaf 3)
yellowb=$(tput setab 3)
bluet=$(tput setaf 4)
blueb=$(tput setab 4)
magentat=$(tput setaf 5)
magentab=$(tput setab 5)
cyant=$(tput setaf 6)
cyanb=$(tput setab 6)
whiteb=$(tput setab 7)
bold=$(tput bold)
italic=$(tput sitm)
stand=$(tput smso)
underline=$(tput smul)
normal=$(tput sgr0)
clears=$(tput clear)
dlurl="https://bitbucket.org/superr/superrs-kitchen/downloads"
if [[ $(echo $(pwd) | grep " ") ]]; then
	banner
	echo "$redb$yellowt${bold}ERROR:$normal"
	echo -e "${redt}The kitchen must be run in a path without spaces.$normal\n\n${bluet}CURRENT PATH:"
	echo "$yellowt$(pwd)$normal"
	echo ""
	read -p "Press ENTER to exit"
	exit
fi
export base=$(pwd)
export myuser=$(echo "$(whoami | gawk '{ print $1 }')")
tools=$base/tools
if [[ ! $t_select ]]; then
	if [[ $(ls $tools | grep "srk-chosen") ]]; then
		langfile=$(ls $tools | grep "srk-chosen" | sed 's/-chosen//')
		if [[ ! -f $tools/language/$langfile ]]; then
			rm -rf $tools/$langfile-chosen
			langfile="english-srk"
		fi
		source "$tools/language/$langfile"
	elif [[ $(ls $tools/language | wc -l) -gt "1" ]]; then
		source $tools/language/english-srk
		lang=""
		while [[ ! $lang ]]; do
			banner
			echo "$greenb$t_title_cho_lang$normal"
			echo ""
			findlang=""
			findlang=$(ls $tools/language | grep "\-srk")
			choosepr langcho in ${findlang[@]}
			if [[ $REPLY = "q" ]]; then
				exit
			else
				lang="$langcho"
				if [[ ! $lang = "english-srk" ]]; then
					language_check
				fi
				source $tools/language/$lang
				touch $tools/$lang-chosen
			fi
		done
	else
		source $tools/language/english-srk
	fi
fi
superrv=$(grep "SuperR's Kitchen v" README.md | gawk '{ print $4 }' | sed 's/*//g')
ttools=$tools/linux_tools
if [[ $(uname -s | grep "CYGWIN\|cygwin\|Cygwin") ]]; then
	ttools=$tools/cyg_tools
	if [[ ! -f $tools/cygnotice ]]; then
		banner
		echo "${blueb}CYGWIN $t_notice$normal"
		echo -e "$bluet$t_cygwin_info$normal"
		echo ""
		read -p "$t_enter_continue"
		touch $tools/cygnotice
	fi
	rm -rf $tools/depends/dependencies2
	cp $tools/depends/dependencies $tools/depends/dependencies2
	sed -i '/sudo/d; 1i7z\ngit' $tools/depends/dependencies2
	dependencies="dependencies2"
	cyg=".exe"
	script="bat"
	AIK=$tools/boot/AIK2
	bashwin=""
	usesudo2=""
	adb=$ttools/adb.exe
	zipalign=$ttools/zipalign.exe
	imgextractor=$ttools/Imgextractor.exe
	p7z=7z
	aapt=$ttools/aapt.exe
elif [[ $(find /mnt/c -name Windows -maxdepth 1 2>/dev/null | grep -m 1 -o Windows) = "Windows" || $(find /c -name Windows -maxdepth 1 2>/dev/null | grep -m 1 -o Windows) = "Windows" ]]; then
	if [[ $(getconf LONG_BIT) != "64" ]]; then
		banner
		echo "${redt}You need a 64-bit OS to run the kitchen in WSL.$normal"
		echo ""
		read -p "$t_enter_exit"
		exit
	fi
	rm -rf $tools/depends/dependencies2
	cp $tools/depends/dependencies $tools/depends/dependencies2
	sed -i '1i7z' $tools/depends/dependencies2
	dependencies="dependencies2"
	cyg=""
	script="sh"
	AIK=$tools/boot/AIK
	bashwin="1"
	usesudo2="sudo "
	adb=$ttools/adb64
	zipalign=$ttools/zipalign
	imgextractor=$ttools/Imgextractor.exe
	p7z=7z
	aapt="$ttools/aapt"
else
	cyg=""
	script="sh"
	AIK=$tools/boot/AIK
	bashwin=""
	dependencies="dependencies"
	usesudo2="sudo "
	if [[ $(getconf LONG_BIT) = "64" ]]; then
		adb=$ttools/adb64
	else
		adb=$ttools/adb
	fi
	zipalign=$ttools/zipalign
	p7z=$ttools/7z
	aapt="$ttools/aapt"
fi
if [[ ! $firstrun = "1" ]]; then
	export firstrun="1"
	if [[ ! $cyg ]]; then
		chkstat &
	fi
fi
if [[ ! $cyg ]]; then
	if [[ $(which id) ]]; then
		if [[ $(id -u) = "0" ]]; then
			userid="root"
		fi
	elif [[ $EUID = "0" ]]; then
		userid="root"
	fi
	if [[ $userid = "root" ]]; then
		banner
		echo "$redb$yellowt$bold$t_error$normal"
		echo "$redt$t_startup_no_root$normal"
		echo ""
		read -p "$t_enter_exit"
		exit
	fi
fi
if [[ ! $(echo "$BASH" | grep bash$) ]]; then
	banner
	echo -e "$t_startup_shell_error"
	echo ""
	read -p "$t_enter_exit"
	exit
fi
if [[ ! -f $tools/depmet ]]; then
	banner
	echo "$bluet$t_startup_dep_check$normal"
	cd $tools
	depcheck=""
	line=""
	for line in $(cat depends/$dependencies); do
		depcheck=$(which $line 2>/dev/null)
		if [[ ! $depcheck ]]; then
			echo "$line " >> depinstall
		fi
	done
	if [[ -s depinstall ]]; then
		debpkg="binutils coreutils cpio e2fsprogs findutils gawk grep gzip libc-bin liblz4-tool lzop mount ncurses-bin procps sed tar unzip util-linux vim-common wget xz-utils"
		if [[ $(getconf LONG_BIT) = "64" ]]; then
			debpkg="$debpkg libc6-i386"
		fi
		depinstall=$(cat depinstall)
		banner
		echo -e "$t_startup_dep_missing"
		echo ""
		echo "$yellowt$depinstall$normal"
		echo ""
		if [[ ! $cyg ]]; then
			debinstall
			if [[ $bashwin ]]; then
				debpkg="p7zip-full"
				debinstall
			fi
		else
			rm -f depinstall
			read -p "$t_enter_exit"
			exit
		fi
	fi
	if [[ $(python3 -V | gawk '{print $2}' | sed 's/\.//g') < "350" ]]; then
		banner
		echo "$redt$t_startup_python$(python3 -V | gawk '{print $2}')$normal"
		echo ""
		read -p "$t_enter_exit"
		exit
	fi
	javabad=""
	if [[ ! $(which java) ]]; then
		javabad="1"
	fi
	if [[ ! $javabad ]]; then
		javaver=$(java -version 2>&1 | grep "java version\|openjdk version" | cut -d'"' -f2 | cut -c 1,2,3)
		if [[ $(echo "$javaver" | grep "-") ]]; then
			if [[ $(echo "$javaver" | sed 's/[^0-9]*//g') -lt "8" ]]; then
				javabad="1"
			fi
		else
			if [[ $(echo "$javaver" | cut -c 1,3) -lt "18" ]]; then
				javabad="1"
			fi
		fi
	fi
	if [[ $javabad = "1" ]]; then
		debpkg="default-jre"
		banner
		echo -e "$t_startup_need_java"
		echo ""
		echo "${yellowt}$debpkg$normal"
		echo ""
		if [[ ! $cyg ]]; then
			debinstall
		else
			banner
			read -p "$t_enter_exit"
			exit
		fi
	fi
	touch depmet
	cd $base
fi
if [[ ! $cyg ]]; then
	if [[ $(getconf LONG_BIT) = "64" ]]; then
		make_ext4fs="$ttools/make_ext4fs_64"
		simg2img="$ttools/simg2img_64"
		vdexext="$ttools/vdexExtractor_64"
		lz4="$tools/boot/AIK/bin/linux/x86_64/lz4"
	else
		make_ext4fs="$ttools/make_ext4fs_32"
		simg2img="$ttools/simg2img_32"
		vdexext="$ttools/vdexExtractor_32"
		lz4="$tools/boot/AIK/bin/linux/i686/lz4"
	fi
else
	make_ext4fs="$ttools/make_ext4fs.exe"
	simg2img="$ttools/simg2img.exe"
fi
if [[ $cyg ]] && [[ ! -f $ttools/simg2img.exe || ! -f $ttools/make_ext4fs.exe || ! -f $ttools/adb.exe || ! -f $ttools/zipalign.exe || ! -f $ttools/Imgextractor.exe || ! -f $ttools/aapt.exe || ! -f $tools/boot/AIK2/unpackimg.bat || ! -f $tools/root/root_zips/SuperSU.zip  || ! -f $tools/root/busybox/Busybox.zip ]]; then
	banner
	echo "$redb$yellowt$bold$t_error$normal"
	echo "$redt$t_startup_bin$normal"
	echo ""
	install_binaries
elif [[ ! $cyg ]] && [[ ! -f $ttools/7z || ! -f $ttools/simg2img_64 || ! -f $ttools/make_ext4fs_64 || ! -f $ttools/adb64 || ! -f $ttools/zipalign || ! -f $ttools/aapt || ! -f $tools/boot/AIK/unpackimg.sh || ! -f $tools/root/root_zips/SuperSU.zip  || ! -f $tools/root/busybox/Busybox.zip ]]; then
	banner
	echo "$redb$yellowt$bold$t_error$normal"
	echo "$redt$t_startup_bin$normal"
	echo ""
	install_binaries
fi
if [[ -f $tools/updatecheck-yes && ! $updatecheck ]]; then
	kitchen_update
fi

loop="0"
while [[ $loop = "0" ]]; do
	main="0"
	if [[ $(ls -d */ | grep 'superr_') ]]; then
		if [[ ! $romname ]]; then
			countproject=""
			countproject=$(ls -d */ | grep 'superr_' | wc -l)
			if [[ $(echo "$countproject") = "1" ]]; then
				export romname=$(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///')
			fi
		fi
		if [[ ! $romname ]]; then
			while [[ ! $romname ]]; do
				banner
				echo "$greenb$t_title_choose$normal"
				echo ""
				findproject=""
				findproject=( $(ls -d */ | grep 'superr_' | sed 's/superr_//; s/\///') )
				prchoice="first"
				choosepr project in ${findproject[@]}
				if [[ $REPLY = "q" ]]; then
					echo ""
					exit
				elif [[ $REPLY = "n" ]]; then
					new_project
				else
					export romname="$project"
				fi
			done
		fi
		if [[ ! -d superr_$romname/00_project_files/logs ]]; then
			mkdir -p superr_$romname/00_project_files/logs
		fi
	fi
	romdir=$base/superr_$romname
	if [[ -f $romdir/system/init.rc && -d $romdir/system/system/app ]]; then
		sysdir="$romdir/system/system"
	else
		sysdir="$romdir/system"
	fi
	prfiles=$romdir/00_project_files
	framedir=$sysdir/framework
	appdir=$sysdir/app
	privdir=$sysdir/priv-app
	usdir=$romdir/META-INF/com/google/android
	logs=$romdir/00_project_files/logs
	if [[ -f $sysdir/build.prop ]]; then
		androidversion=$(grep "ro.build.version.release" $sysdir/build.prop | cut -d"=" -f2)
		api=$(grep "ro.build.version.sdk" $sysdir/build.prop | cut -d"=" -f2)
		get_devicename
		mkdir -p "$base/tools/devices/$devicename"
		deviceloc=""
		deviceloc="$base/tools/devices/$devicename"
		if [[ -d $base/tools/devices/tmp_device ]]; then
			cd $base/tools/devices/tmp_device
			mv * "$deviceloc"
			rm -rf $base/tools/devices/tmp_device
			cd $base
		fi
	else
		androidversion=$(
			echo -e "$t_startup_copy_extract"
			echo "$yellowt$base/superr_$romname$normal"
		)
	fi
	if [[ -f $romdir/build.prop ]]; then
		api=$(grep "ro.build.version.sdk" $romdir/build.prop | cut -d"=" -f2)
	fi
	export usesudo=""
	if [[ ! $cyg ]]; then
		if [[ ! -f $romdir/system/init.rc && ! -d $romdir/system/system/app ]]; then
			export usesudo="sudo "
		fi
	fi

	banner
	if [[ $(ls -d */ | grep 'superr_') ]]; then
		echo "$bluet$t_startup_project $greent$romname$normal"
		echo "$bluet$t_startup_version $greent$androidversion$normal"
	else
		echo "$bluet$t_startup_title_no_projects$normal"
	fi
	echo ""
	echo "$yellowb$redt$t_title_main$normal"
	echo ""
	echo "1) $t_menu_create"
	echo "2) $t_menu_choose"
	echo "3) $t_menu_delete"
	echo "4) $t_menu_extract"
	echo "5) $t_menu_updates ($bluet$t_title_current$greent$superrv$normal)"
	echo "${yellowt}6) $t_menu_misc"
	echo "7) $t_menu_boot_recovery"
	echo "8) $t_menu_rom_tools"
	echo "$bold${cyant}9) $t_menu_donate$normal"
	echo "${magentat}q = $t_menu_quit$normal"
	echo ""
	read -n 1 -p "$t_select" choice

	if [[ ! ${choice} =~ ^[1-9]$ ]] && [[ ! $choice = "q" ]]; then
		continue
	elif [[ $choice = "1" ]]; then # START Create new project directory
		new_project
		continue
	elif [[ $choice = "2" ]]; then # START Choose a different project
		romname=""
		cd $base
		continue
	elif [[ $choice = "3" ]]; then # START Delete a project
		delete_project
		continue
	elif [[ $choice = "4" ]]; then # START Extract for new ROM
		extract_new
		continue
	elif [[ $choice = "5" ]]; then # START Check for updates
		kitchen_update
		continue
	elif [[ $choice = "6" ]]; then # START Misc Tools
		misc_tools
		continue
	elif [[ $choice = "7" ]]; then # START Boot Tools
		boot_tools
		continue
	elif [[ $choice = "8" ]]; then # START ROM tools
		rom_tools
		continue
	elif [[ $choice = "9" ]]; then # START Get donate version for Windows & Linux!
		xdg-open "https://forum.xda-developers.com/apps/superr-kitchen/windows-linux-superr-s-kitchen-v3-0-0-0-t3601702" 2>/dev/null 1>/dev/null &
		cd $base
		continue
	elif [[ $choice = "q" ]]; then # START Quit
		echo ""
		echo ""
		exit
	fi
done
